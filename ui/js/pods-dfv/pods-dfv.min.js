var PodsDFV = (function (jQuery$1, React, ReactDOM, lodash) {
	'use strict';

	

	function __$styleInject (css, returnValue) {
	  if (typeof document === 'undefined') {
	    return returnValue;
	  }
	  css = css || '';
	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';
	  head.appendChild(style);
	  
	  if (style.styleSheet){
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	  return returnValue;
	}

	jQuery$1 = jQuery$1 && jQuery$1.hasOwnProperty('default') ? jQuery$1['default'] : jQuery$1;
	React = React && React.hasOwnProperty('default') ? React['default'] : React;
	ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

	/*global jQuery, _, Backbone, Marionette */
	var PodsDFVFieldModel = Backbone.Model.extend({
	  defaults: {
	    htmlAttr: {},
	    fieldConfig: {}
	  }
	});

	function mnRenderer(FieldClass, element, data) {
	  // Assemble the model and create the field
	  var fieldModel = new PodsDFVFieldModel({
	    htmlAttr: data.htmlAttr,
	    fieldConfig: data.fieldConfig
	  });
	  var newField = new FieldClass({
	    el: element,
	    model: fieldModel,
	    fieldItemData: data.fieldItemData
	  }); // Render the field, trigger an event for the outside world, and stash a reference

	  newField.render();
	  jQuery$1(element).trigger('render');
	  return newField;
	}

	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    });
	  }

	  return target;
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	/* eslint-disable react/prop-types */
	var PodsDFVValidationMessage = function PodsDFVValidationMessage(props) {
	  return React.createElement("div", {
	    className: "notice notice-error"
	  }, props.message);
	};
	var PodsDFVValidationMessages = function PodsDFVValidationMessages(props) {
	  return props.messages.map(function (thisMessage) {
	    return React.createElement(PodsDFVValidationMessage, {
	      key: thisMessage,
	      message: thisMessage
	    });
	  });
	};

	var _wp$i18n = wp.i18n,
	    __ = _wp$i18n.__,
	    sprintf$1 = _wp$i18n.sprintf;
	var validationRules = {
	  required: function required(value, fieldLabel) {
	    return {
	      facts: {
	        value: value
	      },
	      conditions: {
	        value: {
	          equal: ''
	        }
	      },
	      event: {
	        message: sprintf$1(__('%s is required.', 'pods'), fieldLabel)
	      }
	    };
	  },
	  max: function max(value, _max) {
	    return {
	      facts: {
	        numericValue: value * 1,
	        max: _max * 1
	      },
	      conditions: {
	        numericValue: {
	          greater: '$max'
	        }
	      },
	      event: {
	        message: sprintf$1(__('Exceeds the maximum value of %s', 'pods'), _max)
	      }
	    };
	  },
	  min: function min(value, _min) {
	    return {
	      facts: {
	        numericValue: value * 1,
	        min: _min * 1
	      },
	      conditions: {
	        numericValue: {
	          less: '$min'
	        }
	      },
	      event: {
	        message: sprintf$1(__('Below the minimum value of %s', 'pods'), _min)
	      }
	    };
	  },
	  emailFormat: function emailFormat(value) {
	    var emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	    return {
	      facts: {
	        value: value,
	        emailRegex: emailRegex
	      },
	      conditions: {
	        not: {
	          or: [{
	            value: {
	              equal: ''
	            }
	          }, {
	            emailRegex: {
	              matches: value
	            }
	          }]
	        }
	      },
	      event: {
	        message: __('Invalid email address format')
	      }
	    };
	  }
	};

	var utils = createCommonjsModule(function (module) {
	const predicate = module.exports;
	const _slice = Array.prototype.slice;

	// Useful for debuging curried functions
	const setSrc = function(curried, src) {
	  curried.toString = () => src.toString();
	  curried.src = src;
	  return curried;
	};

	// Curry's fn's with arity 2
	const curry = predicate.curry = function(f) {
	  return setSrc(function curried(a, b) {
	    switch (arguments.length) {
	      case 0: throw new TypeError('Function called with no arguments');
	      case 1: return setSrc(function(b) {
	        return f(a, b);
	      }, f);
	    }

	    return f(a, b);
	  }, f);
	};

	// TODO: es6ing this breaks!
	predicate.partial = function (fn) {
	  const args = _slice.call(arguments, 1);
	  return function() {
	    return fn.apply(null, args.concat(_slice.call(arguments)));
	  };
	};

	predicate.complement = predicate.invert = function(pred) {
	  return function () {
	    const ret = pred.apply(null, arguments);
	    // Handle curried fns
	    if (typeof ret === 'function') return predicate.complement(ret);
	    return !ret;
	  };
	};

	predicate.mod = curry(function(a, b) {
	  return a % b;
	});

	// assign b's props to a
	predicate.assign = curry(Object.assign || function(a, b) {
	  // use crummy for/in for perf purposes
	  for (let prop in b) {
	    if (b.hasOwnProperty(prop)) {
	      a[prop] = b[prop];
	    }
	  }

	  return a;
	});
	});

	var predicates = createCommonjsModule(function (module) {


	const predicate = module.exports;

	const curry = utils.curry;

	if (Object.is) {
	  predicate.is = curry(Object.is);
	} else {
	  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	  predicate.is = curry(function(v1, v2) {
	    if (v1 === 0 && v2 === 0) {
	      return 1 / v1 === 1 / v2;
	    }
	    if (v1 !== v1) {
	      return v2 !== v2;
	    }
	    return v1 === v2;
	  });
	}

	predicate.exists = function(val) {
	  return val != null;
	};

	predicate.truthy = function(val) {
	  // coerce for null != null
	  return !!(val && predicate.exists(val));
	};

	predicate.falsey = utils.complement(predicate.truthy);

	//---- value comparision methods

	predicate.equal = curry(function(a, b) {
	  return a === b;
	});

	predicate.eq = curry(function(a, b) {
	  return a == b;
	});

	predicate.null = predicate.equal(null);
	predicate.undef = predicate.equal(undefined);

	predicate.lt = predicate.less = curry(function(a, b) {
	  return a < b;
	});

	predicate.ltEq = predicate.le = predicate.lessEq = curry(function(a, b) {
	  return predicate.equal(a, b) || predicate.less(a, b);
	});

	predicate.gt = predicate.greater = curry(function(a, b) {
	  return a > b;
	});

	predicate.gtEq = predicate.ge = predicate.greaterEq = curry(function(a, b) {
	  return predicate.equal(a, b) || predicate.greater(a, b);
	});

	// --- Type checking predicates

	// Forces objects toString called returned as [object Object] for instance
	const __toString = Object.prototype.toString;
	const eqToStr = curry(function(str, val) {
	  return predicate.equal(str, __toString.call(val));
	});

	//---- Object type checks

	predicate.object = predicate.obj = function(val) {
	  return val === Object(val);
	};

	predicate.array = predicate.arr = Array.isArray || eqToStr('[object Array]');
	predicate.date = eqToStr('[object Date]');
	predicate.regex = predicate.regexp = predicate.rgx = predicate.RegExp = eqToStr('[object RegExp]');

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
	predicate.finite = Number.isFinite || function(val) {
	  return predicate.number(val) && isFinite(val);
	};

	predicate.nan = predicate.NaN = predicate.is(NaN);

	predicate.instance = curry(function(Cls, inst) {
	  return inst instanceof Cls;
	});

	predicate.arguments = eqToStr('[object Arguments]');
	predicate.error = predicate.instance(Error);

	// creates fns for predicate.string, etc
	const typeofBuilder = curry(function(type, val) {
	  return predicate.equal(type, typeof val);
	});

	//--- Create typeof methods

	// type of string and alias name
	// predicate.fn, predicate.num, etc
	[
	  ['function', 'fn'],
	  ['string', 'str'],
	  ['boolean', 'bool']
	].reduce(function(predicate, type) {
	  predicate[type[0]] = predicate[type[1]] = typeofBuilder(type[0]);
	  return predicate;
	}, predicate);

	predicate.number = predicate.num = function(val) {
	  return typeof val === 'number' && predicate.not.NaN(val);
	};

	predicate.int = function(val) {
	  return predicate.num(val) && predicate.zero(utils.mod(val, 1));
	};

	predicate.pos = function(val) {
	  return predicate.num(val) && predicate.greater(val, 0);
	};

	predicate.neg = function(val) {
	  return predicate.num(val) && predicate.less(val, 0);
	};

	predicate.zero = function(val) {
	  return predicate.num(val) && predicate.equal(val, 0);
	};

	predicate.even = function(val) {
	  return predicate.num(val) &&
	          predicate.not.zero(val) &&
	          predicate.zero(utils.mod(val, 2));
	};

	predicate.odd = function(val) {
	  return predicate.num(val) &&
	          predicate.not.zero(val) &&
	          predicate.not.zero(utils.mod(val, 2));
	};

	predicate.contains = predicate.includes = curry(function(arrOrString, val) {
	  if (!predicate.array(arrOrString) && !predicate.string(arrOrString)) {
	    throw new TypeError('Expected an array or string');
	  }

	  if (predicate.string(arrOrString) && !predicate.string(val)) {
	    return false;
	  }

	  if (predicate.NaN(val)) {
	    return arrOrString.some(predicate.NaN);
	  }

	  return !!~arrOrString.indexOf(val);
	});

	const __has = Object.prototype.hasOwnProperty;
	predicate.has = curry(function(o, key) {
	  return __has.call(o, key);
	});

	predicate.empty = function(o) {
	  if (predicate.not.exists(o)) return true;
	  if (predicate.arr(o) || predicate.str(o)) return !o.length;
	  if (predicate.obj(o)) {
	    for (let k in o) if (predicate.has(o, k)) return false;
	    return true;
	  }
	  throw new TypeError();
	};

	predicate.primitive = function(val) {
	  return predicate.string(val) || predicate.num(val) || predicate.bool(val) ||
	    predicate.null(val) || predicate.undef(val) || predicate.NaN(val);
	};

	predicate.matches = curry(function(rgx, val) {
	  return rgx.test(val);
	});

	// Assign inverse of each predicate
	predicate.not = Object.keys(predicate).reduce(function(acc, fnName) {
	  acc[fnName] = utils.complement(predicate[fnName]);
	  return acc;
	}, {});
	});

	var chain = createCommonjsModule(function (module) {


	const predicate = module.exports;

	// chaining mixin
	class Lazy {
	  constructor() {
	    this.lazy = [];
	  }

	  valueOf() {
	    return this.val();
	  }

	  val() {
	    return this.lazy[this.method](function(args) {
	      return args[0].apply(null, args[1]);
	    });
	  }
	}

	class Every extends Lazy {
	  constructor() {
	    super();
	    this.method = 'every';
	  }
	}

	class Some extends Lazy {
	  constructor() {
	    super();
	    this.method = 'some';
	  }
	}

	// Extend chaining methods onto the prototypes
	[Every, Some].forEach(function(cls) {
	  Object.keys(predicates).reduce(function(proto, fnName) {
	    if (!predicates.fn(predicates[fnName])) return proto;

	    proto[fnName] = function() {
	      this.lazy.push([predicates[fnName], arguments]);
	      return this;
	    };

	    return proto;
	  }, cls.prototype);
	});

	predicate.all = predicate.every = function() {
	  return new Every();
	};

	predicate.any = predicate.some = function() {
	  return new Some();
	};
	});

	var other = createCommonjsModule(function (module) {



	const predicate = module.exports;

	predicate.ternary = function(pred, a, b) {
	  if (predicates.bool(pred)) return pred ? a : b;
	  if (predicates.undef(a)) return utils.partial(predicate.ternary, pred);
	  if (predicates.undef(b)) return utils.partial(predicate.ternary, pred, a);
	  return predicate.ternary(pred(a, b), a, b);
	};

	const _every = Array.prototype.every;
	const _some = Array.prototype.some;

	predicate.and = function() {
	  const predicates = arguments;

	  return function _and(val) {
	    return _every.call(predicates, function(p) {
	      return p(val);
	    });
	  };
	};

	predicate.or = function() {
	  const predicates = arguments;

	  return function _or(val) {
	    return _some.call(predicates, function(p) {
	      return p(val);
	    });
	  };
	};
	});

	const predicate = {};
	predicate.VERSION = '1.0.0';

	[
	  utils,
	  predicates,
	  chain,
	  other,
	].reduce(utils.assign, predicate);

	var predicate_1 = predicate;

	var bindLoop = function(boundThis) {
	  var f = this
	    , ret;

	  if (arguments.length < 2)
	    ret = function() {
	      if (this instanceof ret) {
	        var ret_ = f.apply(this, arguments);
	        return Object(ret_) === ret_
	          ? ret_
	          : this
	      }
	      else
	        return f.apply(boundThis, arguments)
	    };
	  else {
	    var boundArgs = new Array(arguments.length - 1);
	    for (var i = 1; i < arguments.length; i++)
	      boundArgs[i - 1] = arguments[i];

	    ret = function() {
	      var boundLen = boundArgs.length
	        , args = new Array(boundLen + arguments.length)
	        , i;
	      for (i = 0; i < boundLen; i++)
	        args[i] = boundArgs[i];
	      for (i = 0; i < arguments.length; i++)
	        args[boundLen + i] = arguments[i];

	      if (this instanceof ret) {
	        var ret_ = f.apply(this, args);
	        return Object(ret_) === ret_
	          ? ret_
	          : this
	      }
	      else
	        return f.apply(boundThis, args)
	    };
	  }

	  ret.prototype = f.prototype;
	  return ret
	};

	/*!
	 * imports.
	 */

	var bind = Function.prototype.bind || bindLoop;

	/*!
	 * exports.
	 */

	var curry2_1 = curry2;

	/**
	 * Curry a binary function.
	 *
	 * @param {Function} fn
	 * Binary function to curry.
	 *
	 * @param {Object} [self]
	 * Function `this` context.
	 *
	 * @return {Function|*}
	 * If partially applied, return unary function, otherwise, return result of full application.
	 */

	function curry2 (fn, self) {
	  var out = function () {
	    if (arguments.length === 0) return out

	    return arguments.length > 1
	      ? fn.apply(self, arguments)
	      : bind.call(fn, self, arguments[0])
	  };

	  out.uncurry = function uncurry () {
	    return fn
	  };

	  return out
	}

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	var debug = createCommonjsModule(function (module, exports) {
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = ms;

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  return debug;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  exports.names = [];
	  exports.skips = [];

	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}
	});
	var debug_1 = debug.coerce;
	var debug_2 = debug.disable;
	var debug_3 = debug.enable;
	var debug_4 = debug.enabled;
	var debug_5 = debug.humanize;
	var debug_6 = debug.names;
	var debug_7 = debug.skips;
	var debug_8 = debug.formatters;

	var browser = createCommonjsModule(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit');

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	});
	var browser_1 = browser.log;
	var browser_2 = browser.formatArgs;
	var browser_3 = browser.save;
	var browser_4 = browser.load;
	var browser_5 = browser.useColors;
	var browser_6 = browser.storage;
	var browser_7 = browser.colors;

	/*!
	 * exports.
	 */

	var brackets2dots_1 = brackets2dots;

	/*!
	 * regexp patterns.
	 */

	var REPLACE_BRACKETS = /\[([^\[\]]+)\]/g;
	var LFT_RT_TRIM_DOTS = /^[.]*|[.]*$/g;

	/**
	 * Convert string with bracket notation to dot property notation.
	 *
	 * ### Examples:
	 *
	 *      brackets2dots('group[0].section.a.seat[3]')
	 *      //=> 'group.0.section.a.seat.3'
	 *
	 *      brackets2dots('[0].section.a.seat[3]')
	 *      //=> '0.section.a.seat.3'
	 *
	 *      brackets2dots('people[*].age')
	 *      //=> 'people.*.age'
	 *
	 * @param  {String} string
	 * original string
	 *
	 * @return {String}
	 * dot/bracket-notation string
	 */

	function brackets2dots(string) {
	  return ({}).toString.call(string) == '[object String]'
	       ? string.replace(REPLACE_BRACKETS, '.$1').replace(LFT_RT_TRIM_DOTS, '')
	       : ''
	}

	var toString = Object.prototype.toString;

	/**
	 * Transform dot-delimited strings to array of strings.
	 *
	 * @param  {String} string
	 * Dot-delimited string.
	 *
	 * @return {Array}
	 * Array of strings.
	 */

	function dotsplit (string) {
	  var idx = -1;
	  var str = compact(normalize(string).split('.'));
	  var end = str.length;
	  var out = [];

	  while (++idx < end) {
	    out.push(todots(str[idx]));
	  }

	  return out
	}

	/**
	 * Replace escapes with a placeholder.
	 *
	 * @param  {String} string
	 * Dot-delimited string.
	 *
	 * @return {String}
	 * Dot-delimited string with placeholders in place of escapes.
	 */

	function normalize (string) {
	  return (toString.call(string) === '[object String]' ? string : '').replace(/\\\./g, '\uffff')
	}

	/**
	 * Drop empty values from array.
	 *
	 * @param  {Array} array
	 * Array of strings.
	 *
	 * @return {Array}
	 * Array of strings (empty values dropped).
	 */

	function compact (arr) {
	  var idx = -1;
	  var end = arr.length;
	  var out = [];

	  while (++idx < end) {
	    if (arr[idx]) out.push(arr[idx]);
	  }

	  return out
	}

	/**
	 * Change placeholder to dots.
	 *
	 * @param  {String} string
	 * Dot-delimited string with placeholders.
	 *
	 * @return {String}
	 * Dot-delimited string without placeholders.
	 */

	function todots (string) {
	  return string.replace(/\uffff/g, '.')
	}

	/*!
	 * exports.
	 */

	var dotsplit_js = dotsplit;

	var debug$1 = browser('selectn');


	var string = Object.prototype.toString;

	var selectn_1 = curry2_1(selectn);

	/**
	 * Curried property accessor function that resolves deeply-nested object properties via dot/bracket-notation
	 * string path while mitigating `TypeErrors` via friendly and composable API.
	 *
	 * @param {String|Array} path
	 * Dot/bracket-notation string path or array.
	 *
	 * @param {Object} object
	 * Object to access.
	 *
	 * @return {Function|*|undefined}
	 * (1) returns `selectn/1` when partially applied.
	 * (2) returns value at path if path exists.
	 * (3) returns undefined if path does not exist.
	 */
	function selectn (path, object) {
	  debug$1('arguments:', {
	    path: path,
	    object: object
	  });

	  var idx = -1;
	  var seg = string.call(path) === '[object Array]' ? path : dotsplit_js(brackets2dots_1(path));
	  var end = seg.length;
	  var ref = end ? object : void 0;

	  while (++idx < end) {
	    if (Object(ref) !== ref) return void 0
	    ref = ref[seg[idx]];
	  }

	  debug$1('ref:', ref);
	  return typeof ref === 'function' ? ref() : ref
	}

	var utils$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.flatMap = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.normRef = normRef;
	exports.selectRef = selectRef;
	exports.isObject = isObject;
	exports.isDevelopment = isDevelopment;
	exports.toArray = toArray;
	exports.toError = toError;
	exports.isRefArray = isRefArray;
	exports.extractRefSchema = extractRefSchema;



	var _selectn2 = _interopRequireDefault(selectn_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function normRef(ref) {
	  return ref.replace(/\$/g, ".");
	}

	function selectRef(field, formData) {
	  var ref = normRef(field);
	  return (0, _selectn2.default)(ref, formData);
	}

	function isObject(obj) {
	  return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj !== null;
	}

	function isDevelopment() {
	  return "dev" !== "production";
	}

	function toArray(event) {
	  if (Array.isArray(event)) {
	    return event;
	  } else {
	    return [event];
	  }
	}

	function toError(message) {
	  {
	    throw new ReferenceError(message);
	  }
	}

	function isRefArray(field, schema) {
	  return schema.properties[field] && schema.properties[field].type === "array" && schema.properties[field].items && schema.properties[field].items["$ref"];
	}

	function fetchSchema(ref, schema) {
	  if (ref.startsWith("#/")) {
	    return ref.substr(2).split("/").reduce(function (schema, field) {
	      return schema[field];
	    }, schema);
	  } else {
	    toError("Only local references supported at this point use json-schema-deref");
	    return undefined;
	  }
	}

	function extractRefSchema(field, schema) {
	  var properties = schema.properties;

	  if (!properties || !properties[field]) {
	    toError(field + " not defined in properties");
	    return undefined;
	  } else if (properties[field].type === "array") {
	    if (isRefArray(field, schema)) {
	      return fetchSchema(properties[field].items["$ref"], schema);
	    } else {
	      return properties[field].items;
	    }
	  } else if (properties[field] && properties[field]["$ref"]) {
	    return fetchSchema(properties[field]["$ref"], schema);
	  } else if (properties[field] && properties[field].type === "object") {
	    return properties[field];
	  } else {
	    toError(field + " has no $ref field ref schema extraction is impossible");
	    return undefined;
	  }
	}

	var concat = function concat(x, y) {
	  return x.concat(y);
	};
	var flatMap = exports.flatMap = function flatMap(xs, f) {
	  return xs.map(f).reduce(concat, []);
	};
	});

	unwrapExports(utils$1);
	var utils_1 = utils$1.flatMap;
	var utils_2 = utils$1.normRef;
	var utils_3 = utils$1.selectRef;
	var utils_4 = utils$1.isObject;
	var utils_5 = utils$1.isDevelopment;
	var utils_6 = utils$1.toArray;
	var utils_7 = utils$1.toError;
	var utils_8 = utils$1.isRefArray;
	var utils_9 = utils$1.extractRefSchema;

	var constants = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var OR = exports.OR = "or";
	var AND = exports.AND = "and";
	var NOT = exports.NOT = "not";
	});

	unwrapExports(constants);
	var constants_1 = constants.OR;
	var constants_2 = constants.AND;
	var constants_3 = constants.NOT;

	var validation = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.predicatesFromRule = predicatesFromRule;
	exports.predicatesFromCondition = predicatesFromCondition;
	exports.listAllPredicates = listAllPredicates;
	exports.listInvalidPredicates = listInvalidPredicates;
	exports.validatePredicates = validatePredicates;
	exports.fieldsFromPredicates = fieldsFromPredicates;
	exports.fieldsFromCondition = fieldsFromCondition;
	exports.listAllFields = listAllFields;
	exports.listInvalidFields = listInvalidFields;
	exports.validateConditionFields = validateConditionFields;



	var _predicate2 = _interopRequireDefault(predicate_1);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var UNSUPPORTED_PREDICATES = ["and", "or", "ternary", "every", "some", "curry", "partial", "complement", "mod"];

	function predicatesFromRule(rule, schema) {
	  if ((0, utils$1.isObject)(rule)) {
	    return (0, utils$1.flatMap)(Object.keys(rule), function (p) {
	      var comparable = rule[p];
	      if ((0, utils$1.isObject)(comparable) || p === constants.NOT) {
	        if (p === constants.OR || p === constants.AND) {
	          if (Array.isArray(comparable)) {
	            return (0, utils$1.flatMap)(comparable, function (condition) {
	              return predicatesFromRule(condition, schema);
	            });
	          } else {
	            (0, utils$1.toError)("\"" + p + "\" must be an array");
	            return [];
	          }
	        } else {
	          var predicates = predicatesFromRule(comparable, schema);
	          predicates.push(p);
	          return predicates;
	        }
	      } else {
	        return predicatesFromRule(p, schema);
	      }
	    });
	  } else {
	    return [rule];
	  }
	}

	function predicatesFromCondition(condition, schema) {
	  return (0, utils$1.flatMap)(Object.keys(condition), function (ref) {
	    var refVal = condition[ref];
	    ref = (0, utils$1.normRef)(ref);
	    if (ref === constants.OR || ref === constants.AND) {
	      if (Array.isArray(refVal)) {
	        return (0, utils$1.flatMap)(refVal, function (c) {
	          return predicatesFromCondition(c, schema);
	        });
	      } else {
	        (0, utils$1.toError)(ref + " with " + JSON.stringify(refVal) + " must be an Array");
	        return [];
	      }
	    } else if (ref === constants.NOT) {
	      return predicatesFromCondition(refVal, schema);
	    } else if (ref.indexOf(".") !== -1) {
	      var separator = ref.indexOf(".");
	      var schemaField = ref.substr(0, separator);
	      var subSchema = (0, utils$1.extractRefSchema)(schemaField, schema);

	      if (subSchema) {
	        var subSchemaField = ref.substr(separator + 1);
	        var newCondition = _defineProperty({}, subSchemaField, refVal);
	        return predicatesFromCondition(newCondition, subSchema);
	      } else {
	        (0, utils$1.toError)("Can't find schema for " + schemaField);
	        return [];
	      }
	    } else if ((0, utils$1.isRefArray)(ref, schema)) {
	      var refSchema = (0, utils$1.extractRefSchema)(ref, schema);
	      return refSchema ? predicatesFromCondition(refVal, refSchema) : [];
	    } else if (schema.properties[ref]) {
	      return predicatesFromRule(refVal, schema);
	    } else {
	      (0, utils$1.toError)("Can't validate " + ref);
	      return [];
	    }
	  });
	}

	function listAllPredicates(conditions, schema) {
	  var allPredicates = (0, utils$1.flatMap)(conditions, function (condition) {
	    return predicatesFromCondition(condition, schema);
	  });
	  return allPredicates.filter(function (v, i, a) {
	    return allPredicates.indexOf(v) === i;
	  });
	}

	function listInvalidPredicates(conditions, schema) {
	  var refPredicates = listAllPredicates(conditions, schema);
	  return refPredicates.filter(function (p) {
	    return UNSUPPORTED_PREDICATES.includes(p) || _predicate2.default[p] === undefined;
	  });
	}

	function validatePredicates(conditions, schema) {
	  var invalidPredicates = listInvalidPredicates(conditions, schema);
	  if (invalidPredicates.length !== 0) {
	    (0, utils$1.toError)("Rule contains invalid predicates " + invalidPredicates);
	  }
	}

	function fieldsFromPredicates(predicate) {
	  if (Array.isArray(predicate)) {
	    return (0, utils$1.flatMap)(predicate, fieldsFromPredicates);
	  } else if ((0, utils$1.isObject)(predicate)) {
	    return (0, utils$1.flatMap)(Object.keys(predicate), function (field) {
	      var predicateValue = predicate[field];
	      return fieldsFromPredicates(predicateValue);
	    });
	  } else if (typeof predicate === "string" && predicate.startsWith("$")) {
	    return [predicate.substr(1)];
	  } else {
	    return [];
	  }
	}

	function fieldsFromCondition(condition) {
	  return (0, utils$1.flatMap)(Object.keys(condition), function (ref) {
	    var refCondition = condition[ref];
	    if (ref === constants.OR || ref === constants.AND) {
	      return (0, utils$1.flatMap)(refCondition, fieldsFromCondition);
	    } else if (ref === constants.NOT) {
	      return fieldsFromCondition(refCondition);
	    } else {
	      return [(0, utils$1.normRef)(ref)].concat(fieldsFromPredicates(refCondition));
	    }
	  });
	}

	function listAllFields(conditions) {
	  var allFields = (0, utils$1.flatMap)(conditions, fieldsFromCondition);
	  return allFields.filter(function (field) {
	    return field.indexOf(".") === -1;
	  }).filter(function (v, i, a) {
	    return allFields.indexOf(v) === i;
	  });
	}

	function listInvalidFields(conditions, schema) {
	  var allFields = listAllFields(conditions);
	  return allFields.filter(function (field) {
	    return schema.properties[field] === undefined;
	  });
	}

	function validateConditionFields(conditions, schema) {
	  var invalidFields = listInvalidFields(conditions, schema);
	  if (invalidFields.length !== 0) {
	    (0, utils$1.toError)("Rule contains invalid fields " + invalidFields);
	  }
	}
	});

	unwrapExports(validation);
	var validation_1 = validation.predicatesFromRule;
	var validation_2 = validation.predicatesFromCondition;
	var validation_3 = validation.listAllPredicates;
	var validation_4 = validation.listInvalidPredicates;
	var validation_5 = validation.validatePredicates;
	var validation_6 = validation.fieldsFromPredicates;
	var validation_7 = validation.fieldsFromCondition;
	var validation_8 = validation.listAllFields;
	var validation_9 = validation.listInvalidFields;
	var validation_10 = validation.validateConditionFields;

	var checkField_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = checkField;



	var _predicate2 = _interopRequireDefault(predicate_1);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var doCheckField = function doCheckField(fieldVal, rule) {
	  if ((0, utils$1.isObject)(rule)) {
	    return Object.keys(rule).every(function (p) {
	      var subRule = rule[p];
	      if (p === constants.OR || p === constants.AND) {
	        if (Array.isArray(subRule)) {
	          if (p === constants.OR) {
	            return subRule.some(function (rule) {
	              return doCheckField(fieldVal, rule);
	            });
	          } else {
	            return subRule.every(function (rule) {
	              return doCheckField(fieldVal, rule);
	            });
	          }
	        } else {
	          return false;
	        }
	      } else if (p === constants.NOT) {
	        return !doCheckField(fieldVal, subRule);
	      } else if (_predicate2.default[p]) {
	        return _predicate2.default[p](fieldVal, subRule);
	      } else {
	        return false;
	      }
	    });
	  } else {
	    return _predicate2.default[rule](fieldVal);
	  }
	};

	function checkField(fieldVal, rule) {
	  return doCheckField(fieldVal, rule);
	}
	});

	unwrapExports(checkField_1);

	var conditionsMeet_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toRelCondition = toRelCondition;
	exports.default = conditionsMeet;





	var _checkField2 = _interopRequireDefault(checkField_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function toRelCondition(refCondition, formData) {
	  if (Array.isArray(refCondition)) {
	    return refCondition.map(function (cond) {
	      return toRelCondition(cond, formData);
	    });
	  } else if ((0, utils$1.isObject)(refCondition)) {
	    return Object.keys(refCondition).reduce(function (agg, field) {
	      agg[field] = toRelCondition(refCondition[field], formData);
	      return agg;
	    }, {});
	  } else if (typeof refCondition === "string" && refCondition.startsWith("$")) {
	    return (0, utils$1.selectRef)(refCondition.substr(1), formData);
	  } else {
	    return refCondition;
	  }
	}

	function conditionsMeet(condition, formData) {
	  if (!(0, utils$1.isObject)(condition) || !(0, utils$1.isObject)(formData)) {
	    (0, utils$1.toError)("Rule " + JSON.stringify(condition) + " with " + formData + " can't be processed");
	    return false;
	  }
	  return Object.keys(condition).every(function (ref) {
	    var refCondition = condition[ref];
	    if (ref === constants.OR) {
	      return refCondition.some(function (rule) {
	        return conditionsMeet(rule, formData);
	      });
	    } else if (ref === constants.AND) {
	      return refCondition.every(function (rule) {
	        return conditionsMeet(rule, formData);
	      });
	    } else if (ref === constants.NOT) {
	      return !conditionsMeet(refCondition, formData);
	    } else {
	      var refVal = (0, utils$1.selectRef)(ref, formData);
	      if (Array.isArray(refVal)) {
	        var condMeatOnce = refVal.some(function (val) {
	          return (0, utils$1.isObject)(val) ? conditionsMeet(refCondition, val) : false;
	        });
	        // It's either true for an element in an array or for the whole array
	        return condMeatOnce || (0, _checkField2.default)(refVal, toRelCondition(refCondition, formData));
	      } else {
	        return (0, _checkField2.default)(refVal, toRelCondition(refCondition, formData));
	      }
	    }
	  });
	}
	});

	unwrapExports(conditionsMeet_1);
	var conditionsMeet_2 = conditionsMeet_1.toRelCondition;

	var applicableActions_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = applicableActions;





	var _conditionsMeet2 = _interopRequireDefault(conditionsMeet_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function applicableActions(rules, formData) {
	  return (0, utils$1.flatMap)(rules, function (_ref) {
	    var conditions = _ref.conditions,
	        event = _ref.event;

	    if ((0, _conditionsMeet2.default)(conditions, formData)) {
	      return (0, utils$1.toArray)(event);
	    } else {
	      return [];
	    }
	  });
	}
	});

	unwrapExports(applicableActions_1);

	var Engine_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	var _applicableActions2 = _interopRequireDefault(applicableActions_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var validate = function validate(schema) {
	  var isSchemaDefined = schema !== undefined && schema !== null;
	  if ((0, utils$1.isDevelopment)() && isSchemaDefined) {
	    if (!(0, utils$1.isObject)(schema)) {
	      (0, utils$1.toError)("Expected valid schema object, but got - " + schema);
	    }
	    return function (rule) {
	      (0, validation.validatePredicates)([rule.conditions], schema);
	      (0, validation.validateConditionFields)([rule.conditions], schema);
	    };
	  } else {
	    return function () {};
	  }
	};

	var Engine = function Engine(rules, schema) {
	  var _this = this;

	  _classCallCheck(this, Engine);

	  this.addRule = function (rule) {
	    _this.validate(rule);
	    _this.rules.push(rule);
	  };

	  this.run = function (formData) {
	    return Promise.resolve((0, _applicableActions2.default)(_this.rules, formData));
	  };

	  this.rules = [];
	  this.validate = validate(schema);

	  if (rules) {
	    (0, utils$1.toArray)(rules).forEach(function (rule) {
	      return _this.addRule(rule);
	    });
	  }
	};

	exports.default = Engine;
	});

	unwrapExports(Engine_1);

	var lib = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Engine2 = _interopRequireDefault(Engine_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Engine2.default;
	});

	var Engine = unwrapExports(lib);

	var useState = React.useState;
	var useEffect = React.useEffect;
	/**
	 *
	 * @return
	 * {
	 *     {function} addRules
	 *     {function} useValidation,
	 * 	}
	 */

	var podsValidation = function podsValidation() {
	  var _useState = useState([]),
	      _useState2 = _slicedToArray(_useState, 2),
	      validationMessages = _useState2[0],
	      setValidationMessages = _useState2[1];

	  var rules = [];
	  var facts = {};
	  /**
	   *
	   * @param conditionalRules
	   */

	  var addRules = function addRules(conditionalRules) {
	    conditionalRules.forEach(function (conditionalRule) {
	      if (conditionalRule.condition) {
	        rules.push(conditionalRule.rule);

	        if (conditionalRule.rule.facts) {
	          facts = Object.assign(facts, conditionalRule.rule.facts);
	        }
	      }
	    });
	  };
	  /**
	   *
	   * @return {Promise<any>}
	   */


	  var checkValidation = function checkValidation() {
	    var rulesEngine = new Engine(rules);
	    var messages = [];
	    return new Promise(function (resolve) {
	      // noinspection JSUnresolvedFunction
	      rulesEngine.run(facts).then(function (events) {
	        events.forEach(function (event) {
	          messages.push(event.message);
	        });
	      })["finally"](function () {
	        resolve(messages);
	      });
	    });
	  };
	  /**
	   *
	   * @param {string} value The field's value
	   *
	   * @return {string} Array of messages for all validation failures
	   */


	  var useValidation = function useValidation(value) {
	    useEffect(function () {
	      checkValidation().then(function (messages) {
	        return setValidationMessages(messages);
	      });
	    }, [value]);
	    return validationMessages;
	  };

	  return {
	    addRules: addRules,
	    useValidation: useValidation
	  };
	};

	var useState$1 = React.useState;
	var PodsDFVFieldContainer = function PodsDFVFieldContainer(props) {
	  var Field = props.fieldComponent;

	  var _useState = useState$1(props.fieldItemData[0] || ''),
	      _useState2 = _slicedToArray(_useState, 2),
	      value = _useState2[0],
	      setValue = _useState2[1];

	  var validation = podsValidation();
	  var validationMessages = validation.useValidation(value);
	  validation.addRules([{
	    rule: validationRules.required(value, props.fieldConfig.label),
	    condition: '1' === props.fieldConfig.required
	  }]);
	  var fieldClasses = classnames(props.htmlAttr["class"], {
	    'pods-validate-error': validationMessages.length
	  });
	  return React.createElement("div", {
	    className: "pods-dfv-container"
	  }, React.createElement(Field, _extends({
	    value: value,
	    setValue: setValue,
	    validation: validation,
	    className: fieldClasses
	  }, props)), React.createElement(PodsDFVValidationMessages, {
	    messages: validationMessages
	  }));
	};

	function reactRenderer(FieldClass, element, props) {
	  var Field = React.createFactory(FieldClass);
	  ReactDOM.render(React.createElement(PodsDFVFieldContainer, _extends({
	    fieldComponent: Field
	  }, props)), element);
	}

	var createStatePath = function createStatePath(path) {
	  return {
	    path: path,
	    getFrom: function getFrom(state) {
	      return path.split('.').reduce(function (value, el) {
	        return value[el];
	      }, state);
	    },
	    createTree: function createTree(value) {
	      return path.split('.').reduceRight(function (acc, currentValue) {
	        return _defineProperty({}, currentValue, acc);
	      }, value);
	    }
	  };
	};
	var POD_META = createStatePath('podMeta');
	var POD_NAME = createStatePath("".concat(POD_META.path, ".name"));
	var FIELDS = createStatePath('fields');
	var UI = createStatePath('ui');
	var ACTIVE_TAB = createStatePath("".concat(UI.path, ".activeTab"));
	var SAVE_STATUS = createStatePath("".concat(UI.path, ".saveStatus"));
	var TABS = createStatePath("".concat(UI.path, ".tabs")); // Ordered list of tab names as an array: [ 'tab1name', 'tab2name', ... ]
	// { tab1name: {tab object}, tab2name: {tab object}, ...}

	var TABS_BY_NAME = createStatePath("".concat(TABS.path, ".byName")); // Pod option list keyed by option name:
	// { can_export: {object}, show_ui: {object}, etc }

	var OPTIONS = createStatePath('options'); // Ordered list of option names for this tab as an array:
	// [ 'option1name', 'options2name', ...]
	// Stored in the tab objects in TABS_BY_NAME

	var TAB_OPTIONS_LIST = 'optionList';

	var STORE_KEY_EDIT_POD = 'pods/edit-pod';
	var uiConstants = {
	  actions: {
	    SET_ACTIVE_TAB: 'SET_ACTIVE_TAB',
	    SET_SAVE_STATUS: 'SET_SAVE_STATUS'
	  },
	  tabNames: {
	    MANAGE_FIELDS: 'manage-fields',
	    LABELS: 'labels',
	    ADMIN_UI: 'admin-ui',
	    ADVANCED_OPTIONS: 'advanced',
	    AUTO_TEMPLATE_OPTIONS: 'pods-pfat',
	    REST_API: 'rest-api'
	  },
	  saveStatuses: {
	    NONE: '',
	    SAVING: 'SAVING',
	    SAVE_SUCCESS: 'SAVE_SUCCESS',
	    SAVE_ERROR: 'SAVE_ERROR'
	  }
	};
	var optionConstants = {
	  actions: {
	    SET_OPTION_ITEM_VALUE: 'SET_OPTION_ITEM_VALUE'
	  }
	};
	var podMetaConstants = {
	  actions: {
	    SET_POD_NAME: 'SET_POD_NAME',
	    SET_POD_META_VALUE: 'SET_POD_META_VALUE'
	  }
	};
	var initialUIState = {
	  activeTab: uiConstants.tabNames.MANAGE_FIELDS,
	  saveStatus: uiConstants.saveStatuses.NONE
	};

	var combineReducers = wp.data.combineReducers; // Helper function

	var setObjectValue = function setObjectValue(object, key, value) {
	  return _objectSpread({}, object, _defineProperty({}, key, value));
	}; // UI

	var ui = function ui() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialUIState;
	  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var actions = uiConstants.actions,
	      saveStatuses = uiConstants.saveStatuses;

	  switch (action.type) {
	    case actions.SET_ACTIVE_TAB:
	      // Use the default if the tab name doesn't exist
	      var newTab = initialUIState.activeTab;
	      var tabIndex = state.tabs.orderedList.indexOf(action.activeTab);

	      if (-1 !== tabIndex) {
	        newTab = action.activeTab;
	      }

	      return _objectSpread({}, state, {
	        activeTab: newTab
	      });

	    case actions.SET_SAVE_STATUS:
	      var newStatus = action.saveStatus;

	      if (!Object.values(saveStatuses).includes(newStatus)) {
	        newStatus = initialUIState.saveStatus;
	      }

	      return _objectSpread({}, state, {
	        saveStatus: newStatus
	      });

	    default:
	      return state;
	  }
	};
	var options = function options() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var actions = optionConstants.actions;

	  switch (action.type) {
	    case actions.SET_OPTION_ITEM_VALUE:
	      var optionName = action.optionName,
	          itemName = action.itemName,
	          itemValue = action.itemValue;
	      return _objectSpread({}, state, _defineProperty({}, optionName, setObjectValue(state[optionName], itemName, itemValue)));

	    default:
	      return state;
	  }
	}; // Pod meta

	var podMeta = function podMeta() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var actions = podMetaConstants.actions;

	  switch (action.type) {
	    case actions.SET_POD_NAME:
	      return _objectSpread({}, state, {
	        name: action.name
	      });

	    case actions.SET_POD_META_VALUE:
	      return _objectSpread({}, state, _defineProperty({}, action.key, action.value));

	    default:
	      return state;
	  }
	}; // Fields

	var fields = function fields() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return state;
	};
	var reducer = combineReducers({
	  ui: ui,
	  podMeta: podMeta,
	  options: options,
	  fields: fields
	});

	var getState = function getState(state) {
	  return state;
	};
	/**
	 * UI
	 */
	//-- Tabs and options

	var getOption = function getOption(state, optionName) {
	  return OPTIONS.getFrom(state)[optionName];
	};
	var getOptionItemValue = function getOptionItemValue(state, optionName, itemName) {
	  return OPTIONS.getFrom(state)[optionName][itemName];
	};
	var getOptionValue = function getOptionValue(state, optionName) {
	  return OPTIONS.getFrom(state)[optionName].value;
	};
	var getActiveTab = function getActiveTab(state) {
	  return ACTIVE_TAB.getFrom(state);
	};
	var getTab = function getTab(state, tabName) {
	  return TABS_BY_NAME.getFrom(state)[tabName];
	};
	var getOrderedTabList = function getOrderedTabList(state) {
	  return TABS.getFrom(state).orderedList;
	};
	var getTabs = function getTabs(state) {
	  return getOrderedTabList(state).map(function (tabName) {
	    return getTab(state, tabName);
	  });
	};
	var getOrderedTabOptionList = function getOrderedTabOptionList(state, tabName) {
	  return getTab(state, tabName)[TAB_OPTIONS_LIST];
	};
	var getTabOptions = function getTabOptions(state, tabName) {
	  return getOrderedTabOptionList(state, tabName).map(function (optionName) {
	    return getOption(state, optionName);
	  });
	}; //-- Save status

	var getSaveStatus = function getSaveStatus(state) {
	  return SAVE_STATUS.getFrom(state);
	};
	var isSaving = function isSaving(state) {
	  return SAVE_STATUS.getFrom(state) === uiConstants.saveStatuses.SAVING;
	};
	/**
	 * Pod meta
	 */

	var getPodName = function getPodName(state) {
	  return POD_NAME.getFrom(state);
	};
	var getPodMetaValue = function getPodMetaValue(state, key) {
	  return POD_META.getFrom(state)[key];
	};
	/**
	 * Fields
	 */

	var getFields = function getFields(state) {
	  return FIELDS.getFrom(state);
	};

	var selectors = /*#__PURE__*/Object.freeze({
		getState: getState,
		getOption: getOption,
		getOptionItemValue: getOptionItemValue,
		getOptionValue: getOptionValue,
		getActiveTab: getActiveTab,
		getTab: getTab,
		getOrderedTabList: getOrderedTabList,
		getTabs: getTabs,
		getOrderedTabOptionList: getOrderedTabOptionList,
		getTabOptions: getTabOptions,
		getSaveStatus: getSaveStatus,
		isSaving: isSaving,
		getPodName: getPodName,
		getPodMetaValue: getPodMetaValue,
		getFields: getFields
	});

	var setActiveTab = function setActiveTab(activeTab) {
	  return {
	    type: uiConstants.actions.SET_ACTIVE_TAB,
	    activeTab: activeTab
	  };
	};
	var setSaveStatus = function setSaveStatus(saveStatus) {
	  return {
	    type: uiConstants.actions.SET_SAVE_STATUS,
	    saveStatus: saveStatus
	  };
	}; // Options

	var setOptionValue = function setOptionValue(name, value) {
	  return setOptionItemValue(name, 'value', value);
	};
	var setOptionItemValue = function setOptionItemValue(optionName, itemName, itemValue) {
	  return {
	    type: optionConstants.actions.SET_OPTION_ITEM_VALUE,
	    optionName: optionName,
	    itemName: itemName,
	    itemValue: itemValue
	  };
	}; // Pod meta

	var setPodName = function setPodName(name) {
	  return {
	    type: podMetaConstants.actions.SET_POD_NAME,
	    name: name
	  };
	};
	var setPodMetaValue = function setPodMetaValue(key, value) {
	  return {
	    type: podMetaConstants.actions.SET_POD_META_VALUE,
	    key: key,
	    value: value
	  };
	};

	var actions = /*#__PURE__*/Object.freeze({
		setActiveTab: setActiveTab,
		setSaveStatus: setSaveStatus,
		setOptionValue: setOptionValue,
		setOptionItemValue: setOptionItemValue,
		setPodName: setPodName,
		setPodMetaValue: setPodMetaValue
	});

	var registerStore = wp.data.registerStore;
	var initStore = function initStore(props) {
	  var initialState = lodash.merge(UI.createTree(initialUIState), props);
	  return registerStore(STORE_KEY_EDIT_POD, {
	    reducer: reducer,
	    selectors: selectors,
	    actions: actions,
	    initialState: initialState
	  });
	};

	function reactDirectRenderer(FieldClass, element, props) {
	  var Field = React.createFactory(FieldClass); // Todo:
	  //
	  //  1: Need a generic way to initialize the stores.  This can't be inside
	  // the component or it will revert to initial values on every render.
	  // Kludged here for now to continue prototyping.
	  //
	  // 2: initialState (in initStore) will not arrive until WP 5.2.
	  //

	  initStore(props);
	  ReactDOM.render(Field(props), element);
	}

	/**
	 * Note: No checking is done here to make sure we're in a modal and that
	 * Gutenberg is actually loaded.  Consuming code must make sure the implicit
	 * Gutenberg dependencies exist (primarily wp.data) before calling through
	 * to init().
	 */
	// The guard in front is to ensure wp.data exists before accessing select
	var editorData = wp.data && wp.data.select('core/editor');
	var unSubscribe;
	/**
	 * init() is the only exposed interface
	 */

	var PodsGbModalListener = {
	  init: function init() {
	    if (editorData.isCurrentPostPublished()) {
	      // Post is published, this is an edit
	      unSubscribe = wp.data.subscribe(saveListener);
	    } else {
	      // Unpublished post, this is an "add new" modal
	      unSubscribe = wp.data.subscribe(publishListener);
	    }
	  }
	}; //-------------------------------------------
	// Helper functions, not externally exposed
	//-------------------------------------------

	/**
	 *
	 * @return string
	 */

	function getFeaturedImageURL() {
	  var featuredImageId = editorData.getCurrentPostAttribute('featured_media');
	  var url = ''; // Early exit if nothing was set

	  if (!featuredImageId) {
	    return url;
	  }

	  var media = wp.data.select('core').getMedia(featuredImageId);

	  if (media) {
	    var mediaSize = wp.hooks.applyFilters('editor.PostFeaturedImage.imageSize', 'post-thumbnail', '');

	    if (media.media_details && media.media_details.sizes && media.media_details.sizes[mediaSize]) {
	      url = media.media_details.sizes[mediaSize].source_url;
	    } else {
	      url = media.source_url;
	    }
	  }

	  return url;
	}
	/**
	 * Handles "add new" modals
	 */


	function publishListener() {
	  if (editorData.isCurrentPostPublished()) {
	    unSubscribe();
	    triggerUpdateEvent({
	      'icon': getFeaturedImageURL(),
	      'link': editorData.getPermalink(),
	      'edit_link': "post.php?post=".concat(editorData.getCurrentPostId(), "&action=edit&pods_modal=1"),
	      'selected': true // Automatically select add new records

	    });
	  }
	}
	/**
	 * Handles "edit existing" modals
	 */


	function saveListener() {
	  if (saveListener.wasSaving) {
	    // The wasSaving flag already ignores autosave so we only need to
	    // check isSavingPost()
	    if (!editorData.isSavingPost()) {
	      // Currently on save failure we'll remain subscribed and try
	      // listening for the next save attempt
	      saveListener.wasSaving = false;

	      if (editorData.didPostSaveRequestSucceed()) {
	        unSubscribe();
	        triggerUpdateEvent({
	          'icon': getFeaturedImageURL()
	        });
	      }
	    }
	  } else {
	    saveListener.wasSaving = isUserSaving();
	  }
	}
	/**
	 * Whether or not an active save is in progress due to user action (ignore autosaves)
	 *
	 * @return boolean
	 */


	function isUserSaving() {
	  return !!(editorData.isSavingPost() && !editorData.isAutosavingPost());
	}
	/**
	 * The event listener in the parent window will take care of closing the modal
	 */


	function triggerUpdateEvent(optionalData) {
	  var defaultData = {
	    'id': editorData.getCurrentPostId(),
	    'name': editorData.getCurrentPostAttribute('title')
	  };
	  var postData = Object.assign(defaultData, optionalData);
	  window.parent.jQuery(window.parent).trigger('dfv:modal:update', postData);
	}

	var template = "<div class=\"pods-ui-file-list pods-field-template-<%- fieldConfig.file_field_template %>\"></div>\n<div class=\"pods-ui-region\"></div>\n<div class=\"pods-ui-form\"></div>\n";

	/*global jQuery, _, Backbone, Marionette */

	/**
	 *
	 */
	var PodsFieldListView = Marionette.CollectionView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  initialize: function initialize(options) {
	    this.fieldModel = options.fieldModel;
	    this.childViewOptions = {
	      fieldModel: options.fieldModel
	    };
	  }
	});
	/**
	 * @extends Backbone.View
	 */

	var PodsFieldView = Marionette.View.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  serializeData: function serializeData() {
	    var fieldModel = this.options.fieldModel;
	    var data = this.model ? this.model.toJSON() : {};
	    data.htmlAttr = fieldModel.get('htmlAttr');
	    data.fieldConfig = fieldModel.get('fieldConfig');
	    return data;
	  }
	});
	/**
	 * Top-level "main field container"
	 */

	var PodsDFVFieldLayout = Marionette.View.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  initialize: function initialize(options) {
	    this.fieldItemData = options.fieldItemData;
	  }
	});

	/*global jQuery, _, Backbone, Marionette */

	/**
	 *
	 */
	var FileUploadModel = Backbone.Model.extend({
	  defaults: {
	    'id': 0,
	    'icon': '',
	    'name': '',
	    'edit_link': '',
	    'link': '',
	    'download': ''
	  }
	});
	/**
	 *
	 */

	var FileUploadCollection = Backbone.Collection.extend({
	  model: FileUploadModel
	});

	var template$1 = "<input name=\"<%- htmlAttr.name %>[<%- id %>][id]\" data-name-clean=\"<%- htmlAttr.name_clean %>-id\" id=\"<%- htmlAttr.id %>-<%- id %>-id\" class=\"<%- htmlAttr.class %>\" type=\"hidden\" value=\"<%- id %>\">\n<ul class=\"pods-dfv-list-meta media-item\">\n\t<% if ( 1 != fieldConfig.file_limit ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-handle\"><span><%- PodsI18n.__( 'Reorder' ) %></span></li>\n\t<% } %>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-icon\"><img class=\"pinkynail\" src=\"<%- icon %>\" alt=\"<%- PodsI18n.__( 'Icon' ) %>\"></li>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-name\">\n\t\t<% if ( 0 != fieldConfig.file_edit_title ) { %>\n\t\t\t<input name=\"<%- htmlAttr.name %>[<%- id %>][title]\" data-name-clean=\"<%- htmlAttr.name_clean %>-title\" id=\"pods-form-ui-<%- htmlAttr.name_clean %>-<%- id %>-title\" class=\"pods-form-ui-field-type-text pods-form-ui-field-name-<%- htmlAttr.name_clean %>-title\" type=\"text\" value=\"<%- name %>\" tabindex=\"2\" maxlength=\"255\">\n\t\t<% } else { %>\n\t\t\t<%- name %>\n\t\t<% } %>\n\t</li>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-actions\">\n\t\t<ul>\n\t\t\t<li class=\"pods-dfv-list-col pods-dfv-list-remove\">\n\t\t\t\t<a href=\"#remove\" title=\"<%- PodsI18n.__( 'Deselect' ) %>\"><%- PodsI18n.__( 'Deselect' ) %></a>\n\t\t\t</li>\n\t\t\t<% if ( 1 == fieldConfig.file_linked && '' != download ) { %>\n\t\t\t\t<li class=\"pods-dfv-list-col pods-dfv-list-download\">\n\t\t\t\t\t<a href=\"<%- download %>\" target=\"_blank\" title=\"<%- PodsI18n.__( 'Download' ) %>\"><%- PodsI18n.__( 'Download' ) %></a>\n\t\t\t\t</li>\n\t\t\t<% } %>\n\t\t\t<% if ( 1 == fieldConfig.file_show_edit_link && '' != edit_link ) { %>\n\t\t\t\t<li class=\"pods-dfv-list-col pods-dfv-list-edit\">\n\t\t\t\t\t<a href=\"<%- edit_link %>\" target=\"_blank\" title=\"<%- PodsI18n.__( 'Edit' ) %>\"><%- PodsI18n.__( 'Edit' ) %></a>\n\t\t\t\t</li>\n\t\t\t<% } %>\n\t\t</ul>\n\t</li>\n</ul>\n";

	/*global jQuery, _, Backbone, Marionette, wp */
	/**
	 * Individual list items, representing a single file
	 */

	var FileUploadItem = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'li',
	  template: _.template(template$1),
	  className: 'pods-dfv-list-item',
	  ui: {
	    dragHandle: '.pods-dfv-list-handle',
	    editLink: '.pods-dfv-list-edit-link',
	    viewLink: '.pods-dfv-list-link',
	    downloadLink: '.pods-dfv-list-download',
	    removeButton: '.pods-dfv-list-remove',
	    itemName: '.pods-dfv-list-name'
	  },
	  triggers: {
	    'click @ui.removeButton': 'remove:file:click'
	  }
	});
	/**
	 * The file list container
	 */

	var FileUploadList = PodsFieldListView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'ul',
	  className: 'pods-dfv-list',
	  childView: FileUploadItem,
	  childViewTriggers: {
	    'remove:file:click': 'childview:remove:file:click'
	  },
	  onAttach: function onAttach() {
	    var fieldConfig = this.options.fieldModel.get('fieldConfig');
	    var sort_axis = 'y'; // @todo
	    // http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

	    if (1 != fieldConfig['file_limit']) {
	      if ('tiles' == fieldConfig['file_field_template']) {
	        sort_axis = '';
	      } // init sortable


	      this.$el.sortable({
	        containment: 'parent',
	        axis: sort_axis,
	        scrollSensitivity: 40,
	        tolerance: 'pointer',
	        opacity: 0.6
	      });
	    }
	  }
	});

	var template$2 = "<a class=\"button pods-dfv-list-add\" href=\"#\" tabindex=\"2\"><%= fieldConfig.file_add_button %></a>";

	/*global jQuery, _, Backbone, Marionette, wp */
	var FileUploadForm = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'div',
	  template: _.template(template$2),
	  ui: {
	    addButton: '.pods-dfv-list-add'
	  },
	  triggers: {
	    'click @ui.addButton': 'childview:add:file:click'
	  }
	});

	/*global jQuery, _, Backbone, Marionette */

	/**
	 *
	 * @param {Object} options
	 *
	 * @param {Object} options.browseButton   Existing and attached DOM node
	 * @param {Object} options.uiRegion       Marionette.Region object
	 * @param {Object} options.fieldConfig
	 *
	 * @param {string} options.fieldConfig.file_modal_title
	 * @param {string} options.fieldConfig.file_modal_add_button
	 * @param {string} options.fieldConfig.file_limit
	 * @param {string} options.fieldConfig.limit_extensions
	 * @param {string} options.fieldConfig.limit_types
	 * @param {string} options.fieldConfig.file_attachment_tab
	 *
	 * @param {Object} options.fieldConfig.plupload_init
	 * @param {Object} options.fieldConfig.plupload_init.browse_button
	 *
	 * @class
	 */
	var PodsFileUploader = Marionette.Object.extend({
	  constructor: function constructor(options) {
	    // Magically set the object properties we need, they'll just "be there" for the concrete instance
	    this.browseButton = options.browseButton;
	    this.uiRegion = options.uiRegion;
	    this.fieldConfig = options.fieldConfig;
	    Marionette.Object.call(this, options);
	  }
	});

	var template$3 = "<ul class=\"pods-dfv-list-meta media-item\">\n\t<% if ( '' === errorMsg ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-progress\"><div class=\"progress-bar\" style=\"width: <%- progress %>%;\"></div></li>\n\t<% } %>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-name\"><%- filename %></li>\n</ul>\n<% if ( '' !== errorMsg ) { %>\n\t<div class=\"error\"><%- errorMsg %></div>\n<% } %>\n";

	/*global jQuery, _, Backbone, Marionette, wp */
	var FileUploadQueueModel = Backbone.Model.extend({
	  defaults: {
	    id: 0,
	    filename: '',
	    progress: 0,
	    errorMsg: ''
	  }
	});
	/**
	 *
	 */

	var FileUploadQueueItem = Marionette.View.extend({
	  model: FileUploadQueueModel,
	  tagName: 'li',
	  template: _.template(template$3),
	  attributes: function attributes() {
	    return {
	      "class": 'pods-dfv-list-item',
	      id: this.model.get('id')
	    };
	  },
	  modelEvents: {
	    'change': 'onModelChanged'
	  },
	  onModelChanged: function onModelChanged() {
	    this.render();
	  }
	});
	/**
	 *
	 */

	var FileUploadQueue = Marionette.CollectionView.extend({
	  tagName: 'ul',
	  className: 'pods-dfv-list pods-dfv-list-queue',
	  childView: FileUploadQueueItem
	});

	var Plupload = PodsFileUploader.extend({
	  plupload: {},
	  fileUploader: 'plupload',
	  initialize: function initialize() {
	    // Set the browse button argument for plupload... it's required
	    this.fieldConfig['plupload_init']['browse_button'] = this.browseButton;
	    this.plupload = new plupload.Uploader(this.fieldConfig['plupload_init']);
	    this.plupload.init(); // Setup all callbacks: ( event_name, callback, context )

	    this.plupload.bind('FilesAdded', this.onFilesAdded, this);
	    this.plupload.bind('UploadProgress', this.onUploadProgress, this);
	    this.plupload.bind('FileUploaded', this.onFileUploaded, this);
	  },

	  /**
	   * Fired after files have been selected from the dialog
	   *
	   * @param up
	   * @param files
	   */
	  onFilesAdded: function onFilesAdded(up, files) {
	    var model, collection, view; // Assemble the collection data for the file queue

	    collection = new Backbone.Collection();
	    jQuery.each(files, function (index, file) {
	      model = new FileUploadQueueModel({
	        id: file.id,
	        filename: file.name
	      });
	      collection.add(model);
	    }); // Create a new view based on the collection

	    view = new FileUploadQueue({
	      collection: collection
	    });
	    view.render(); // Generate the HTML, not attached to the DOM yet
	    // Reset the region in case any error messages are hanging around from a previous upload
	    // and show the new file upload queue

	    this.uiRegion.reset();
	    this.uiRegion.show(view); // Stash references

	    this.queueCollection = collection;
	    up.refresh();
	    up.start();
	  },

	  /**
	   *
	   * @param up
	   * @param file
	   */
	  onUploadProgress: function onUploadProgress(up, file) {
	    var model = this.queueCollection.get(file.id);
	    model.set({
	      progress: file.percent
	    });
	  },

	  /**
	   *
	   * @param up
	   * @param file
	   * @param resp
	   */
	  onFileUploaded: function onFileUploaded(up, file, resp) {
	    var model = this.queueCollection.get(file.id);
	    var response = resp.response;
	    var newFile = [];
	    var json; // Error condition 1

	    if ('Error: ' === resp.response.substr(0, 7)) {
	      response = response.substr(7);

	      if (window.console) {
	        console.log(response);
	      }

	      model.set({
	        progress: 0,
	        errorMsg: response
	      }); // Error condition 2
	    } else if ('<e>' === resp.response.substr(0, 3)) {
	      response = jQuery(response).text(); // Strip tags, text only

	      if (window.console) {
	        console.log(response);
	      }

	      model.set({
	        progress: 0,
	        errorMsg: response
	      });
	    } else {
	      json = response.match(/{.*}$/);

	      if (null !== json && 0 < json.length) {
	        json = jQuery.parseJSON(json[0]);
	      } else {
	        json = {};
	      }

	      if ('object' !== _typeof(json) || jQuery.isEmptyObject(json)) {
	        if (window.console) {
	          console.log(response);
	        }

	        if (window.console) {
	          console.log(json);
	        }

	        model.set({
	          progress: 0,
	          errorMsg: PodsI18n.__('Error uploading file: ') + file.name
	        });
	        return;
	      }

	      newFile = {
	        id: json.ID,
	        icon: json.thumbnail,
	        name: json.post_title,
	        edit_link: json.edit_link,
	        link: json.link,
	        download: json.download
	      }; // Remove the file from the upload queue model and trigger an event for the hosting container

	      model.trigger('destroy', model);
	      this.trigger('added:files', newFile);
	    }
	  }
	});

	/* eslint-disable camelcase */
	var MediaModal = PodsFileUploader.extend({
	  mediaObject: {},
	  fileUploader: 'attachment',
	  invoke: function invoke() {
	    if (wp.Uploader.defaults.filters.mime_types === undefined) {
	      wp.Uploader.defaults.filters.mime_types = [{
	        title: PodsI18n.__('Allowed Files'),
	        extensions: '*'
	      }];
	    }

	    var defaultExt = wp.Uploader.defaults.filters.mime_types[0].extensions;
	    wp.Uploader.defaults.filters.mime_types[0].extensions = this.fieldConfig['limit_extensions']; // set our settings
	    // noinspection EqualityComparisonWithCoercionJS ("1" is every bit as valid to us as 1)

	    this.mediaObject = wp.media({
	      title: this.fieldConfig['file_modal_title'],
	      multiple: 1 != this.fieldConfig['file_limit'],
	      library: {
	        type: this.fieldConfig['limit_types']
	      },
	      // Customize the submit button.
	      button: {
	        // Set the text of the button.
	        text: this.fieldConfig['file_modal_add_button']
	      }
	    }); // One-shot callback ( event, callback, context )

	    this.mediaObject.once('select', this.onMediaSelect, this); // open the frame

	    this.mediaObject.open();
	    this.mediaObject.content.mode(this.fieldConfig['file_attachment_tab']); // Reset the allowed file extensions

	    wp.Uploader.defaults.filters.mime_types[0].extensions = defaultExt;
	  },
	  onMediaSelect: function onMediaSelect() {
	    var selection = this.mediaObject.state().get('selection');
	    var newFiles = [];

	    if (!selection) {
	      return;
	    } // loop through the selected files


	    selection.each(function (attachment) {
	      var sizes = attachment.attributes.sizes;
	      var attachmentThumbnail; // by default use the generic icon

	      attachmentThumbnail = attachment.attributes.icon; // only thumbnails have sizes which is what we're on the hunt for

	      if (sizes !== undefined) {
	        // Get thumbnail if it exists
	        if (sizes.thumbnail !== undefined && sizes.thumbnail.url !== undefined) {
	          attachmentThumbnail = sizes.thumbnail.url;
	        } else if (sizes.full !== undefined && sizes.full.url !== undefined) {
	          // If thumbnail doesn't exist, get full because this is a small image
	          attachmentThumbnail = sizes.full.url;
	        }
	      }

	      newFiles.push({
	        id: attachment.attributes.id,
	        icon: attachmentThumbnail,
	        name: attachment.attributes.title,
	        edit_link: attachment.attributes.editLink,
	        link: attachment.attributes.link,
	        download: attachment.attributes.url
	      });
	    }); // Fire an event with an array of models to be added

	    this.trigger('added:files', newFiles);
	  }
	});

	/*global jQuery, _, Backbone, Marionette */
	var Uploaders = [Plupload, MediaModal];
	var UNLIMITED_FILES = 0;
	/**
	 * @extends Backbone.View
	 */

	var FileUpload = PodsDFVFieldLayout.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  template: _.template(template),
	  regions: {
	    list: '.pods-ui-file-list',
	    uiRegion: '.pods-ui-region',
	    // "Utility" container for uploaders to use
	    form: '.pods-ui-form'
	  },
	  childViewEvents: {
	    'childview:remove:file:click': 'onChildviewRemoveFileClick',
	    'childview:add:file:click': 'onChildviewAddFileClick'
	  },
	  uploader: {},

	  /**
	   *
	   */
	  onBeforeRender: function onBeforeRender() {
	    if (this.collection === undefined) {
	      this.collection = new FileUploadCollection(this.fieldItemData);
	    }
	  },
	  onRender: function onRender() {
	    var listView = new FileUploadList({
	      collection: this.collection,
	      fieldModel: this.model
	    });
	    var formView = new FileUploadForm({
	      fieldModel: this.model
	    });
	    this.showChildView('list', listView);
	    this.showChildView('form', formView); // Setup the uploader and listen for a response event

	    this.uploader = this.createUploader();
	    this.listenTo(this.uploader, 'added:files', this.onAddedFiles);
	  },

	  /**
	   * Fired by a remove:file:click trigger in any child view
	   *
	   * @param childView View that was the source of the event
	   */
	  onChildviewRemoveFileClick: function onChildviewRemoveFileClick(childView) {
	    this.collection.remove(childView.model);
	  },

	  /**
	   * Fired by a add:file:click trigger in any child view
	   *
	   * plupload fields should never generate this event, it places a shim over our button and handles the
	   * event internally.  But this event does still come through with plupload fields in some browser
	   * environments for reasons we've been unable to determine.
	   */
	  onChildviewAddFileClick: function onChildviewAddFileClick() {
	    // Invoke the uploader
	    if ('function' === typeof this.uploader.invoke) {
	      this.uploader.invoke();
	    }
	  },

	  /**
	   * Concrete uploader implementations simply need to: this.trigger( 'added:files', newFiles )
	   *
	   * @param {Object[]} data An array of model objects to be added
	   */
	  onAddedFiles: function onAddedFiles(data) {
	    var fieldConfig = this.model.get('fieldConfig');
	    var fileLimit = +fieldConfig['file_limit']; // Unary plus to force to number

	    var newCollection, filteredModels; // Get a copy of the existing collection with the new files added

	    newCollection = this.collection.clone();
	    newCollection.add(data); // Enforce the file limit option if one is set

	    if (UNLIMITED_FILES === fileLimit) {
	      filteredModels = newCollection.models;
	    } else {
	      // Number of uploads is limited: keep the last N models, FIFO/queue style
	      filteredModels = newCollection.filter(function (model) {
	        return newCollection.indexOf(model) >= newCollection.length - fileLimit;
	      });
	    }

	    this.collection.reset(filteredModels);
	  },
	  createUploader: function createUploader() {
	    var fieldConfig = this.model.get('fieldConfig');
	    var targetUploader = fieldConfig['file_uploader'];
	    var Uploader;
	    jQuery.each(Uploaders, function (index, thisUploader) {
	      if (targetUploader === thisUploader.prototype.fileUploader) {
	        Uploader = thisUploader;
	        return false;
	      }
	    });

	    if (Uploader !== undefined) {
	      this.uploader = new Uploader({
	        // We provide regular DOM element for the button
	        browseButton: this.getRegion('form').getEl('.pods-dfv-list-add').get(),
	        uiRegion: this.getRegion('uiRegion'),
	        fieldConfig: fieldConfig
	      });
	      return this.uploader;
	    } else {
	      // @todo sprintf type with PodsI18n.__()
	      throw "Could not locate file uploader '".concat(targetUploader, "'");
	    }
	  }
	});

	var template$4 = "<%if ( fieldConfig.view_name === 'list' ) { %>\n\t<div class=\"pods-ui-list-autocomplete\"></div>\n<% } %>\n\n<div class=\"pods-pick-values\"></div>\n\n<% if ( fieldConfig.iframe_src != '' ) { %>\n\t<div class=\"pods-ui-add-new\"></div>\n<% } %>";

	/*global jQuery, _, Backbone, Marionette, wp, PodsI18n */

	/**
	 * A frame for displaying a modal popup with iframe content
	 *
	 * @augments wp.media.view.Frame
	 */
	var PodsDFVModal = wp.media.view.Modal.extend({
	  /**
	   * @param {Object} options
	   * @returns {wp.media.view.Modal} Returns itself to allow chaining
	   */
	  close: function close(options) {
	    var retVal = wp.media.view.Modal.prototype.close.apply(this, options); // Alert the listening control when we've been cancelled

	    if (options && options.escape) {
	      window.parent.jQuery(window.parent).trigger('dfv:modal:cancel');
	    }

	    return retVal;
	  }
	});

	/*global jQuery, _, Backbone, Marionette, wp, PodsI18n */
	/**
	 * A frame for displaying a modal popup with iframe content
	 *
	 * @augments wp.media.view.Frame
	 */

	var IframeFrame = wp.media.view.Frame.extend({
	  className: 'pods-modal-frame',
	  template: _.template('<div class="media-frame-title" /><div class="media-frame-iframe" />'),
	  regions: ['title', 'iframe'],
	  initialize: function initialize() {
	    wp.media.view.Frame.prototype.initialize.apply(this, arguments); // Ensure core UI is enabled.

	    this.$el.addClass('wp-core-ui');
	    this.initState();
	    this.initModal();
	    this.on('iframe:create:default', this.iframeContent, this);
	    this.iframe.mode('default');
	    this.on('title:create:default', this.createTitle, this);
	    this.title.mode('default');
	    this.on('title:render', function (view) {
	      view.$el.append('<span class="dashicons dashicons-arrow-down"></span>');
	    });
	  },
	  initState: function initState() {
	    var title = this.options.title || PodsI18n.__('Add New Record');

	    var src = this.options.src || '/';
	    this.states.add([new wp.media.controller.State({
	      id: 'default',
	      title: title,
	      src: src
	    })]);
	    this.options.state = 'default';
	  },
	  initModal: function initModal() {
	    this.modal = new PodsDFVModal({
	      controller: this
	    });
	    this.modal.content(this);
	  },
	  render: function render() {
	    // Activate the default state if no active state exists.
	    if (!this.state() && this.options.state) {
	      this.setState(this.options.state);
	    }
	    /**
	     * call 'render' directly on the parent class
	     */


	    return wp.media.view.Frame.prototype.render.apply(this, arguments);
	  },

	  /**
	   * @param {Object} content
	   * @this wp.media.controller.Region
	   */
	  iframeContent: function iframeContent(content) {
	    content.view = new wp.media.view.Iframe({
	      controller: this
	    });
	  },
	  createTitle: function createTitle(title) {
	    title.view = new wp.media.View({
	      controller: this,
	      tagName: 'h1'
	    });
	  }
	});

	/*global jQuery, _, Backbone, Marionette */

	/**
	 *
	 */
	var RelationshipModel = Backbone.Model.extend({
	  defaults: {
	    'id': 0,
	    'name': '',
	    'icon': '',
	    'link': '',
	    'edit_link': '',
	    'selected': false
	  },
	  toggleSelected: function toggleSelected() {
	    this.set('selected', !this.get('selected'));
	  }
	});
	/**
	 *
	 */

	var RelationshipCollection = Backbone.Collection.extend({
	  model: RelationshipModel,

	  /**
	   *
	   * @param { ?string[] } ids
	   */
	  setSelected: function setSelected(ids) {
	    this.map(function (thisModel) {
	      var selected = _.contains(ids, thisModel.get('id') + '');

	      thisModel.set('selected', selected);
	    });
	  },

	  /**
	   * Return a new collection containing just the selected items in this one
	   *
	   * @returns {*}
	   */
	  filterBySelected: function filterBySelected() {
	    // Get an array with only the selected items
	    var filtered = this.filter(function (itemModel) {
	      return itemModel.get('selected');
	    }); // this.filter is going to return an array, so create a collection out of it

	    return new RelationshipCollection(filtered);
	  },

	  /**
	   * Return a new collection containing just the unselected items in this one
	   *
	   * @returns {*}
	   */
	  filterByUnselected: function filterByUnselected() {
	    // Get an array with only the unselected items
	    var filtered = this.filter(function (itemModel) {
	      return !itemModel.get('selected');
	    }); // this.filter is going to return an array, so create a collection out of it

	    return new RelationshipCollection(filtered);
	  }
	});

	/*global jQuery, _, Backbone, Marionette */
	var PickFieldModel = Backbone.Model.extend({
	  defaults: {
	    'view_name': 'select',
	    'iframe_src': '',
	    'pick_format_type': 'single',
	    'pick_show_icon': false,
	    'pick_show_view_link': false,
	    'pick_show_edit_link': false
	  }
	});

	var template$5 = "<div class=\"pods-field pods-boolean\">\n\t<input name=\"<%- htmlAttr.name %>\" data-name-clean=\"<%- htmlAttr.name_clean %>\" data-label=\"<%- fieldConfig.label %>\" id=\"<%- htmlAttr.id %><%= ordinal %>\" class=\"pods-form-ui-field-type-pick pods-form-ui-field-name-<%- htmlAttr.name_clean %>\" type=\"radio\"\n\t\t\t<% if ( selected ) { %>\n\t\t\t\tchecked=\"CHECKED\"\n\t\t\t<% } %>\n\t\t\tvalue=\"<%- id %>\" tabindex=\"2\">\n\t<label class=\"pods-form-ui-label pods-form-ui-label-<%- htmlAttr.id %><%= ordinal %>\" for=\"<%- htmlAttr.id %><%= ordinal %>\">\n\t\t<%= name %>\n\t</label>\n</div>\n";

	/*global jQuery, _, Backbone, Marionette, wp */
	/**
	 *
	 */

	var RadioItem = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'li',
	  template: _.template(template$5),
	  templateContext: function templateContext() {
	    return {
	      ordinal: this.model.collection.indexOf(this.model) + 1 // One based indexing unlike checkboxes

	    };
	  },
	  modelChanged: function modelChanged() {
	    this.render();
	  }
	});
	/**
	 *
	 */

	var RadioView = PodsFieldListView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'ul',
	  className: 'pods-radio',
	  childView: RadioItem
	});

	var template$6 = "<div class=\"pods-field pods-boolean\">\n\t<input name=\"<%- htmlAttr.name %>[<%= ordinal %>]\"\n\t\t<%= selected ? 'checked=\"checked\"' : '' %>\n\t\tdata-name-clean=\"<%- htmlAttr.name_clean %>\" data-label=\"<%- fieldConfig.label %>\" id=\"<%- htmlAttr.id %><%= ordinal %>\" class=\"pods-form-ui-field-type-pick\" type=\"checkbox\" tabindex=\"2\" value=\"<%- id %>\">\n\t<label class=\"pods-form-ui-label\" for=\"<%- htmlAttr.id %><%= ordinal %>\">\n\t\t<%= name %>\n\t</label>\n</div>\n";

	/*global jQuery, _, Backbone, Marionette, wp */
	/**
	 *
	 */

	var CheckboxItem = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'li',
	  template: _.template(template$6),
	  className: 'pods-pick',
	  ui: {
	    checkbox: 'input.pods-form-ui-field-type-pick'
	  },
	  triggers: {
	    'click @ui.checkbox': 'toggle:selected'
	  },
	  modelEvents: {
	    'change': 'modelChanged'
	  },
	  templateContext: function templateContext() {
	    return {
	      ordinal: this.model.collection.indexOf(this.model)
	    };
	  },
	  modelChanged: function modelChanged() {
	    this.render();
	  }
	});
	/**
	 *
	 */

	var CheckboxView = PodsFieldListView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'ul',
	  className: 'pods-checkbox-view',
	  childView: CheckboxItem,
	  childViewEvents: {
	    'toggle:selected': 'onChildviewToggleSelected'
	  },

	  /**
	   *
	   */
	  onAttach: function onAttach() {
	    // Check initial selection limit status and enforce it if needed
	    if (!this.validateSelectionLimit()) {
	      this.selectionLimitOver();
	    }
	  },

	  /**
	   *
	   * @param childView
	   */
	  onChildviewToggleSelected: function onChildviewToggleSelected(childView) {
	    childView.model.toggleSelected(); // Dynamically enforce selection limit

	    if (this.validateSelectionLimit()) {
	      this.selectionLimitUnder();
	    } else {
	      this.selectionLimitOver();
	    }
	  },

	  /**
	   * @returns {boolean} true if unlimited selections are allowed or we're below the selection limit
	   */
	  validateSelectionLimit: function validateSelectionLimit() {
	    var fieldConfig = this.fieldModel.get('fieldConfig');
	    var limit, numSelected;
	    limit = +fieldConfig.pick_limit; // Unary plus will implicitly cast to number

	    numSelected = this.collection.filterBySelected().length;
	    return 0 === limit || numSelected < limit;
	  },

	  /**
	   *
	   */
	  selectionLimitOver: function selectionLimitOver() {
	    this.$el.find('input:checkbox:not(:checked)').prop('disabled', true);
	    this.trigger('selection:limit:over', this);
	  },

	  /**
	   *
	   */
	  selectionLimitUnder: function selectionLimitUnder() {
	    this.$el.find('input:checkbox').prop('disabled', false);
	    this.trigger('selection:limit:under', this);
	  }
	});

	/*global jQuery, _, Backbone, Marionette, select2, sprintf, wp, ajaxurl, PodsI18n */
	var SELECT2_UL_TARGET = 'ul.select2-selection__rendered';
	var SELECT2_SELECTED_TARGET = '.select2-selection__choice';
	/**
	 * option
	 *
	 * @extends Backbone.View
	 */

	var SelectItem = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'option',
	  template: false,
	  initialize: function initialize(options) {
	    this.$el.val(this.model.get('id'));
	    this.$el.html(this.model.get('name'));

	    if (this.model.get('selected')) {
	      this.$el.prop('selected', 'selected');
	    }
	  }
	});
	/**
	 * optgroup
	 *
	 * @extends Backbone.View
	 */

	var Optgroup = PodsFieldListView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'optgroup',
	  childView: SelectItem,
	  attributes: function attributes() {
	    return {
	      label: this.model.get('label')
	    };
	  }
	});
	/**
	 * select
	 *
	 * @extends Backbone.View
	 */

	var SelectView = Marionette.CollectionView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'select',
	  triggers: {
	    'change': {
	      event: 'change:selected',
	      stopPropagation: false
	    }
	  },
	  multiLastValidSelection: [],

	  /**
	   *
	   * @param newCollection
	   */
	  setCollection: function setCollection(newCollection) {
	    this.collection = newCollection;
	  },

	  /**
	   *
	   * @param options
	   */
	  initialize: function initialize(options) {
	    this.fieldModel = options.fieldModel;
	    this.fieldConfig = this.fieldModel.get('fieldConfig');
	  },

	  /**
	   * Set the proper child view (optgroups or no)
	   *
	   * @param item
	   * @returns {*}
	   */
	  childView: function childView(item) {
	    if (this.fieldConfig.optgroup) {
	      return Optgroup;
	    } else {
	      return SelectItem;
	    }
	  },

	  /**
	   * todo: We're bypassing the PodsFieldListView functionality, need to explicitly include it for now
	   *
	   * @param model
	   * @param index
	   * @returns {{fieldModel: *}}
	   */
	  childViewOptions: function childViewOptions(model, index) {
	    var returnOptions = {
	      fieldModel: this.fieldModel
	    };

	    if (this.fieldConfig.optgroup) {
	      returnOptions.collection = new RelationshipCollection(model.get('collection'));
	    }

	    return returnOptions;
	  },

	  /**
	   * todo: We're bypassing the PodsFieldListView functionality, need to explicitly include it for now
	   *
	   * @returns {{}}
	   */
	  serializeData: function serializeData() {
	    var fieldModel = this.options.fieldModel;
	    var data = this.model ? this.model.toJSON() : {};
	    data.htmlAttr = fieldModel.get('attributes');
	    data.fieldConfig = fieldModel.get('fieldConfig');
	    return data;
	  },

	  /**
	   *
	   */
	  attributes: function attributes() {
	    /**
	     * @param {string} htmlAttr.name
	     * @param {string} htmlAttr.class
	     * @param {string} htmlAttr.name_clean
	     * @param {string} htmlAttr.id
	     *
	     * @param {string} fieldConfig.pick_format_type 'single' or 'multi'
	     */
	    var fieldModel = this.options.fieldModel;
	    var htmlAttr = fieldModel.get('htmlAttr');
	    var fieldConfig = fieldModel.get('fieldConfig');
	    var name = htmlAttr.name;

	    if ('multi' === fieldConfig.pick_format_type) {
	      name = name + '[]';
	    }

	    return {
	      'name': name,
	      'class': htmlAttr["class"],
	      'data-name-clean': htmlAttr.name_clean,
	      'id': htmlAttr.id,
	      'tabindex': '2',
	      'multiple': 'multi' === fieldConfig.pick_format_type
	    };
	  },

	  /**
	   * Setup to be done once attached to the DOM.  Select2 has some setup needs.
	   *
	   * @var {RelationshipCollection} this.collection
	   */
	  onAttach: function onAttach() {
	    var view_name = this.fieldConfig.view_name;
	    var format_type = this.fieldConfig.pick_format_type; // Initialize select2 fields

	    if ('select2' === view_name) {
	      this.setupSelect2();
	    } // Check initial selection limit status for regular multiselect and enforce it if needed


	    if ('select' === view_name && 'multi' === format_type) {
	      // Store initial selection in case we need to revert back from an invalid state
	      this.multiLastValidSelection = this.$el.val();
	    } // If we're at the limit: disable all unselected items so no selections can be added


	    if (!this.validateSelectionLimit()) {
	      this.selectionLimitOver();
	    }
	  },

	  /**
	   * @var {RelationshipCollection} this.collection
	   */
	  onChangeSelected: function onChangeSelected() {
	    var limit = +this.fieldConfig.pick_limit; // Unary plus will implicitly cast to number

	    var view_name = this.fieldConfig.view_name;
	    var format_type = this.fieldConfig.pick_format_type; // Regular multiselect may need to reject the selection change

	    if ('select' === view_name && 'multi' === format_type) {
	      // Has the selection gone OVER the limit?  Can occur with consecutive item selection.
	      if (null !== this.$el.val() && 0 !== limit && limit < this.$el.val().length) {
	        // Revert to the last valid selection and punt on what they attempted
	        this.$el.val(this.multiLastValidSelection);
	        window.alert("".concat(PodsI18n.__('You can only select'), " ").concat(sprintf(PodsI18n._n('%s item', '%s items', limit), limit)));
	        this.trigger('childview:change:selected', this);
	        return;
	      }
	    } // Update the collection and last valid selection based on the new selections


	    this.collection.setSelected(this.$el.val());
	    this.multiLastValidSelection = this.$el.val(); // Dynamically enforce selection limits

	    if (this.validateSelectionLimit()) {
	      this.selectionLimitUnder();
	    } else {
	      this.selectionLimitOver();
	    }

	    this.trigger('childview:change:selected', this);
	  },
	  onBeforeDetach: function onBeforeDetach() {
	    this.$el.selectWoo('destroy');
	  },

	  /**
	   * @var {RelationshipCollection} this.collection
	   *
	   * @returns {boolean} true if unlimited selections are allowed or we're below the selection limit
	   */
	  validateSelectionLimit: function validateSelectionLimit() {
	    var limit, numSelected;
	    limit = +this.fieldConfig.pick_limit; // Unary plus will implicitly cast to number

	    numSelected = this.collection.filterBySelected().length;
	    return 0 === limit || numSelected < limit;
	  },

	  /**
	   *
	   */
	  selectionLimitOver: function selectionLimitOver() {
	    var viewName = this.fieldConfig.view_name;
	    var formatType = this.fieldConfig.pick_format_type;

	    if ('select' === viewName && 'multi' === formatType) {
	      // At the limit: disable all unselected items so no further selections can be added
	      this.$el.find('option:not(:selected)').prop('disabled', true);
	    }

	    this.trigger('childview:selection:limit:over', this);
	  },

	  /**
	   *
	   */
	  selectionLimitUnder: function selectionLimitUnder() {
	    var viewName = this.fieldConfig.view_name;
	    var formatType = this.fieldConfig.pick_format_type;

	    if ('select' === viewName && 'multi' === formatType) {
	      // Not at limit, make sure all items are enabled
	      this.$el.find('option').prop('disabled', false);
	    }

	    this.trigger('childview:selection:limit:under', this);
	  },

	  /**
	   * No filtering, by default.  Consuming views can override this function to provide custom filtering
	   * (e.g. List View needs to filter items already selected for its select from existing list)
	   *
	   * @param data
	   */
	  filterAjaxList: function filterAjaxList(data) {
	    var selectedItems = this.collection.filterBySelected();
	    var returnList = [];

	    _.each(data.results, function (element) {
	      element.text = element.name; // Select2 needs the "text" key but our model uses "name"
	      // Only keep choices that haven't been selected yet, we don't want selected items in the autocomplete portion

	      if (!selectedItems.get(element.id)) {
	        returnList.push(element);
	      }
	    });

	    return {
	      'results': returnList
	    };
	  },

	  /**
	   * Initialize Select2, setup drag-drop reordering
	   */
	  setupSelect2: function setupSelect2() {
	    var self = this;
	    var $select2 = this.$el;
	    var fieldConfig = this.options.fieldModel.get('fieldConfig');
	    var ajaxData = fieldConfig.ajax_data;
	    var select2Overrides = fieldConfig.select2_overrides;
	    var limit = fieldConfig.pick_limit;
	    var isSingle = 'single' === fieldConfig.pick_format_type;
	    var selectedCount = this.collection.filterBySelected().length;
	    var $ulContainer, select2Options, placeholder; // 'placeholder' for single select requires an empty option.  None of the examples set selected but
	    // it did not work for me in testing with just an empty option like the examples.
	    //
	    // https://select2.org/placeholders#single-select-placeholders
	    // https://github.com/select2/select2/issues/3553

	    if (0 === selectedCount && isSingle) {
	      $select2.prepend('<option selected="selected">');
	    } // ToDo:
	    // limitDisable is only used to control the List View's select2 component, it won't be set
	    // for regular autocomplete.  This function should be generic and not have to poke around with
	    // special properties like this for exception cases.


	    if (fieldConfig.limitDisable) {
	      placeholder = "".concat(PodsI18n.__('You can only select'), " ").concat(sprintf(PodsI18n._n('%s item', '%s items', limit), limit));
	    } else {
	      placeholder = "".concat(PodsI18n.__('Search'), " ").concat(fieldConfig.label, "...");
	    }

	    select2Options = {
	      maximumSelectionLength: isSingle ? undefined : limit,
	      // Should not be set for single select, messes up placeholder
	      placeholder: placeholder,
	      allowClear: isSingle,
	      disabled: fieldConfig.limitDisable,
	      tags: fieldConfig.pick_taggable,
	      escapeMarkup: function escapeMarkup(text) {
	        return text;
	      }
	    };

	    if (ajaxData.ajax) {
	      jQuery.extend(select2Options, {
	        minimumInputLength: ajaxData.minimum_input_length,
	        ajax: {
	          url: ajaxurl + '?pods_ajax=1',
	          type: 'POST',
	          dataType: 'json',
	          delay: ajaxData.delay,
	          data: function data(params) {
	            return {
	              _wpnonce: ajaxData._wpnonce,
	              action: 'pods_relationship',
	              method: 'select2',
	              pod: ajaxData.pod,
	              field: ajaxData.field,
	              uri: ajaxData.uri,
	              id: ajaxData.id,
	              query: params.term // ToDo: term{lang}

	            };
	          },
	          processResults: function processResults(data, params) {
	            return self.filterAjaxList(data, params);
	          }
	        }
	      });
	    } // Initialize select2


	    $select2.selectWoo(jQuery.extend(true, select2Options, select2Overrides)); // Get a reference to the ul container of the visual UI portion.  Can't do this until select2 is initialized

	    $ulContainer = $select2.parent().find(SELECT2_UL_TARGET); // Make the list drag-drop sortable

	    $ulContainer.sortable({
	      containment: 'parent'
	    }); // With select2 4.0, sortable is just reordering the UI elements.  Keep the underlying select/option list
	    // synced with the changes.  See: https://github.com/select2/select2/issues/3004

	    $ulContainer.on('sortstop', function () {
	      var $selected = $ulContainer.find(SELECT2_SELECTED_TARGET).get().reverse();
	      jQuery($selected).each(function () {
	        var id = jQuery(this).data('data').id;
	        var option = $select2.find('option[value="' + id + '"]')[0];
	        $select2.prepend(option);
	      });
	    });
	  }
	});

	var template$7 = "<input\n\t\t<% if ( 'single' === fieldConfig.pick_format_type ) { %>\n\t\t\tname=\"<%- htmlAttr.name %>\" id=\"<%- htmlAttr.id %>\"\n\t\t<% } else { %>\n\t\t\tname=\"<%- htmlAttr.name %>[<%= ordinal %>]\" id=\"<%- htmlAttr.id %><%= ordinal %>\"\n\t\t<% } %>\n\t\tdata-name-clean=\"<%- htmlAttr.name_clean %>\" type=\"hidden\" value=\"<%- id %>\">\n<ul class=\"pods-dfv-list-meta relationship-item\">\n\t<% if ( 1 != fieldConfig.pick_limit ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-handle\"><span><%- PodsI18n.__( 'Reorder' ) %></span></li>\n\t<% } %>\n\t<% if ( 1 == fieldConfig.pick_show_icon ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-icon\">\n\t\t\t<% if ( '' == icon ) { %>\n\t\t\t\t<% if ( /^dashicons/.test( fieldConfig.default_icon ) ) { %>\n\t\t\t\t\t<span class=\"pinkynail dashicons <%- fieldConfig.default_icon %>\"></span>\n\t\t\t\t<% } else { %>\n\t\t\t\t\t<img class=\"pinkynail\" src=\"<%- fieldConfig.default_icon %>\" alt=\"Icon\">\n\t\t\t\t<% } %>\n\t\t\t<% } else { %>\n\t\t\t\t<% if ( /^dashicons/.test( icon ) ) { %>\n\t\t\t\t\t<span class=\"pinkynail dashicons <%- icon %>\"></span>\n\t\t\t\t<% } else { %>\n\t\t\t\t\t<img class=\"pinkynail\" src=\"<%- icon %>\" alt=\"Icon\">\n\t\t\t\t<% } %>\n\t\t\t<% } %>\n\t\t</li>\n\t<% } %>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-name\">\n\t\t<%= name %>\n\t</li>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-remove\"><a href=\"#remove\" title=\"<%- PodsI18n.__( 'Deselect' ) %>\"><%- PodsI18n.__( 'Deselect' ) %></a></li>\n\t<% if ( 1 == fieldConfig.pick_show_view_link && '' != link ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-link\"><a href=\"<%- link %>\" title=\"<%- PodsI18n.__( 'View' ) %>\" target=\"_blank\"><%- PodsI18n.__( 'View' ) %></a></li>\n\t<% } %>\n\t<% if ( 1 == fieldConfig.pick_show_edit_link && '' != edit_link ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-edit\"><a href=\"<%- edit_link %>\" title=\"<%- PodsI18n.__( 'Edit' ) %>\" target=\"_blank\"><%- PodsI18n.__( 'Edit' ) %></a></li>\n\t<% } %>\n</ul>\n";

	/*global jQuery, _, Backbone, Marionette, wp */
	/**
	 *
	 */

	var ListItem = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'li',
	  className: 'pods-dfv-list-item pods-relationship',
	  template: _.template(template$7),
	  ui: {
	    removeButton: '.pods-dfv-list-remove a',
	    editButton: '.pods-dfv-list-edit a'
	  },
	  triggers: {
	    'click @ui.removeButton': 'remove:item:click',
	    'click @ui.editButton': 'edit:item:click'
	  },
	  templateContext: function templateContext() {
	    return {
	      ordinal: this.model.collection.indexOf(this.model)
	    };
	  }
	});
	/**
	 *  Represents the markup of the container as a whole
	 */

	var ListView = PodsFieldListView.extend({
	  // Cache the template function for the overall container
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'ul',
	  className: 'pods-dfv-list pods-relationship',
	  childView: ListItem,
	  // Pass these up the containment chain
	  childViewTriggers: {
	    'remove:item:click': 'childview:remove:item:click',
	    'edit:item:click': 'childview:edit:item:click'
	  },
	  filter: function filter(child, index, collection) {
	    return child.attributes.selected;
	  },
	  onAttach: function onAttach() {
	    var fieldConfig = this.options.fieldModel.get('fieldConfig'); // @todo
	    // http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

	    if (1 !== fieldConfig['pick_limit']) {
	      // init sortable
	      this.$el.sortable({
	        containment: 'parent',
	        axis: 'y',
	        scrollSensitivity: 40,
	        tolerance: 'pointer',
	        opacity: 0.6
	      });
	    }
	  }
	});

	var template$8 = "<a href=\"/wp-admin?pods_modal=1\" class=\"button pods-related-add-new pods-modal\" data-pod-id=\"<%- fieldConfig.pod_id %>\" data-field-id=\"<%- fieldConfig.id %>\" data-item-id=\"<%- fieldConfig.item_id %>\">\n\t<%- PodsI18n.__( 'Add New' ) %>\n</a>\n";

	/*global jQuery, _, Backbone, Marionette, wp */
	var DISABLED_CLASS = 'button-disabled';
	var AddNew = PodsFieldView.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  tagName: 'div',
	  className: 'podsform-dfv-list-relationship-container',
	  ui: {
	    addButton: 'a.pods-related-add-new'
	  },
	  template: _.template(template$8),
	  triggers: {
	    'click @ui.addButton': 'add:new:click'
	  },

	  /**
	   *
	   */
	  disable: function disable() {
	    var addButton = this.getUI('addButton');
	    addButton.addClass(DISABLED_CLASS); // Note: this just styles the link (button), click event enforces
	  },

	  /**
	   *
	   */
	  enable: function enable() {
	    var addButton = this.getUI('addButton');
	    addButton.removeClass(DISABLED_CLASS); // Note: this just styles the link (button), click event enforces
	  },

	  /**
	   *
	   */
	  onAddNewClick: function onAddNewClick() {
	    var addButton = this.getUI('addButton'); // Only pass the event up the view chain if we're enabled

	    if (!addButton.hasClass(DISABLED_CLASS)) {
	      this.trigger('childview:add:new', this);
	    }
	  }
	});

	/* eslint-disable camelcase */
	var views = {
	  'checkbox': CheckboxView,
	  'select': SelectView,
	  'select2': SelectView,
	  // SelectView handles select2 as well
	  'radio': RadioView,
	  'list': ListView
	};
	var modalIFrame;
	/**
	 * @extends Backbone.View
	 */

	var Pick = PodsDFVFieldLayout.extend({
	  childViewEventPrefix: false,
	  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
	  template: _.template(template$4),
	  regions: {
	    autocomplete: '.pods-ui-list-autocomplete',
	    list: '.pods-pick-values',
	    addNew: '.pods-ui-add-new'
	  },
	  childViewEvents: {
	    'childview:remove:item:click': 'onChildviewRemoveItemClick',
	    'childview:edit:item:click': 'onChildviewEditItemClick',
	    'childview:selection:limit:over': 'onChildviewSelectionLimitOver',
	    'childview:selection:limit:under': 'onChildviewSelectionLimitUnder',
	    'childview:change:selected': 'onChildviewChangeSelected',
	    'childview:add:new': 'onChildviewAddNew'
	  },

	  /**
	   *
	   */
	  onBeforeRender: function onBeforeRender() {
	    if (this.collection === undefined) {
	      this.collection = new RelationshipCollection(this.fieldItemData);
	    }
	  },

	  /**
	   *
	   */
	  onRender: function onRender() {
	    this.fieldConfig = new PickFieldModel(this.model.get('fieldConfig')); // Add New?
	    // noinspection EqualityComparisonWithCoercionJS (why would we reject "1"?)

	    if ('' !== this.fieldConfig.get('iframe_src') && 1 == this.fieldConfig.get('pick_allow_add_new')) {
	      this.showAddNew();
	    } // Autocomplete?


	    if ('list' === this.fieldConfig.get('view_name')) {
	      this.buildAutocomplete();
	    } // Build the list last, events fired by the list (like selection limit) may impact state in other views we manage


	    this.showList();
	  },

	  /**
	   * This is for the List View's autocomplete for select from existing
	   */
	  buildAutocomplete: function buildAutocomplete() {
	    var fieldConfig, model, collection, view;
	    var pickLimit = +this.fieldConfig.get('pick_limit'); // Unary plus forces cast to number

	    fieldConfig = {
	      view_name: 'select2',
	      pick_format_type: 'multi',
	      selectFromExisting: true,
	      ajax_data: this.fieldConfig.get('ajax_data'),
	      select2_overrides: this.fieldConfig.get('select2_overrides'),
	      label: this.fieldConfig.get('label'),
	      pick_limit: pickLimit
	    }; // The autocomplete portion of List View doesn't track selected items; disable if we're at the selection limit

	    if (this.collection.filterBySelected().length >= pickLimit && 0 !== pickLimit) {
	      fieldConfig.limitDisable = true;
	      this.onChildviewSelectionLimitOver();
	    } else {
	      this.onChildviewSelectionLimitUnder();
	    }

	    model = new PodsDFVFieldModel({
	      fieldConfig: fieldConfig
	    });
	    collection = this.collection.filterByUnselected();
	    view = new SelectView({
	      collection: collection,
	      fieldModel: model
	    }); // Provide a custom list filter for the autocomplete portion's AJAX data lists

	    view.filterAjaxList = this.filterAjaxList.bind(this); // Rebuild from scratch

	    this.showChildView('autocomplete', view);
	  },

	  /**
	   *
	   */
	  showList: function showList() {
	    var viewName, View, list; // Setup the view to be used

	    viewName = this.fieldConfig.get('view_name');

	    if (views[viewName] === undefined) {
	      throw new Error("Invalid view name \"".concat(viewName, "\""));
	    }

	    View = views[viewName];
	    list = new View({
	      collection: this.collection,
	      fieldModel: this.model
	    });
	    this.showChildView('list', list);
	  },

	  /**
	   *
	   */
	  showAddNew: function showAddNew() {
	    var addNew = new AddNew({
	      fieldModel: this.model
	    });
	    this.showChildView('addNew', addNew);
	  },

	  /**
	   * List Views need to filter items already selected from their select from existing list.  The AJAX function
	   * itself does not filter.
	   *
	   * @param data
	   */
	  filterAjaxList: function filterAjaxList(data) {
	    var selectedItems = this.collection.filterBySelected();
	    var returnList = []; // Loop through the items returned via ajax

	    _.each(data.results, function (element) {
	      element.text = element.name; // Select2 needs the "text" key but our model uses "name"
	      // Only keep choices that haven't been selected yet, we don't want selected items in the autocomplete portion

	      if (!selectedItems.get(element.id)) {
	        returnList.push(element);
	      }
	    }); // The collection may be partial in ajax mode, make sure we add any items we didn't yet have


	    this.collection.add(returnList);
	    this.getChildView('autocomplete').setCollection(this.collection.filterByUnselected());
	    return {
	      'results': returnList
	    };
	  },

	  /**
	   *
	   * @param childView
	   */
	  onChildviewSelectionLimitOver: function onChildviewSelectionLimitOver(childView) {
	    var addNew = this.getChildView('addNew');

	    if (addNew) {
	      addNew.disable();
	    }
	  },

	  /**
	   *
	   * @param childView
	   */
	  onChildviewSelectionLimitUnder: function onChildviewSelectionLimitUnder(childView) {
	    var addNew = this.getChildView('addNew');

	    if (addNew) {
	      addNew.enable();
	    }
	  },

	  /**
	   * "Remove" in list view just toggles an item's selected attribute
	   *
	   * @param childView
	   */
	  onChildviewRemoveItemClick: function onChildviewRemoveItemClick(childView) {
	    childView.model.toggleSelected();
	    this.getChildView('list').render(); // Keep autocomplete in sync, removed items should now be available choices

	    if ('list' === this.fieldConfig.get('view_name')) {
	      this.buildAutocomplete();
	    }
	  },

	  /**
	   * @param childView
	   */
	  onChildviewAddNew: function onChildviewAddNew(childView) {
	    var fieldConfig = this.model.get('fieldConfig');
	    modalIFrame = new IframeFrame({
	      title: fieldConfig.iframe_title_add,
	      src: fieldConfig.iframe_src
	    });
	    this.setModalListeners();
	    modalIFrame.modal.open();
	  },

	  /**
	   * @param childView
	   */
	  onChildviewEditItemClick: function onChildviewEditItemClick(childView) {
	    var fieldConfig = this.model.get('fieldConfig');
	    modalIFrame = new IframeFrame({
	      title: fieldConfig.iframe_title_edit,
	      src: childView.ui.editButton.attr('href')
	    });
	    this.setModalListeners();
	    modalIFrame.modal.open();
	  },

	  /**
	   *
	   * @param childView
	   */
	  onChildviewChangeSelected: function onChildviewChangeSelected(childView) {
	    // Refresh the autocomplete and List View lists on autocomplete selection
	    if (childView.fieldConfig.selectFromExisting) {
	      _.defer(this.buildAutocomplete.bind(this));

	      this.getChildView('list').render();
	    }
	  },
	  setModalListeners: function setModalListeners() {
	    jQuery(window).on('dfv:modal:update', this.modalSuccess.bind(this));
	    jQuery(window).on('dfv:modal:cancel', this.modalCancel.bind(this));
	  },
	  clearModalListeners: function clearModalListeners() {
	    jQuery(window).off('dfv:modal:update');
	    jQuery(window).off('dfv:modal:cancel');
	  },

	  /**
	   * @param event
	   * @param data
	   */
	  modalSuccess: function modalSuccess(event, data) {
	    var itemModel = this.collection.get(data.id);

	    if (itemModel) {
	      // Edit: update an existing model and force a re-render
	      itemModel.set(data);
	      this.getChildView('list').render();
	    } else {
	      // Add new: create a new model in the collection
	      this.collection.add(data);
	    }

	    this.clearModalListeners();
	    modalIFrame.modal.close({});
	  },

	  /**
	   *
	   */
	  modalCancel: function modalCancel() {
	    this.clearModalListeners();
	  }
	});

	/* eslint-disable react/prop-types */
	var PodsDFVBaseInput = function PodsDFVBaseInput(props) {
	  // Default implementation if onChange is omitted from props
	  function handleChange(event) {
	    props.setValue(event.target.value);
	  } // noinspection JSUnresolvedVariable


	  return React.createElement("input", {
	    type: props.type,
	    name: props.htmlAttr.name,
	    id: props.htmlAttr.id,
	    className: props.className,
	    "data-name-clean": props.htmlAttr.name_clean,
	    placeholder: props.fieldConfig.text_placeholder,
	    maxLength: props.fieldConfig.text_max_length,
	    value: props.value,
	    readOnly: !!props.fieldConfig.readonly,
	    onChange: props.onChange || handleChange,
	    onBlur: props.onBlur,
	    min: props.min,
	    max: props.max
	  });
	};

	var PodsDFVText = function PodsDFVText(props) {
	  return React.createElement(PodsDFVBaseInput, _extends({
	    type: "text"
	  }, props));
	};

	var PodsDFVPassword = function PodsDFVPassword(props) {
	  return React.createElement(PodsDFVBaseInput, _extends({
	    type: "password"
	  }, props));
	};

	var PodsDFVNumber = function PodsDFVNumber(props) {
	  // noinspection JSUnresolvedVariable
	  props.validation.addRules([{
	    rule: validationRules.max(props.value, props.fieldConfig.number_max),
	    condition: true
	  }, {
	    rule: validationRules.min(props.value, props.fieldConfig.number_min),
	    condition: true
	  }]); // noinspection JSUnresolvedVariable

	  return React.createElement(PodsDFVBaseInput, _extends({
	    type: '1' === props.fieldConfig.number_html5 ? 'number' : 'text',
	    min: props.fieldConfig.number_min,
	    max: props.fieldConfig.number_max
	  }, props));
	};

	var PodsDFVEmail = function PodsDFVEmail(props) {
	  props.validation.addRules([{
	    rule: validationRules.emailFormat(props.value),
	    condition: true
	  }]); // noinspection JSUnresolvedVariable

	  return React.createElement(PodsDFVBaseInput, _extends({
	    type: '1' === props.fieldConfig.email_html5 ? 'email' : 'text'
	  }, props));
	};

	/* eslint-disable react/prop-types */
	var PodsDFVTextArea = function PodsDFVTextArea(props) {
	  // Default implementation if onChange is omitted from props
	  function handleChange(event) {
	    props.setValue(event.target.value);
	  }

	  return React.createElement("textarea", {
	    value: props.value,
	    name: props.htmlAttr.name,
	    id: props.htmlAttr.id,
	    className: props.className,
	    "data-name-clean": props.htmlAttr.name_clean,
	    "data-label": props.fieldConfig.label,
	    onChange: props.onChange || handleChange,
	    onBlur: props.onBlur
	  }, props.value);
	};

	var handleSubmit = function handleSubmit(e, props) {
	  e.preventDefault();
	  var requestData = {
	    'id': props.podMeta.id,
	    'name': props.podMeta.name,
	    'old_name': props.podMeta.name,
	    '_wpnonce': props.nonce,
	    'fields': props.fields
	  };
	  /*
	  props.setSaveStatus( saveStatuses.SAVING );
	  fetch( `${ajaxurl}?pods_ajax=1&action=${AJAX_ACTION}`, {
	  	method: 'POST',
	  	headers: {
	  		'Accept': 'application/json',
	  		'Content-Type': 'application/json'
	  	},
	  	body: JSON.stringify( requestData )
	  } )
	  .then(
	  	( result ) => {
	  		console.log( result );
	  		props.setSaveStatus( saveStatuses.SAVE_SUCCESS );
	  	},
	  	( error ) => {
	  		console.log( error );
	  		props.setSaveStatus( saveStatuses.SAVE_ERROR );
	  	}
	  );
	   */
	};

	/* eslint-disable react/prop-types */
	/* WordPress dependencies */
	// noinspection JSUnresolvedVariable

	var __$1 = wp.i18n.__;
	var withSelect = wp.data.withSelect;
	var SaveStatusMessage = withSelect(function (select) {
	  return {
	    saveStatus: select(STORE_KEY_EDIT_POD).getSaveStatus()
	  };
	})(function (props) {
	  switch (props.saveStatus) {
	    case uiConstants.saveStatuses.SAVING:
	      return React.createElement("div", {
	        id: "message",
	        className: "notice notice-warning"
	      }, React.createElement("p", null, React.createElement("b", null, __$1('Saving Pod...', 'pods'))));

	    case uiConstants.saveStatuses.SAVE_SUCCESS:
	      return React.createElement("div", {
	        id: "message",
	        className: "updated fade"
	      }, React.createElement("p", null, React.createElement("strong", null, __$1('Success!', 'pods')), "\xA0"
	      /* &nbsp; */
	      , __$1('Pod saved successfully.', 'pods')));

	    case uiConstants.saveStatuses.SAVE_ERROR:
	      return React.createElement("div", {
	        id: "message",
	        className: "notice error"
	      }, React.createElement("p", null, React.createElement("b", null, __$1('Save Error', 'pods'))));

	    default:
	      return null;
	  }
	});

	var reactIs_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;
	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;
	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;
	              default:
	                return $$typeof;
	            }
	        }
	      case REACT_LAZY_TYPE:
	      case REACT_MEMO_TYPE:
	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}

	// AsyncMode is deprecated along with isAsyncMode
	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;

	var hasWarnedAboutDeprecatedIsAsyncMode = false;

	// AsyncMode should be deprecated
	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true;
	      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }
	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.typeOf = typeOf;
	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isValidElementType = isValidElementType;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	  })();
	}
	});

	unwrapExports(reactIs_development);
	var reactIs_development_1 = reactIs_development.typeOf;
	var reactIs_development_2 = reactIs_development.AsyncMode;
	var reactIs_development_3 = reactIs_development.ConcurrentMode;
	var reactIs_development_4 = reactIs_development.ContextConsumer;
	var reactIs_development_5 = reactIs_development.ContextProvider;
	var reactIs_development_6 = reactIs_development.Element;
	var reactIs_development_7 = reactIs_development.ForwardRef;
	var reactIs_development_8 = reactIs_development.Fragment;
	var reactIs_development_9 = reactIs_development.Lazy;
	var reactIs_development_10 = reactIs_development.Memo;
	var reactIs_development_11 = reactIs_development.Portal;
	var reactIs_development_12 = reactIs_development.Profiler;
	var reactIs_development_13 = reactIs_development.StrictMode;
	var reactIs_development_14 = reactIs_development.Suspense;
	var reactIs_development_15 = reactIs_development.isValidElementType;
	var reactIs_development_16 = reactIs_development.isAsyncMode;
	var reactIs_development_17 = reactIs_development.isConcurrentMode;
	var reactIs_development_18 = reactIs_development.isContextConsumer;
	var reactIs_development_19 = reactIs_development.isContextProvider;
	var reactIs_development_20 = reactIs_development.isElement;
	var reactIs_development_21 = reactIs_development.isForwardRef;
	var reactIs_development_22 = reactIs_development.isFragment;
	var reactIs_development_23 = reactIs_development.isLazy;
	var reactIs_development_24 = reactIs_development.isMemo;
	var reactIs_development_25 = reactIs_development.isPortal;
	var reactIs_development_26 = reactIs_development.isProfiler;
	var reactIs_development_27 = reactIs_development.isStrictMode;
	var reactIs_development_28 = reactIs_development.isSuspense;

	var reactIs = createCommonjsModule(function (module) {

	{
	  module.exports = reactIs_development;
	}
	});

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes;

	var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1 = function() {};

	{
	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}
	});

	var useState$2 = React.useState;
	/* WordPress dependencies */
	// noinspection JSUnresolvedVariable

	var __$2 = wp.i18n.__;
	var PodsDFVSluggable = function PodsDFVSluggable(props) {
	  var _useState = useState$2(false),
	      _useState2 = _slicedToArray(_useState, 2),
	      editing = _useState2[0],
	      setEditing = _useState2[1];

	  var _useState3 = useState$2(props.value),
	      _useState4 = _slicedToArray(_useState3, 2),
	      localValue = _useState4[0],
	      setLocalValue = _useState4[1];

	  var handleValueChange = function handleValueChange(newValue) {
	    setLocalValue(newValue);
	  };

	  var handleEditClick = function handleEditClick() {
	    setEditing(true);
	  };

	  var handleOkClick = function handleOkClick() {
	    setEditing(false);
	    props.updateValue(localValue);
	  };

	  var handleCancelClick = function handleCancelClick(e) {
	    e.preventDefault();
	    setEditing(false);
	    setLocalValue(props.value);
	  };

	  if (!editing) {
	    return React.createElement(NotEditing, {
	      value: props.value,
	      handleEditClick: handleEditClick
	    });
	  } else {
	    return React.createElement(Editing, {
	      value: localValue,
	      handleValueChange: handleValueChange,
	      handleOkClick: handleOkClick,
	      handleCancelClick: handleCancelClick
	    });
	  }
	};
	PodsDFVSluggable.propTypes = {
	  value: propTypes.string.isRequired,
	  updateValue: propTypes.func.isRequired
	};

	var NotEditing = function NotEditing(props) {
	  return React.createElement("span", null, React.createElement("em", {
	    onClick: props.handleEditClick,
	    style: {
	      cursor: 'pointer'
	    }
	  }, props.value), "\xA0"
	  /* &nbsp; */
	  , React.createElement("input", {
	    type: "button",
	    className: "edit-slug-button button",
	    value: __$2('Edit', 'pods'),
	    onClick: props.handleEditClick
	  }));
	};

	NotEditing.propTypes = {
	  value: propTypes.string.isRequired,
	  handleEditClick: propTypes.func.isRequired
	};

	var Editing = function Editing(props) {
	  var handleFocus = function handleFocus(e) {
	    return e.target.select();
	  };

	  return React.createElement("span", null, React.createElement("input", {
	    type: "text",
	    autoFocus: true,
	    id: "pods-form-ui-name",
	    name: "name",
	    className: "pods-form-ui-field pods-form-ui-field-type-text pods-form-ui-field-name-name",
	    value: props.value,
	    onChange: function onChange(e) {
	      return props.handleValueChange(e.target.value);
	    },
	    onFocus: handleFocus,
	    maxLength: "46",
	    size: "25"
	  }), "\xA0"
	  /* &nbsp; */
	  , React.createElement("input", {
	    type: "button",
	    className: "save-button button",
	    value: __$2('OK', 'pods'),
	    onClick: props.handleOkClick
	  }), "\xA0"
	  /* &nbsp; */
	  , React.createElement("a", {
	    className: "cancel",
	    onClick: props.handleCancelClick
	  }, __$2('Cancel', 'pods')));
	};

	Editing.propTypes = {
	  value: propTypes.string.isRequired,
	  handleValueChange: propTypes.func.isRequired,
	  handleOkClick: propTypes.func.isRequired,
	  handleCancelClick: propTypes.func.isRequired
	};

	// noinspection JSUnresolvedVariable

	var __$3 = wp.i18n.__;
	var _wp$data = wp.data,
	    withSelect$1 = _wp$data.withSelect,
	    withDispatch = _wp$data.withDispatch;
	var compose = wp.compose.compose;
	var EditPodName = compose([withSelect$1(function (select) {
	  return {
	    podName: select(STORE_KEY_EDIT_POD).getPodName()
	  };
	}), withDispatch(function (dispatch) {
	  return {
	    setPodName: dispatch(STORE_KEY_EDIT_POD).setPodName
	  };
	})])(function (props) {
	  return React.createElement("h2", null, __$3('Edit Pod: ', 'pods'), "\xA0"
	  /* &nbsp; */
	  , React.createElement(PodsDFVSluggable, {
	    value: props.podName,
	    updateValue: props.setPodName
	  }));
	});

	var PodsNavTab = function PodsNavTab(props) {
	  var getClassName = function getClassName(tabName) {
	    return classnames('nav-tab pods-nav-tab-link', {
	      'nav-tab-active': tabName === props.activeTab
	    });
	  };

	  var handleClick = function handleClick(e, tabName) {
	    e.preventDefault();
	    props.setActiveTab(tabName);
	  };

	  return React.createElement("h2", {
	    className: "nav-tab-wrapper pods-nav-tabs"
	  }, props.tabs.map(function (thisTab) {
	    return React.createElement("a", {
	      key: thisTab.name,
	      href: "#pods-".concat(thisTab.name),
	      className: getClassName(thisTab.name),
	      onClick: function onClick(e) {
	        return handleClick(e, thisTab.name);
	      }
	    }, thisTab.titleText);
	  }));
	};
	PodsNavTab.propTypes = {
	  tabs: propTypes.arrayOf(propTypes.shape({
	    name: propTypes.string,
	    titleText: propTypes.string
	  })).isRequired,
	  activeTab: propTypes.string.isRequired,
	  setActiveTab: propTypes.func.isRequired
	};

	__$styleInject(".pods-field--wrapper {\n  display: flex;\n  width: 100%;\n  background-color: #fff;\n  align-items: center;\n  transition: 200ms ease background-color;\n  border-bottom: 1px solid whitesmoke; }\n  .pods-field--wrapper:hover {\n    background-color: #f7f7f7; }\n\n.pods-field {\n  width: 25%;\n  padding: 10px 20px; }\n\n.pods-field--handle {\n  width: auto;\n  opacity: .2; }\n\n.pods-field--required {\n  color: red; }\n\n.pods-field--actions {\n  display: flex;\n  width: auto; }\n\n.pods-field--actions .dashicon {\n  padding: 10px;\n  color: #0073aa; }\n  .pods-field--actions .dashicon:hover {\n    cursor: pointer;\n    color: #00a0d2; }\n\n.pods-field--label {\n  padding-left: 0; }\n\n.pods-field--label:hover .pods-field--id,\n.pods-field--type:hover .pods-field--id {\n  opacity: 1; }\n\n.pods-field--id {\n  font-size: 13px;\n  color: #999;\n  display: inline;\n  opacity: 0;\n  transition: 200ms ease opacity; }\n\n.pods-field--label,\n.pods-field--name {\n  color: #0073aa; }\n  .pods-field--label:hover,\n  .pods-field--name:hover {\n    cursor: pointer;\n    color: #00a0d2; }\n\n.pods-field--label {\n  flex: 1; }\n\n.pods-field--name {\n  flex: 1; }\n\n.pods-field--wrapper-labels {\n  display: flex;\n  width: 100%;\n  background-color: #fff;\n  border-bottom: 2px solid whitesmoke; }\n\n.pods-field--wrapper-label-items {\n  width: 172px;\n  padding: 20px 20px 17px;\n  justify-content: flex-start; }\n  .pods-field--wrapper-label-items:first-child {\n    margin-left: 36px; }\n");

	var Dashicon = wp.components.Dashicon;
	var ManageFields = function ManageFields(props) {
	  return React.createElement("div", {
	    className: "pods-manage-fields"
	  }, React.createElement(FieldHeader, null), props.fields.map(function (thisField) {
	    return React.createElement(FieldRow, {
	      key: thisField.id,
	      id: thisField.id,
	      fieldLabel: thisField.label,
	      fieldName: thisField.name,
	      required: thisField.required,
	      type: thisField.type
	    });
	  }), React.createElement(FieldHeader, null));
	};
	ManageFields.propTypes = {
	  fields: propTypes.array.isRequired
	};
	/**
	 *
	 */

	var FieldHeader = function FieldHeader() {
	  return React.createElement("div", {
	    className: "pods-field--wrapper-labels"
	  }, React.createElement("div", {
	    className: "pods-field--wrapper-label-items"
	  }, "Label"), React.createElement("div", {
	    className: "pods-field--wrapper-label-items"
	  }, "Name"), React.createElement("div", {
	    className: "pods-field--wrapper-label-items"
	  }, "Field Type"));
	};
	/**
	 *
	 */

	var FieldRow = function FieldRow(props) {
	  var id = props.id,
	      fieldName = props.fieldName,
	      fieldLabel = props.fieldLabel,
	      required = props.required,
	      type = props.type;
	  return React.createElement("div", {
	    className: "pods-field--wrapper"
	  }, React.createElement("div", {
	    className: "pods-field pods-field--handle"
	  }, React.createElement(Dashicon, {
	    icon: "menu"
	  })), React.createElement("div", {
	    className: "pods-field pods-field--label"
	  }, fieldLabel, React.createElement("span", {
	    className: required && 'pods-field--required'
	  }, "*"), React.createElement("div", {
	    className: "pods-field--id"
	  }, "[id = ", id, "]")), React.createElement("div", {
	    className: "pods-field pods-field--name"
	  }, fieldName), React.createElement("div", {
	    className: "pods-field pods-field--type"
	  }, type, React.createElement("div", {
	    className: "pods-field--id"
	  }, "[type = [STILL NEED THIS]]")), React.createElement("div", {
	    className: "pods-field pods-field--actions"
	  }, React.createElement(Dashicon, {
	    icon: "edit"
	  }), React.createElement(Dashicon, {
	    icon: "admin-page"
	  }), React.createElement(Dashicon, {
	    icon: "trash"
	  })));
	};
	FieldRow.propTypes = {
	  id: propTypes.number.isRequired,
	  fieldName: propTypes.string.isRequired,
	  fieldLabel: propTypes.string.isRequired,
	  required: propTypes.string.isRequired,
	  type: propTypes.string.isRequired
	};

	var _wp$components = wp.components,
	    Tooltip = _wp$components.Tooltip,
	    Dashicon$1 = _wp$components.Dashicon;
	var HelpTooltip = function HelpTooltip(props) {
	  return React.createElement(Tooltip, {
	    text: props.helpText
	  }, React.createElement("span", null, React.createElement(Dashicon$1, {
	    icon: "editor-help"
	  })));
	};
	HelpTooltip.propTypes = {
	  helpText: propTypes.string.isRequired
	};

	var PodsFieldOption = function PodsFieldOption(props) {
	  var fieldType = props.fieldType,
	      name = props.name,
	      value = props.value,
	      label = props.label,
	      onChange = props.onChange,
	      helpText = props.helpText;

	  var toBool = function toBool(stringOrNumber) {
	    // Force any strings to numeric first
	    return !!+stringOrNumber;
	  };

	  return React.createElement("div", {
	    className: "pods-field-option"
	  }, React.createElement("label", {
	    className: "pods-form-ui-label pods-form-ui-label-".concat(name),
	    htmlFor: name
	  }, label, helpText && 'help' !== helpText && React.createElement(HelpTooltip, {
	    helpText: helpText
	  })), 'boolean' === fieldType ? React.createElement("input", {
	    type: "checkbox",
	    id: name,
	    name: name,
	    checked: toBool(value),
	    onChange: onChange
	  }) : React.createElement("input", {
	    type: "text",
	    id: name,
	    name: name,
	    value: value,
	    onChange: onChange
	  }));
	};
	PodsFieldOption.propTypes = {
	  fieldType: propTypes.string.isRequired,
	  name: propTypes.string.isRequired,
	  value: propTypes.any.isRequired,
	  label: propTypes.string.isRequired,
	  onChange: propTypes.func.isRequired,
	  helpText: propTypes.any
	};

	// noinspection JSUnresolvedVariable

	var _wp$i18n$1 = wp.i18n,
	    sprintf$2 = _wp$i18n$1.sprintf,
	    __$4 = _wp$i18n$1.__; // Pod dependencies

	var MISSING = __$4('[MISSING DEFAULT]', 'pods');
	/**
	 * option data format
	 * {
	 *     optionName: {
	 *         // default may get removed... merge it into value on the server side,
	 *         // it's a one-time thing
	 *         default: '',
	 *         depends-on: { optionName: dependentValue },
	 *         help: 'help',
	 *         label: 'XXX %s',
	 *         label_param: 'optionName',
	 *         param_default: 'Item',
	 *         type: 'text, boolean, number, pick, file'
	 *         value: ''
	 *     }
	 * }
	 */

	/**
	 * DynamicTabContent
	 */


	var DynamicTabContent = function DynamicTabContent(props) {
	  var tabOptions = props.tabOptions,
	      getOptionValue = props.getOptionValue,
	      setOptionValue = props.setOptionValue;

	  var getLabelValue = function getLabelValue(labelFormat, paramOption, paramDefault) {
	    if (!paramOption) {
	      return labelFormat;
	    }

	    var param = getOptionValue(paramOption) || paramDefault || MISSING;
	    return sprintf$2(labelFormat, param);
	  };

	  return tabOptions.map(function (option) {
	    return React.createElement(DependentFieldOption, {
	      key: option.name,
	      fieldType: option.type,
	      name: option.name,
	      label: getLabelValue(option.label, option.label_param, option.param_default),
	      value: option.value || '',
	      dependents: option['depends-on'],
	      helpText: option.help,
	      getOptionValue: getOptionValue,
	      setOptionValue: setOptionValue
	    });
	  });
	};
	DynamicTabContent.propTypes = {
	  tabOptions: propTypes.array.isRequired,
	  getOptionValue: propTypes.func.isRequired,
	  setOptionValue: propTypes.func.isRequired
	};
	/**
	 * DependentFieldOption
	 *
	 * Conditionally display a FieldOption (depends-on support)
	 */

	var DependentFieldOption = function DependentFieldOption(props) {
	  var fieldType = props.fieldType,
	      name = props.name,
	      label = props.label,
	      value = props.value,
	      dependents = props.dependents;
	  var getOptionValue = props.getOptionValue,
	      setOptionValue = props.setOptionValue;

	  var handleInputChange = function handleInputChange(e) {
	    var target = e.target;
	    var value = 'checkbox' === target.type ? target.checked : target.value;
	    setOptionValue(name, value);
	  };

	  if (!meetsDependencies(dependents, getOptionValue)) {
	    return null;
	  }

	  return React.createElement(PodsFieldOption, {
	    fieldType: fieldType,
	    name: name,
	    value: value,
	    label: label,
	    onChange: handleInputChange,
	    helpText: props.helpText
	  });
	};

	DependentFieldOption.propTypes = {
	  fieldType: propTypes.string.isRequired,
	  name: propTypes.string.isRequired,
	  value: propTypes.any.isRequired,
	  label: propTypes.string.isRequired,
	  dependents: propTypes.object,
	  helpText: propTypes.any,
	  getOptionValue: propTypes.func.isRequired,
	  setOptionValue: propTypes.func.isRequired
	};
	/**
	 *
	 * @param {object|object[]} dependencies Dictionary in the form optionName: requiredVal
	 * @param {function} getOptionValue Selector to lookup option values by name
	 *
	 * @return {boolean} Whether or not the specified dependencies are met
	 */

	var meetsDependencies = function meetsDependencies(dependencies, getOptionValue) {
	  var retVal = true;

	  if (dependencies && lodash.isObject(dependencies)) {
	    lodash.each(dependencies, function (dependentValue, dependentOptionName) {
	      // Loose comparison required, values may be 1/0 expecting true/false
	      // noinspection EqualityComparisonWithCoercionJS
	      if (getOptionValue(dependentOptionName) != dependentValue) {
	        retVal = false;
	        return false; // Early-exits the loop only, not the function
	      }
	    });
	  }

	  return retVal;
	};

	/**
	 * ActiveTabContent
	 *
	 * Display the content for the active tab, manage-fields is treated special
	 */

	var ActiveTabContent = function ActiveTabContent(props) {
	  var Component;

	  if ('manage-fields' === props.activeTab) {
	    //Component = ( <ManageFieldsTab fields={props.fields} /> );
	    Component = React.createElement(ManageFields, {
	      fields: props.fields
	    });
	  } else {
	    Component = React.createElement(DynamicTabContent, {
	      tabOptions: props.tabOptions,
	      getOptionValue: props.getOptionValue,
	      setOptionValue: props.setOptionValue
	    });
	  }

	  return React.createElement("div", {
	    id: "post-body-content",
	    className: "pods-nav-tab-group pods-manage-field"
	  }, Component);
	};
	ActiveTabContent.propTypes = {
	  fields: propTypes.array.isRequired,
	  activeTab: propTypes.string.isRequired,
	  tabOptions: propTypes.array.isRequired,
	  getOptionValue: propTypes.func.isRequired,
	  setOptionValue: propTypes.func.isRequired
	};

	/* eslint-disable react/prop-types */
	var __$5 = wp.i18n.__;
	var withSelect$2 = wp.data.withSelect;
	var Postbox = withSelect$2(function (select) {
	  return {
	    isSaving: select(STORE_KEY_EDIT_POD).isSaving()
	  };
	})(function (props) {
	  return React.createElement("div", {
	    id: "postbox-container-1",
	    className: "postbox-container pods_floatmenu"
	  }, React.createElement("div", {
	    id: "side-info-field",
	    className: "inner-sidebar"
	  }, React.createElement("div", {
	    id: "side-sortables"
	  }, React.createElement("div", {
	    id: "submitdiv",
	    className: "postbox pods-no-toggle"
	  }, React.createElement("h3", null, React.createElement("span", null, __$5('Manage', 'pods'), "\xA0"
	  /* &nbsp; */
	  , React.createElement("small", null, "(", React.createElement("a", {
	    href: "/wp-admin/admin.php?page=pods&action=manage"
	  }, __$5('« Back to Manage', 'pods')), ")"))), React.createElement("div", {
	    className: "inside"
	  }, React.createElement("div", {
	    className: "submitbox",
	    id: "submitpost"
	  }, React.createElement("div", {
	    id: "major-publishing-actions"
	  }, React.createElement("div", {
	    id: "delete-action"
	  }, React.createElement("a", {
	    href: "#not-implemented",
	    className: "submitdelete deletion pods-confirm"
	  }, __$5('Delete Pod', 'pods'))), React.createElement("div", {
	    id: "publishing-action"
	  }, React.createElement(Spinner, {
	    isSaving: props.isSaving
	  }), "\xA0"
	  /* &nbsp; */
	  , React.createElement("button", {
	    className: "button-primary",
	    type: "submit"
	  }, __$5('Save Pod', 'pods'))), React.createElement("div", {
	    className: "clear"
	  }))))), React.createElement("div", {
	    className: "pods-submittable-fields"
	  }, React.createElement("div", {
	    id: "side-sortables",
	    className: "meta-box-sortables"
	  })))));
	});

	var Spinner = function Spinner(props) {
	  if (props.isSaving) {
	    return React.createElement("img", {
	      src: "/wp-admin/images/wpspin_light.gif",
	      alt: ""
	    });
	  }

	  return null;
	};

	var _wp$data$1 = wp.data,
	    withSelect$3 = _wp$data$1.withSelect,
	    withDispatch$1 = _wp$data$1.withDispatch;
	var compose$1 = wp.compose.compose; // Pods dependencies
	var StoreSubscribe = compose$1([withSelect$3(function (select) {
	  var storeSelect = select(STORE_KEY_EDIT_POD);
	  return {
	    tabs: storeSelect.getTabs(),
	    activeTab: storeSelect.getActiveTab(),
	    tabOptions: storeSelect.getTabOptions(storeSelect.getActiveTab()),
	    getOptionValue: storeSelect.getOptionValue,
	    fields: storeSelect.getFields()
	  };
	}), withDispatch$1(function (dispatch) {
	  var storeDispatch = dispatch(STORE_KEY_EDIT_POD);
	  return {
	    setActiveTab: storeDispatch.setActiveTab,
	    setOptionValue: storeDispatch.setOptionValue
	  };
	})]);
	var PodsDFVEditPod = StoreSubscribe(function (props) {
	  //--! Todo: debugging only
	  window.select = wp.data.select('pods/edit-pod');
	  window.dispatch = wp.data.dispatch('pods/edit-pod'); //--! Todo: debugging only

	  return React.createElement("form", {
	    onSubmit: function onSubmit(e) {
	      return handleSubmit(e, props);
	    }
	  }, React.createElement("div", null, React.createElement(EditPodName, null), React.createElement(SaveStatusMessage, null), React.createElement(PodsNavTab, {
	    tabs: props.tabs,
	    activeTab: props.activeTab,
	    setActiveTab: props.setActiveTab
	  })), React.createElement("div", {
	    id: "poststuff"
	  }, React.createElement("div", {
	    id: "post-body",
	    className: "columns-2"
	  }, React.createElement(ActiveTabContent, {
	    fields: props.fields,
	    activeTab: props.activeTab,
	    tabOptions: props.tabOptions,
	    getOptionValue: props.getOptionValue,
	    setOptionValue: props.setOptionValue
	  }), React.createElement(Postbox, null))));
	});



	var models = /*#__PURE__*/Object.freeze({
		PodsDFVFieldModel: PodsDFVFieldModel,
		RelationshipModel: RelationshipModel,
		RelationshipCollection: RelationshipCollection,
		FileUploadModel: FileUploadModel,
		FileUploadCollection: FileUploadCollection
	});

	var SCRIPT_TARGET = 'script.pods-dfv-field-data'; // What scripts to look for

	var fieldClasses = {
	  'file': {
	    FieldClass: FileUpload,
	    renderer: mnRenderer
	  },
	  'avatar': {
	    FieldClass: FileUpload,
	    renderer: mnRenderer
	  },
	  'pick': {
	    FieldClass: Pick,
	    renderer: mnRenderer
	  },
	  'text': {
	    FieldClass: PodsDFVText,
	    renderer: reactRenderer
	  },
	  'password': {
	    FieldClass: PodsDFVPassword,
	    renderer: reactRenderer
	  },
	  'number': {
	    FieldClass: PodsDFVNumber,
	    renderer: reactRenderer
	  },
	  'email': {
	    FieldClass: PodsDFVEmail,
	    renderer: reactRenderer
	  },
	  'paragraph': {
	    FieldClass: PodsDFVTextArea,
	    renderer: reactRenderer
	  },
	  'edit-pod': {
	    FieldClass: PodsDFVEditPod,
	    renderer: reactDirectRenderer
	  }
	};
	var PodsDFV = {
	  fields: fieldClasses,
	  models: models,
	  fieldInstances: {},

	  /**
	   *
	   */
	  init: function init() {
	    // Find all in-line data scripts
	    jQuery$1(SCRIPT_TARGET).each(function () {
	      var parent = jQuery$1(this).parent().get(0);
	      var data = jQuery$1.parseJSON(jQuery$1(this).html()); // Kludge to disable the "Add New" button if we're inside a media modal.  This should
	      // eventually be ironed out so we can use Add New from this context (see #4864)

	      if (jQuery$1(this).parents('.media-modal-content').length) {
	        // eslint-disable-next-line
	        data.fieldConfig.pick_allow_add_new = 0;
	      } // Ignore anything that doesn't have the field type set


	      if (data.fieldType !== undefined) {
	        var field = fieldClasses[data.fieldType];

	        if (field !== undefined) {
	          //self.fieldInstances[ data.htmlAttr.id ] = field.renderer( field.fieldClass, data );
	          field.renderer(field.FieldClass, parent, data);
	        }
	      }

	      jQuery$1(this).remove();
	    });
	  },
	  isModalWindow: function isModalWindow() {
	    return -1 !== location.search.indexOf('pods_modal=');
	  },
	  isGutenbergEditorLoaded: function isGutenbergEditorLoaded() {
	    return wp.data !== undefined && wp.data.select('core/editor') !== undefined;
	  }
	};
	/**
	 * Kick everything off on DOMContentLoaded
	 */

	document.addEventListener('DOMContentLoaded', function () {
	  PodsDFV.init(); // Load the Gutenberg modal listener if we're inside a Pods modal with Gutenberg active

	  if (PodsDFV.isModalWindow() && PodsDFV.isGutenbergEditorLoaded()) {
	    PodsGbModalListener.init();
	  }
	});

	return PodsDFV;

}(jQuery, React, ReactDOM, lodash));
//# sourceMappingURL=pods-dfv.min.js.map
