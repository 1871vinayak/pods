/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ui/js/pods-dfv/src/pods-dfv.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/brackets2dots/index.js":
/*!*********************************************!*\
  !*** ./node_modules/brackets2dots/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * exports.
 */

module.exports = brackets2dots;

/*!
 * regexp patterns.
 */

var REPLACE_BRACKETS = /\[([^\[\]]+)\]/g;
var LFT_RT_TRIM_DOTS = /^[.]*|[.]*$/g;

/**
 * Convert string with bracket notation to dot property notation.
 *
 * ### Examples:
 *
 *      brackets2dots('group[0].section.a.seat[3]')
 *      //=> 'group.0.section.a.seat.3'
 *
 *      brackets2dots('[0].section.a.seat[3]')
 *      //=> '0.section.a.seat.3'
 *
 *      brackets2dots('people[*].age')
 *      //=> 'people.*.age'
 *
 * @param  {String} string
 * original string
 *
 * @return {String}
 * dot/bracket-notation string
 */

function brackets2dots(string) {
  return ({}).toString.call(string) == '[object String]'
       ? string.replace(REPLACE_BRACKETS, '.$1').replace(LFT_RT_TRIM_DOTS, '')
       : ''
}


/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.scss":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.scss ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".opacity-ghost {\n  transition: all .8s ease;\n  opacity: 0.4;\n  box-shadow: 3px 3px 10px 3px rgba(0, 0, 0, 0.3);\n  cursor: ns-resize; }\n\n.pods-field--wrapper {\n  display: flex;\n  width: 100%;\n  background-color: #fff;\n  align-items: center;\n  transition: 200ms ease background-color;\n  border-bottom: 1px solid whitesmoke; }\n  .pods-field--wrapper:hover {\n    background-color: whitesmoke; }\n\n.pods-field {\n  width: 25%;\n  padding: 5px 20px; }\n\n.pods-field--handle {\n  width: auto;\n  opacity: .2;\n  padding-left: 13px;\n  padding-right: 13px;\n  cursor: move; }\n\n.pods-field--required {\n  color: red; }\n\n.pods-field--actions {\n  display: flex;\n  width: auto; }\n\n.pods-field--actions i {\n  padding: 10px;\n  color: #0073aa; }\n  .pods-field--actions i:hover {\n    cursor: pointer;\n    color: #00a0d2; }\n\n.pods-field--label {\n  padding-left: 0; }\n\n.pods-field--label:hover .pods-field--id,\n.pods-field--type:hover .pods-field--id {\n  opacity: 1; }\n\n.pods-field--id {\n  font-size: 13px;\n  color: #999;\n  display: inline;\n  opacity: 0;\n  transition: 200ms ease opacity; }\n\n.pods-field--label,\n.pods-field--name {\n  color: #0073aa; }\n  .pods-field--label:hover,\n  .pods-field--name:hover {\n    cursor: pointer;\n    color: #00a0d2; }\n\n.pods-field--label,\n.pods-field--type {\n  width: 30%; }\n\n.pods-field--wrapper-labels {\n  display: flex;\n  width: 100%;\n  background-color: #fff;\n  border-bottom: 2px solid whitesmoke;\n  margin-bottom: 10px; }\n\n.pods-field--wrapper-label-items {\n  width: 172px;\n  padding: 20px 20px 17px;\n  justify-content: flex-start; }\n  .pods-field--wrapper-label-items:first-child {\n    margin-left: 36px; }\n\n.pods-field-group-wrapper {\n  background-color: #636363;\n  background-color: #fff;\n  border-left: 5px solid #94bf3a;\n  margin-bottom: 10px; }\n  .pods-field-group-wrapper > .pods-field--wrapper {\n    background-color: whitesmoke; }\n    .pods-field-group-wrapper > .pods-field--wrapper:hover {\n      background-color: #e4e4e4; }\n  .pods-field-group-wrapper:last-child {\n    border-bottom: 0; }\n\n.pods-field-group--title {\n  padding: 10px;\n  display: flex;\n  color: white;\n  color: #333; }\n\n.pods-field-group--handle {\n  padding-right: 13px;\n  cursor: move; }\n\n.pods-field-group--manage {\n  margin-left: auto; }\n\n.pods-button-group--container {\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  margin-top: 10px; }\n\n.pods-field-group--toggle {\n  cursor: pointer; }\n\n.pods-button-group--item {\n  padding: 10px 20px;\n  color: #333;\n  text-decoration: none;\n  transition: 300ms ease background-color; }\n  .pods-button-group--item:hover {\n    background-color: #e0e0e0; }\n  .pods-button-group--item:last-child {\n    background-color: #94bf3a;\n    color: white; }\n    .pods-button-group--item:last-child:hover {\n      background-color: #7c9e33; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/manage-fields.scss":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/manage-fields.scss ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".pods-field--wrapper {\n  display: flex;\n  width: 100%;\n  background-color: #fff;\n  align-items: center;\n  transition: 200ms ease background-color;\n  border-bottom: 1px solid whitesmoke; }\n  .pods-field--wrapper:hover {\n    background-color: #f7f7f7; }\n\n.pods-manage-fields.no-fields {\n  font-weight: bold;\n  margin: 1em; }\n\ndiv.pods-manage-f\n.pods-field {\n  width: 25%;\n  padding: 10px 20px; }\n\n.pods-field--handle {\n  width: auto;\n  opacity: .2; }\n\n.pods-field--required {\n  color: red; }\n\n.pods-field--actions {\n  display: flex;\n  width: auto; }\n\n.pods-field--actions .dashicon {\n  padding: 10px;\n  color: #0073aa; }\n  .pods-field--actions .dashicon:hover {\n    cursor: pointer;\n    color: #00a0d2; }\n\n.pods-field--label {\n  padding-left: 0; }\n\n.pods-field--label:hover .pods-field--id,\n.pods-field--type:hover .pods-field--id {\n  opacity: 1; }\n\n.pods-field--id {\n  font-size: 13px;\n  color: #999;\n  display: inline;\n  opacity: 0;\n  transition: 200ms ease opacity; }\n\n.pods-field--label,\n.pods-field--name {\n  color: #0073aa; }\n  .pods-field--label:hover,\n  .pods-field--name:hover {\n    cursor: pointer;\n    color: #00a0d2; }\n\n.pods-field--label {\n  flex: 1; }\n\n.pods-field--name {\n  flex: 1; }\n\n.pods-field--wrapper-labels {\n  display: flex;\n  width: 100%;\n  background-color: #fff;\n  border-bottom: 2px solid whitesmoke; }\n\n.pods-field--wrapper-label-items {\n  width: 172px;\n  padding: 20px 20px 17px;\n  justify-content: flex-start; }\n  .pods-field--wrapper-label-items:first-child {\n    margin-left: 36px; }\n", ""]);



/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return '@media ' + item[2] + '{' + content + '}';
      } else {
        return content;
      }
    }).join('');
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "./node_modules/curry2/index.js":
/*!**************************************!*\
  !*** ./node_modules/curry2/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * imports.
 */

var bind = Function.prototype.bind || __webpack_require__(/*! fast-bind */ "./node_modules/fast-bind/bind-loop.js")

/*!
 * exports.
 */

module.exports = curry2

/**
 * Curry a binary function.
 *
 * @param {Function} fn
 * Binary function to curry.
 *
 * @param {Object} [self]
 * Function `this` context.
 *
 * @return {Function|*}
 * If partially applied, return unary function, otherwise, return result of full application.
 */

function curry2 (fn, self) {
  var out = function () {
    if (arguments.length === 0) return out

    return arguments.length > 1
      ? fn.apply(self, arguments)
      : bind.call(fn, self, arguments[0])
  }

  out.uncurry = function uncurry () {
    return fn
  }

  return out
}


/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/debug/src/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/debug/src/debug.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ "./node_modules/dotsplit.js/index.js":
/*!*******************************************!*\
  !*** ./node_modules/dotsplit.js/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = Object.prototype.toString

/**
 * Transform dot-delimited strings to array of strings.
 *
 * @param  {String} string
 * Dot-delimited string.
 *
 * @return {Array}
 * Array of strings.
 */

function dotsplit (string) {
  var idx = -1
  var str = compact(normalize(string).split('.'))
  var end = str.length
  var out = []

  while (++idx < end) {
    out.push(todots(str[idx]))
  }

  return out
}

/**
 * Replace escapes with a placeholder.
 *
 * @param  {String} string
 * Dot-delimited string.
 *
 * @return {String}
 * Dot-delimited string with placeholders in place of escapes.
 */

function normalize (string) {
  return (toString.call(string) === '[object String]' ? string : '').replace(/\\\./g, '\uffff')
}

/**
 * Drop empty values from array.
 *
 * @param  {Array} array
 * Array of strings.
 *
 * @return {Array}
 * Array of strings (empty values dropped).
 */

function compact (arr) {
  var idx = -1
  var end = arr.length
  var out = []

  while (++idx < end) {
    if (arr[idx]) out.push(arr[idx])
  }

  return out
}

/**
 * Change placeholder to dots.
 *
 * @param  {String} string
 * Dot-delimited string with placeholders.
 *
 * @return {String}
 * Dot-delimited string without placeholders.
 */

function todots (string) {
  return string.replace(/\uffff/g, '.')
}

/*!
 * exports.
 */

module.exports = dotsplit


/***/ }),

/***/ "./node_modules/fast-bind/bind-loop.js":
/*!*********************************************!*\
  !*** ./node_modules/fast-bind/bind-loop.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function(boundThis) {
  var f = this
    , ret

  if (arguments.length < 2)
    ret = function() {
      if (this instanceof ret) {
        var ret_ = f.apply(this, arguments)
        return Object(ret_) === ret_
          ? ret_
          : this
      }
      else
        return f.apply(boundThis, arguments)
    }
  else {
    var boundArgs = new Array(arguments.length - 1)
    for (var i = 1; i < arguments.length; i++)
      boundArgs[i - 1] = arguments[i]

    ret = function() {
      var boundLen = boundArgs.length
        , args = new Array(boundLen + arguments.length)
        , i
      for (i = 0; i < boundLen; i++)
        args[i] = boundArgs[i]
      for (i = 0; i < arguments.length; i++)
        args[boundLen + i] = arguments[i]

      if (this instanceof ret) {
        var ret_ = f.apply(this, args)
        return Object(ret_) === ret_
          ? ret_
          : this
      }
      else
        return f.apply(boundThis, args)
    }
  }

  ret.prototype = f.prototype
  return ret
}


/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/Engine.js":
/*!*****************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/Engine.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _validation = __webpack_require__(/*! ./validation */ "./node_modules/json-rules-engine-simplified/lib/validation.js");

var _applicableActions = __webpack_require__(/*! ./applicableActions */ "./node_modules/json-rules-engine-simplified/lib/applicableActions.js");

var _applicableActions2 = _interopRequireDefault(_applicableActions);

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/json-rules-engine-simplified/lib/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var validate = function validate(schema) {
  var isSchemaDefined = schema !== undefined && schema !== null;
  if ((0, _utils.isDevelopment)() && isSchemaDefined) {
    if (!(0, _utils.isObject)(schema)) {
      (0, _utils.toError)("Expected valid schema object, but got - " + schema);
    }
    return function (rule) {
      (0, _validation.validatePredicates)([rule.conditions], schema);
      (0, _validation.validateConditionFields)([rule.conditions], schema);
    };
  } else {
    return function () {};
  }
};

var Engine = function Engine(rules, schema) {
  var _this = this;

  _classCallCheck(this, Engine);

  this.addRule = function (rule) {
    _this.validate(rule);
    _this.rules.push(rule);
  };

  this.run = function (formData) {
    return Promise.resolve((0, _applicableActions2.default)(_this.rules, formData));
  };

  this.rules = [];
  this.validate = validate(schema);

  if (rules) {
    (0, _utils.toArray)(rules).forEach(function (rule) {
      return _this.addRule(rule);
    });
  }
};

exports.default = Engine;

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/applicableActions.js":
/*!****************************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/applicableActions.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applicableActions;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/json-rules-engine-simplified/lib/utils.js");

var _conditionsMeet = __webpack_require__(/*! ./conditionsMeet */ "./node_modules/json-rules-engine-simplified/lib/conditionsMeet.js");

var _conditionsMeet2 = _interopRequireDefault(_conditionsMeet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function applicableActions(rules, formData) {
  return (0, _utils.flatMap)(rules, function (_ref) {
    var conditions = _ref.conditions,
        event = _ref.event;

    if ((0, _conditionsMeet2.default)(conditions, formData)) {
      return (0, _utils.toArray)(event);
    } else {
      return [];
    }
  });
}

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/checkField.js":
/*!*********************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/checkField.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = checkField;

var _predicate = __webpack_require__(/*! predicate */ "./node_modules/predicate/index.js");

var _predicate2 = _interopRequireDefault(_predicate);

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/json-rules-engine-simplified/lib/utils.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/json-rules-engine-simplified/lib/constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var doCheckField = function doCheckField(fieldVal, rule) {
  if ((0, _utils.isObject)(rule)) {
    return Object.keys(rule).every(function (p) {
      var subRule = rule[p];
      if (p === _constants.OR || p === _constants.AND) {
        if (Array.isArray(subRule)) {
          if (p === _constants.OR) {
            return subRule.some(function (rule) {
              return doCheckField(fieldVal, rule);
            });
          } else {
            return subRule.every(function (rule) {
              return doCheckField(fieldVal, rule);
            });
          }
        } else {
          return false;
        }
      } else if (p === _constants.NOT) {
        return !doCheckField(fieldVal, subRule);
      } else if (_predicate2.default[p]) {
        return _predicate2.default[p](fieldVal, subRule);
      } else {
        return false;
      }
    });
  } else {
    return _predicate2.default[rule](fieldVal);
  }
};

function checkField(fieldVal, rule) {
  return doCheckField(fieldVal, rule);
}

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/conditionsMeet.js":
/*!*************************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/conditionsMeet.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toRelCondition = toRelCondition;
exports.default = conditionsMeet;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/json-rules-engine-simplified/lib/utils.js");

var _checkField = __webpack_require__(/*! ./checkField */ "./node_modules/json-rules-engine-simplified/lib/checkField.js");

var _checkField2 = _interopRequireDefault(_checkField);

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/json-rules-engine-simplified/lib/constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toRelCondition(refCondition, formData) {
  if (Array.isArray(refCondition)) {
    return refCondition.map(function (cond) {
      return toRelCondition(cond, formData);
    });
  } else if ((0, _utils.isObject)(refCondition)) {
    return Object.keys(refCondition).reduce(function (agg, field) {
      agg[field] = toRelCondition(refCondition[field], formData);
      return agg;
    }, {});
  } else if (typeof refCondition === "string" && refCondition.startsWith("$")) {
    return (0, _utils.selectRef)(refCondition.substr(1), formData);
  } else {
    return refCondition;
  }
}

function conditionsMeet(condition, formData) {
  if (!(0, _utils.isObject)(condition) || !(0, _utils.isObject)(formData)) {
    (0, _utils.toError)("Rule " + JSON.stringify(condition) + " with " + formData + " can't be processed");
    return false;
  }
  return Object.keys(condition).every(function (ref) {
    var refCondition = condition[ref];
    if (ref === _constants.OR) {
      return refCondition.some(function (rule) {
        return conditionsMeet(rule, formData);
      });
    } else if (ref === _constants.AND) {
      return refCondition.every(function (rule) {
        return conditionsMeet(rule, formData);
      });
    } else if (ref === _constants.NOT) {
      return !conditionsMeet(refCondition, formData);
    } else {
      var refVal = (0, _utils.selectRef)(ref, formData);
      if (Array.isArray(refVal)) {
        var condMeatOnce = refVal.some(function (val) {
          return (0, _utils.isObject)(val) ? conditionsMeet(refCondition, val) : false;
        });
        // It's either true for an element in an array or for the whole array
        return condMeatOnce || (0, _checkField2.default)(refVal, toRelCondition(refCondition, formData));
      } else {
        return (0, _checkField2.default)(refVal, toRelCondition(refCondition, formData));
      }
    }
  });
}

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/constants.js":
/*!********************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/constants.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var OR = exports.OR = "or";
var AND = exports.AND = "and";
var NOT = exports.NOT = "not";

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Engine = __webpack_require__(/*! ./Engine */ "./node_modules/json-rules-engine-simplified/lib/Engine.js");

var _Engine2 = _interopRequireDefault(_Engine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Engine2.default;

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/utils.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flatMap = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.normRef = normRef;
exports.selectRef = selectRef;
exports.isObject = isObject;
exports.isDevelopment = isDevelopment;
exports.toArray = toArray;
exports.toError = toError;
exports.isRefArray = isRefArray;
exports.extractRefSchema = extractRefSchema;

var _selectn = __webpack_require__(/*! selectn */ "./node_modules/selectn/index.js");

var _selectn2 = _interopRequireDefault(_selectn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function normRef(ref) {
  return ref.replace(/\$/g, ".");
}

function selectRef(field, formData) {
  var ref = normRef(field);
  return (0, _selectn2.default)(ref, formData);
}

function isObject(obj) {
  return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj !== null;
}

function isDevelopment() {
  return "development" !== "production";
}

function toArray(event) {
  if (Array.isArray(event)) {
    return event;
  } else {
    return [event];
  }
}

function toError(message) {
  if (isDevelopment()) {
    throw new ReferenceError(message);
  } else {
    console.error(message);
  }
}

function isRefArray(field, schema) {
  return schema.properties[field] && schema.properties[field].type === "array" && schema.properties[field].items && schema.properties[field].items["$ref"];
}

function fetchSchema(ref, schema) {
  if (ref.startsWith("#/")) {
    return ref.substr(2).split("/").reduce(function (schema, field) {
      return schema[field];
    }, schema);
  } else {
    toError("Only local references supported at this point use json-schema-deref");
    return undefined;
  }
}

function extractRefSchema(field, schema) {
  var properties = schema.properties;

  if (!properties || !properties[field]) {
    toError(field + " not defined in properties");
    return undefined;
  } else if (properties[field].type === "array") {
    if (isRefArray(field, schema)) {
      return fetchSchema(properties[field].items["$ref"], schema);
    } else {
      return properties[field].items;
    }
  } else if (properties[field] && properties[field]["$ref"]) {
    return fetchSchema(properties[field]["$ref"], schema);
  } else if (properties[field] && properties[field].type === "object") {
    return properties[field];
  } else {
    toError(field + " has no $ref field ref schema extraction is impossible");
    return undefined;
  }
}

var concat = function concat(x, y) {
  return x.concat(y);
};
var flatMap = exports.flatMap = function flatMap(xs, f) {
  return xs.map(f).reduce(concat, []);
};

/***/ }),

/***/ "./node_modules/json-rules-engine-simplified/lib/validation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/json-rules-engine-simplified/lib/validation.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.predicatesFromRule = predicatesFromRule;
exports.predicatesFromCondition = predicatesFromCondition;
exports.listAllPredicates = listAllPredicates;
exports.listInvalidPredicates = listInvalidPredicates;
exports.validatePredicates = validatePredicates;
exports.fieldsFromPredicates = fieldsFromPredicates;
exports.fieldsFromCondition = fieldsFromCondition;
exports.listAllFields = listAllFields;
exports.listInvalidFields = listInvalidFields;
exports.validateConditionFields = validateConditionFields;

var _predicate = __webpack_require__(/*! predicate */ "./node_modules/predicate/index.js");

var _predicate2 = _interopRequireDefault(_predicate);

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/json-rules-engine-simplified/lib/utils.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/json-rules-engine-simplified/lib/constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var UNSUPPORTED_PREDICATES = ["and", "or", "ternary", "every", "some", "curry", "partial", "complement", "mod"];

function predicatesFromRule(rule, schema) {
  if ((0, _utils.isObject)(rule)) {
    return (0, _utils.flatMap)(Object.keys(rule), function (p) {
      var comparable = rule[p];
      if ((0, _utils.isObject)(comparable) || p === _constants.NOT) {
        if (p === _constants.OR || p === _constants.AND) {
          if (Array.isArray(comparable)) {
            return (0, _utils.flatMap)(comparable, function (condition) {
              return predicatesFromRule(condition, schema);
            });
          } else {
            (0, _utils.toError)("\"" + p + "\" must be an array");
            return [];
          }
        } else {
          var predicates = predicatesFromRule(comparable, schema);
          predicates.push(p);
          return predicates;
        }
      } else {
        return predicatesFromRule(p, schema);
      }
    });
  } else {
    return [rule];
  }
}

function predicatesFromCondition(condition, schema) {
  return (0, _utils.flatMap)(Object.keys(condition), function (ref) {
    var refVal = condition[ref];
    ref = (0, _utils.normRef)(ref);
    if (ref === _constants.OR || ref === _constants.AND) {
      if (Array.isArray(refVal)) {
        return (0, _utils.flatMap)(refVal, function (c) {
          return predicatesFromCondition(c, schema);
        });
      } else {
        (0, _utils.toError)(ref + " with " + JSON.stringify(refVal) + " must be an Array");
        return [];
      }
    } else if (ref === _constants.NOT) {
      return predicatesFromCondition(refVal, schema);
    } else if (ref.indexOf(".") !== -1) {
      var separator = ref.indexOf(".");
      var schemaField = ref.substr(0, separator);
      var subSchema = (0, _utils.extractRefSchema)(schemaField, schema);

      if (subSchema) {
        var subSchemaField = ref.substr(separator + 1);
        var newCondition = _defineProperty({}, subSchemaField, refVal);
        return predicatesFromCondition(newCondition, subSchema);
      } else {
        (0, _utils.toError)("Can't find schema for " + schemaField);
        return [];
      }
    } else if ((0, _utils.isRefArray)(ref, schema)) {
      var refSchema = (0, _utils.extractRefSchema)(ref, schema);
      return refSchema ? predicatesFromCondition(refVal, refSchema) : [];
    } else if (schema.properties[ref]) {
      return predicatesFromRule(refVal, schema);
    } else {
      (0, _utils.toError)("Can't validate " + ref);
      return [];
    }
  });
}

function listAllPredicates(conditions, schema) {
  var allPredicates = (0, _utils.flatMap)(conditions, function (condition) {
    return predicatesFromCondition(condition, schema);
  });
  return allPredicates.filter(function (v, i, a) {
    return allPredicates.indexOf(v) === i;
  });
}

function listInvalidPredicates(conditions, schema) {
  var refPredicates = listAllPredicates(conditions, schema);
  return refPredicates.filter(function (p) {
    return UNSUPPORTED_PREDICATES.includes(p) || _predicate2.default[p] === undefined;
  });
}

function validatePredicates(conditions, schema) {
  var invalidPredicates = listInvalidPredicates(conditions, schema);
  if (invalidPredicates.length !== 0) {
    (0, _utils.toError)("Rule contains invalid predicates " + invalidPredicates);
  }
}

function fieldsFromPredicates(predicate) {
  if (Array.isArray(predicate)) {
    return (0, _utils.flatMap)(predicate, fieldsFromPredicates);
  } else if ((0, _utils.isObject)(predicate)) {
    return (0, _utils.flatMap)(Object.keys(predicate), function (field) {
      var predicateValue = predicate[field];
      return fieldsFromPredicates(predicateValue);
    });
  } else if (typeof predicate === "string" && predicate.startsWith("$")) {
    return [predicate.substr(1)];
  } else {
    return [];
  }
}

function fieldsFromCondition(condition) {
  return (0, _utils.flatMap)(Object.keys(condition), function (ref) {
    var refCondition = condition[ref];
    if (ref === _constants.OR || ref === _constants.AND) {
      return (0, _utils.flatMap)(refCondition, fieldsFromCondition);
    } else if (ref === _constants.NOT) {
      return fieldsFromCondition(refCondition);
    } else {
      return [(0, _utils.normRef)(ref)].concat(fieldsFromPredicates(refCondition));
    }
  });
}

function listAllFields(conditions) {
  var allFields = (0, _utils.flatMap)(conditions, fieldsFromCondition);
  return allFields.filter(function (field) {
    return field.indexOf(".") === -1;
  }).filter(function (v, i, a) {
    return allFields.indexOf(v) === i;
  });
}

function listInvalidFields(conditions, schema) {
  var allFields = listAllFields(conditions);
  return allFields.filter(function (field) {
    return schema.properties[field] === undefined;
  });
}

function validateConditionFields(conditions, schema) {
  var invalidFields = listInvalidFields(conditions, schema);
  if (invalidFields.length !== 0) {
    (0, _utils.toError)("Rule contains invalid fields " + invalidFields);
  }
}

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/predicate/index.js":
/*!*****************************************!*\
  !*** ./node_modules/predicate/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const utils = __webpack_require__(/*! ./lib/utils */ "./node_modules/predicate/lib/utils.js");
const predicate = {};
predicate.VERSION = '1.0.0';

[
  utils,
  __webpack_require__(/*! ./lib/predicates */ "./node_modules/predicate/lib/predicates.js"),
  __webpack_require__(/*! ./lib/chain */ "./node_modules/predicate/lib/chain.js"),
  __webpack_require__(/*! ./lib/other */ "./node_modules/predicate/lib/other.js"),
].reduce(utils.assign, predicate);

module.exports = predicate;


/***/ }),

/***/ "./node_modules/predicate/lib/chain.js":
/*!*********************************************!*\
  !*** ./node_modules/predicate/lib/chain.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const predicates = __webpack_require__(/*! ./predicates */ "./node_modules/predicate/lib/predicates.js");
const predicate = module.exports;

// chaining mixin
class Lazy {
  constructor() {
    this.lazy = [];
  }

  valueOf() {
    return this.val();
  }

  val() {
    return this.lazy[this.method](function(args) {
      return args[0].apply(null, args[1]);
    });
  }
}

class Every extends Lazy {
  constructor() {
    super();
    this.method = 'every';
  }
}

class Some extends Lazy {
  constructor() {
    super();
    this.method = 'some';
  }
}

// Extend chaining methods onto the prototypes
[Every, Some].forEach(function(cls) {
  Object.keys(predicates).reduce(function(proto, fnName) {
    if (!predicates.fn(predicates[fnName])) return proto;

    proto[fnName] = function() {
      this.lazy.push([predicates[fnName], arguments]);
      return this;
    };

    return proto;
  }, cls.prototype);
});

predicate.all = predicate.every = function() {
  return new Every();
};

predicate.any = predicate.some = function() {
  return new Some();
};


/***/ }),

/***/ "./node_modules/predicate/lib/other.js":
/*!*********************************************!*\
  !*** ./node_modules/predicate/lib/other.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const predicates = __webpack_require__(/*! ./predicates */ "./node_modules/predicate/lib/predicates.js");
const utils = __webpack_require__(/*! ./utils */ "./node_modules/predicate/lib/utils.js");
const predicate = module.exports;

predicate.ternary = function(pred, a, b) {
  if (predicates.bool(pred)) return pred ? a : b;
  if (predicates.undef(a)) return utils.partial(predicate.ternary, pred);
  if (predicates.undef(b)) return utils.partial(predicate.ternary, pred, a);
  return predicate.ternary(pred(a, b), a, b);
};

const _every = Array.prototype.every;
const _some = Array.prototype.some;

predicate.and = function() {
  const predicates = arguments;

  return function _and(val) {
    return _every.call(predicates, function(p) {
      return p(val);
    });
  };
};

predicate.or = function() {
  const predicates = arguments;

  return function _or(val) {
    return _some.call(predicates, function(p) {
      return p(val);
    });
  };
};


/***/ }),

/***/ "./node_modules/predicate/lib/predicates.js":
/*!**************************************************!*\
  !*** ./node_modules/predicate/lib/predicates.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const utils = __webpack_require__(/*! ./utils */ "./node_modules/predicate/lib/utils.js");
const predicate = module.exports;

const curry = utils.curry;

if (Object.is) {
  predicate.is = curry(Object.is);
} else {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  predicate.is = curry(function(v1, v2) {
    if (v1 === 0 && v2 === 0) {
      return 1 / v1 === 1 / v2;
    }
    if (v1 !== v1) {
      return v2 !== v2;
    }
    return v1 === v2;
  });
}

predicate.exists = function(val) {
  return val != null;
};

predicate.truthy = function(val) {
  // coerce for null != null
  return !!(val && predicate.exists(val));
};

predicate.falsey = utils.complement(predicate.truthy);

//---- value comparision methods

predicate.equal = curry(function(a, b) {
  return a === b;
});

predicate.eq = curry(function(a, b) {
  return a == b;
});

predicate.null = predicate.equal(null);
predicate.undef = predicate.equal(undefined);

predicate.lt = predicate.less = curry(function(a, b) {
  return a < b;
});

predicate.ltEq = predicate.le = predicate.lessEq = curry(function(a, b) {
  return predicate.equal(a, b) || predicate.less(a, b);
});

predicate.gt = predicate.greater = curry(function(a, b) {
  return a > b;
});

predicate.gtEq = predicate.ge = predicate.greaterEq = curry(function(a, b) {
  return predicate.equal(a, b) || predicate.greater(a, b);
});

// --- Type checking predicates

// Forces objects toString called returned as [object Object] for instance
const __toString = Object.prototype.toString;
const eqToStr = curry(function(str, val) {
  return predicate.equal(str, __toString.call(val));
});

//---- Object type checks

predicate.object = predicate.obj = function(val) {
  return val === Object(val);
};

predicate.array = predicate.arr = Array.isArray || eqToStr('[object Array]');
predicate.date = eqToStr('[object Date]');
predicate.regex = predicate.regexp = predicate.rgx = predicate.RegExp = eqToStr('[object RegExp]');

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
predicate.finite = Number.isFinite || function(val) {
  return predicate.number(val) && isFinite(val);
};

predicate.nan = predicate.NaN = predicate.is(NaN);

predicate.instance = curry(function(Cls, inst) {
  return inst instanceof Cls;
});

predicate.arguments = eqToStr('[object Arguments]');
predicate.error = predicate.instance(Error);

// creates fns for predicate.string, etc
const typeofBuilder = curry(function(type, val) {
  return predicate.equal(type, typeof val);
});

//--- Create typeof methods

// type of string and alias name
// predicate.fn, predicate.num, etc
[
  ['function', 'fn'],
  ['string', 'str'],
  ['boolean', 'bool']
].reduce(function(predicate, type) {
  predicate[type[0]] = predicate[type[1]] = typeofBuilder(type[0]);
  return predicate;
}, predicate);

predicate.number = predicate.num = function(val) {
  return typeof val === 'number' && predicate.not.NaN(val);
};

predicate.int = function(val) {
  return predicate.num(val) && predicate.zero(utils.mod(val, 1));
};

predicate.pos = function(val) {
  return predicate.num(val) && predicate.greater(val, 0);
};

predicate.neg = function(val) {
  return predicate.num(val) && predicate.less(val, 0);
};

predicate.zero = function(val) {
  return predicate.num(val) && predicate.equal(val, 0);
};

predicate.even = function(val) {
  return predicate.num(val) &&
          predicate.not.zero(val) &&
          predicate.zero(utils.mod(val, 2));
};

predicate.odd = function(val) {
  return predicate.num(val) &&
          predicate.not.zero(val) &&
          predicate.not.zero(utils.mod(val, 2));
};

predicate.contains = predicate.includes = curry(function(arrOrString, val) {
  if (!predicate.array(arrOrString) && !predicate.string(arrOrString)) {
    throw new TypeError('Expected an array or string');
  }

  if (predicate.string(arrOrString) && !predicate.string(val)) {
    return false;
  }

  if (predicate.NaN(val)) {
    return arrOrString.some(predicate.NaN);
  }

  return !!~arrOrString.indexOf(val);
});

const __has = Object.prototype.hasOwnProperty;
predicate.has = curry(function(o, key) {
  return __has.call(o, key);
});

predicate.empty = function(o) {
  if (predicate.not.exists(o)) return true;
  if (predicate.arr(o) || predicate.str(o)) return !o.length;
  if (predicate.obj(o)) {
    for (let k in o) if (predicate.has(o, k)) return false;
    return true;
  }
  throw new TypeError();
};

predicate.primitive = function(val) {
  return predicate.string(val) || predicate.num(val) || predicate.bool(val) ||
    predicate.null(val) || predicate.undef(val) || predicate.NaN(val);
};

predicate.matches = curry(function(rgx, val) {
  return rgx.test(val);
});

// Assign inverse of each predicate
predicate.not = Object.keys(predicate).reduce(function(acc, fnName) {
  acc[fnName] = utils.complement(predicate[fnName]);
  return acc;
}, {});


/***/ }),

/***/ "./node_modules/predicate/lib/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/predicate/lib/utils.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const predicate = module.exports;
const _slice = Array.prototype.slice;

// Useful for debuging curried functions
const setSrc = function(curried, src) {
  curried.toString = () => src.toString();
  curried.src = src;
  return curried;
};

// Curry's fn's with arity 2
const curry = predicate.curry = function(f) {
  return setSrc(function curried(a, b) {
    switch (arguments.length) {
      case 0: throw new TypeError('Function called with no arguments');
      case 1: return setSrc(function(b) {
        return f(a, b);
      }, f);
    }

    return f(a, b);
  }, f);
};

// TODO: es6ing this breaks!
predicate.partial = function (fn) {
  const args = _slice.call(arguments, 1);
  return function() {
    return fn.apply(null, args.concat(_slice.call(arguments)));
  };
};

predicate.complement = predicate.invert = function(pred) {
  return function () {
    const ret = pred.apply(null, arguments);
    // Handle curried fns
    if (typeof ret === 'function') return predicate.complement(ret);
    return !ret;
  };
};

predicate.mod = curry(function(a, b) {
  return a % b;
});

// assign b's props to a
predicate.assign = curry(Object.assign || function(a, b) {
  // use crummy for/in for perf purposes
  for (let prop in b) {
    if (b.hasOwnProperty(prop)) {
      a[prop] = b[prop];
    }
  }

  return a;
});


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.5
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;
    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;
          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;
              default:
                return $$typeof;
            }
        }
      case REACT_LAZY_TYPE:
      case REACT_MEMO_TYPE:
      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
}

// AsyncMode is deprecated along with isAsyncMode
var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;

var hasWarnedAboutDeprecatedIsAsyncMode = false;

// AsyncMode should be deprecated
function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }
  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react-smooth-dnd/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-smooth-dnd/dist/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(e,n){ true?n(exports,__webpack_require__(/*! react */ "react"),__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"),__webpack_require__(/*! smooth-dnd */ "./node_modules/smooth-dnd/dist/index.js")):undefined}(this,function(n,r,e,o){"use strict";var i="default"in r?r.default:r;function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function s(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,n,t){return n&&s(e.prototype,n),t&&s(e,t),e}function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function t(){return(t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function u(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&f(e,n)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,n){return(f=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function h(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],0<=n.indexOf(t)||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],0<=n.indexOf(t)||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,n){return!n||"object"!=typeof n&&"function"!=typeof n?d(e):n}e=e&&e.hasOwnProperty("default")?e.default:e,o.smoothDnD.dropHandler=o.dropHandlers.reactDropHandler().handler,o.smoothDnD.wrapChild=!1;var g=function(e){function t(e){var n;return a(this,t),p(d(n=y(this,l(t).call(this,e))),"prevContainer",void 0),p(d(n),"container",null),p(d(n),"containerRef",i.createRef()),n.getContainerOptions=n.getContainerOptions.bind(d(n)),n.getContainer=n.getContainer.bind(d(n)),n.isObjectTypePropsChanged=n.isObjectTypePropsChanged.bind(d(n)),n.prevContainer=null,n}return u(t,r.Component),c(t,[{key:"componentDidMount",value:function(){this.prevContainer=this.getContainer(),this.container=o.smoothDnD(this.getContainer(),this.getContainerOptions())}},{key:"componentWillUnmount",value:function(){this.container.dispose(),this.container=null}},{key:"componentDidUpdate",value:function(e){if(this.getContainer()){if(this.prevContainer&&this.prevContainer!==this.getContainer())return this.container.dispose(),this.container=o.smoothDnD(this.getContainer(),this.getContainerOptions()),void(this.prevContainer=this.getContainer());this.isObjectTypePropsChanged(e)&&this.container.setOptions(this.getContainerOptions())}}},{key:"isObjectTypePropsChanged",value:function(e){var n=this.props,t=(n.render,n.children,n.style,h(n,["render","children","style"]));for(var r in t){var o=r;if(t.hasOwnProperty(o)){var i=t[o];if("function"!=typeof i&&i!==e[o])return!0}}return!1}},{key:"render",value:function(){return this.props.render?this.props.render(this.containerRef):i.createElement("div",{style:this.props.style,ref:this.containerRef},this.props.children)}},{key:"getContainer",value:function(){return this.containerRef.current}},{key:"getContainerOptions",value:function(){var o=this;return Object.keys(this.props).reduce(function(e,n){var t=n,r=o.props[t];return e[t]="function"==typeof r?function(){return o.props[t].apply(void 0,arguments)}:r,e},{})}}]),t}();p(g,"propTypes",{behaviour:e.oneOf(["move","copy","drop-zone","contain"]),groupName:e.string,orientation:e.oneOf(["horizontal","vertical"]),style:e.object,dragHandleSelector:e.string,nonDragAreaSelector:e.string,dragBeginDelay:e.number,animationDuration:e.number,autoScrollEnabled:e.bool,lockAxis:e.string,dragClass:e.string,dropClass:e.string,onDragStart:e.func,onDragEnd:e.func,onDrop:e.func,getChildPayload:e.func,shouldAnimateDrop:e.func,shouldAcceptDrop:e.func,onDragEnter:e.func,onDragLeave:e.func,render:e.func,getGhostParent:e.func,removeOnDropOut:e.bool,dropPlaceholder:e.oneOfType([e.shape({className:e.string,animationDuration:e.number,showOnTop:e.bool}),e.bool])}),p(g,"defaultProps",{behaviour:"move",orientation:"vertical"});var b=o.constants.wrapperClass,v=function(e){function n(){return a(this,n),y(this,l(n).apply(this,arguments))}return u(n,r.Component),c(n,[{key:"render",value:function(){if(this.props.render)return i.cloneElement(this.props.render(),{className:b});var e="".concat(this.props.className?this.props.className+" ":"");return i.createElement("div",t({},this.props,{className:"".concat(e).concat(b)}),this.props.children)}}]),n}();p(v,"propsTypes",{render:e.func,className:e.string}),Object.keys(o).forEach(function(e){n[e]=o[e]}),n.Container=g,n.Draggable=v,Object.defineProperty(n,"__esModule",{value:!0})});


/***/ }),

/***/ "./node_modules/selectn/index.js":
/*!***************************************!*\
  !*** ./node_modules/selectn/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curry2 = __webpack_require__(/*! curry2 */ "./node_modules/curry2/index.js")
var debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('selectn')
var dotted = __webpack_require__(/*! brackets2dots */ "./node_modules/brackets2dots/index.js")
var splits = __webpack_require__(/*! dotsplit.js */ "./node_modules/dotsplit.js/index.js")
var string = Object.prototype.toString

module.exports = curry2(selectn)

/**
 * Curried property accessor function that resolves deeply-nested object properties via dot/bracket-notation
 * string path while mitigating `TypeErrors` via friendly and composable API.
 *
 * @param {String|Array} path
 * Dot/bracket-notation string path or array.
 *
 * @param {Object} object
 * Object to access.
 *
 * @return {Function|*|undefined}
 * (1) returns `selectn/1` when partially applied.
 * (2) returns value at path if path exists.
 * (3) returns undefined if path does not exist.
 */
function selectn (path, object) {
  debug('arguments:', {
    path: path,
    object: object
  })

  var idx = -1
  var seg = string.call(path) === '[object Array]' ? path : splits(dotted(path))
  var end = seg.length
  var ref = end ? object : void 0

  while (++idx < end) {
    if (Object(ref) !== ref) return void 0
    ref = ref[seg[idx]]
  }

  debug('ref:', ref)
  return typeof ref === 'function' ? ref() : ref
}


/***/ }),

/***/ "./node_modules/smooth-dnd/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/smooth-dnd/dist/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?t(exports):undefined}(this,function(e){"use strict";var l,t,r="smooth-dnd-container-instance",b="smooth-dnd-draggable-wrapper",o="animated",p="__smooth_dnd_draggable_translation_value",u="__smooth_dnd_draggable_visibility_value",C="smooth-dnd-ghost",w="smooth-dnd-container",d="smooth-dnd-extra-size-for-insertion",v="smooth-dnd-stretcher-element",h="smooth-dnd-stretcher-instance",s="smooth-dnd-disable-touch-action",c="smooth-dnd-no-user-select",i="smooth-dnd-prevent-auto-scroll-class",y="smooth-dnd-drop-preview-default-class",x="smooth-dnd-drop-preview-inner-class",E="smooth-dnd-drop-preview-constant-class",D="smooth-dnd-drop-preview-flex-container-class",n=Object.freeze({containerInstance:r,defaultGroupName:"@@smooth-dnd-default-group@@",wrapperClass:b,defaultGrabHandleClass:"smooth-dnd-default-grap-handle",animationClass:o,translationValue:p,visibilityValue:u,ghostClass:C,containerClass:w,extraSizeForInsertion:d,stretcherElementClass:v,stretcherElementInstance:h,isDraggableDetached:"smoth-dnd-is-draggable-detached",disbaleTouchActions:s,noUserSelectClass:c,preventAutoScrollClass:i,dropPlaceholderDefaultClass:y,dropPlaceholderInnerClass:x,dropPlaceholderWrapperClass:E,dropPlaceholderFlexContainerClass:D}),S={groupName:void 0,behaviour:"move",orientation:"vertical",getChildPayload:void 0,animationDuration:250,autoScrollEnabled:!0,shouldAcceptDrop:void 0,shouldAnimateDrop:void 0};function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(t=l||(l={})).x="x",t.y="y",t.xy="xy";var O=function(e,t){return{left:Math.max(e.left,t.left),top:Math.max(e.top,t.top),right:Math.min(e.right,t.right),bottom:Math.min(e.bottom,t.bottom)}},m=function(e,t,n){return"x"===n?{left:Math.max(e.left,t.left),top:e.top,right:Math.min(e.right,t.right),bottom:e.bottom}:{left:e.left,top:Math.max(e.top,t.top),right:e.right,bottom:Math.min(e.bottom,t.bottom)}},R=function(e){var t=e.getBoundingClientRect(),n={left:t.left,right:t.right,top:t.top,bottom:t.bottom};if(P(e,"x")&&!B(e,"x")){var o=n.right-n.left;n.right=n.right+e.scrollWidth-o}if(P(e,"y")&&!B(e,"y")){var r=n.bottom-n.top;n.bottom=n.bottom+e.scrollHeight-r}return n},A=function(e){var t=window.getComputedStyle(e),n=t.overflow;if("auto"===n||"scroll"===n)return l.xy;var o=t["overflow-x"],r="auto"===o||"scroll"===o,i=t["overflow-y"],a="auto"===i||"scroll"===i;return r&&a?l.xy:r?l.x:a?l.y:null},I=function(e,t){var n=window.getComputedStyle(e),o=n.overflow,r=n["overflow-".concat(t)];return"auto"===o||"scroll"===o||("auto"===r||"scroll"===r)},B=function(e,t){var n=window.getComputedStyle(e),o=n.overflow,r=n["overflow-".concat(t)];return"auto"===o||"scroll"===o||"hidden"===o||("auto"===r||"scroll"===r||"hidden"===r)},P=function(e,t){return"x"===t?e.scrollWidth>e.clientWidth:e.scrollHeight>e.clientHeight},T=function(e,t){var n=e,o=t||R(e);for(n=e.parentElement;n;)P(n,"x")&&B(n,"x")&&(o=m(o,n.getBoundingClientRect(),"x")),P(n,"y")&&B(n,"y")&&(o=m(o,n.getBoundingClientRect(),"y")),n=n.parentElement;return o},z=function(e,n){for(var o=e;o;){if(o[r]){var t=function(){var t=o[r];if(n.some(function(e){return e===t}))return{v:t}}();if("object"===a(t))return t.v}o=o.parentElement}return null},N=function(e,t){for(var n=e;n;){if(n.matches(t))return n;n=n.parentElement}return null},L=function(e,t){return-1<e.className.split(" ").map(function(e){return e}).indexOf(t)},M=function(e,t){if(e){var n=e.className.split(" ").filter(function(e){return e});-1===n.indexOf(t)&&(n.unshift(t),e.className=n.join(" "))}},j=function(e,t){if(e){var n=e.className.split(" ").filter(function(e){return e&&e!==t});e.className=n.join(" ")}},_=function(e,t){return e.removeChild(e.children[t])},F=function(e,t,n){n>=e.children.length?e.appendChild(t):e.insertBefore(t,e.children[n])},V=function(){window.getSelection?window.getSelection().empty?window.getSelection().empty():window.getSelection().removeAllRanges&&window.getSelection().removeAllRanges():window.document.selection&&window.document.selection.empty()},X=function(e){if(e){var t=window.getComputedStyle(e);if(t)return t.cursor}return null};function H(e){return!(e.bottom<=e.top||e.right<=e.left)}function Y(e){var s=e.element,c=e.draggables;return function(e,t){var n=e,o=n.removedIndex,r=n.addedIndex,i=n.droppedElement,a=null;if(null!==o&&(a=_(s,o),c.splice(o,1)),null!==r){var l=window.document.createElement("div");l.className="".concat(b),l.appendChild(a&&a.firstElementChild?a.firstElementChild:i),F(s,l,r),r>=c.length?c.push(l):c.splice(r,0,l)}t&&t(e)}}var k=Object.freeze({domDropHandler:Y,reactDropHandler:function(){return{handler:function(){return function(e,t){t&&t(e)}}}}}),G={size:"offsetWidth",distanceToParent:"offsetLeft",translate:"transform",begin:"left",end:"right",dragPosition:"x",scrollSize:"scrollWidth",offsetSize:"offsetWidth",scrollValue:"scrollLeft",scale:"scaleX",setSize:"width",setters:{translate:function(e){return"translate3d(".concat(e,"px, 0, 0)")}}},W={size:"offsetHeight",distanceToParent:"offsetTop",translate:"transform",begin:"top",end:"bottom",dragPosition:"y",scrollSize:"scrollHeight",offsetSize:"offsetHeight",scrollValue:"scrollTop",scale:"scaleY",setSize:"height",setters:{translate:function(e){return"translate3d(0,".concat(e,"px, 0)")}}};function q(o,s,e){o[d]=0;var r,i=(r="horizontal"===s?G:W,{get:function(e,t){return e[r[t]||t]},set:function(e,t,n){e[r[t]]=r.setters[t]?r.setters[t](n):n}}),c={translation:0};function t(){var e,t;n(o),t=(e=o).getBoundingClientRect(),c.scaleX=e.offsetWidth?(t.right-t.left)/e.offsetWidth:1,c.scaleY=e.offsetHeight?(t.bottom-t.top)/e.offsetHeight:1}function n(e){c.rect=R(e);var t=T(e,c.rect);H(t)&&(c.lastVisibleRect=c.visibleRect),c.visibleRect=t}function a(e){var t=e;if(t.tagName){var n=t.getBoundingClientRect();return"vertical"===s?n.bottom-n.top:n.right-n.left}return i.get(e,"size")*i.get(c,"scale")}function l(e){return i.get(e,"dragPosition")}return window.addEventListener("resize",function(){n(o)}),setTimeout(function(){t()},10),{getSize:a,getContainerRectangles:function(){return{rect:c.rect,visibleRect:c.visibleRect,lastVisibleRect:c.lastVisibleRect}},getBeginEndOfDOMRect:function(e){return{begin:i.get(e,"begin"),end:i.get(e,"end")}},getBeginEndOfContainer:function(){return{begin:i.get(c.rect,"begin")+c.translation,end:i.get(c.rect,"end")+c.translation}},getBeginEndOfContainerVisibleRect:function(){return{begin:i.get(c.visibleRect,"begin")+c.translation,end:i.get(c.visibleRect,"end")+c.translation}},getBeginEnd:function(e){var t,n=(t=e,(i.get(t,"distanceToParent")+(t[p]||0))*i.get(c,"scale")+(i.get(c.rect,"begin")+c.translation)-i.get(o,"scrollValue"));return{begin:n,end:n+a(e)*i.get(c,"scale")}},getAxisValue:l,setTranslation:function(e,t){t?i.set(e.style,"translate",t):e.style.removeProperty("transform"),e[p]=t},getTranslation:function(e){return e[p]},setVisibility:function(e,t){void 0!==e[u]&&e[u]===t||(t?e.style.removeProperty("visibility"):e.style.visibility="hidden",e[u]=t)},isVisible:function(e){return void 0===e[u]||e[u]},isInVisibleRect:function(e,t){var n=c.visibleRect,o=n.left,r=n.top,i=n.right,a=n.bottom;a-r<2&&(a=r+30);var l=c.rect;return"vertical"===s?e>l.left&&e<l.right&&r<t&&t<a:o<e&&e<i&&t>l.top&&t<l.bottom},setSize:function(e,t){i.set(e,"setSize",t)},getTopLeftOfElementBegin:function(e){var t=0;return{top:"horizontal"===s?(t=e,c.rect.top):(t=c.rect.left,e),left:t}},getScrollSize:function(e){return i.get(e,"scrollSize")},getScrollValue:function(e){return i.get(e,"scrollValue")},setScrollValue:function(e,t){return i.set(e,"scrollValue",t)},invalidate:t,invalidateRects:function(){n(o)},getPosition:function(e){return l(e)},setBegin:function(e,t){i.set(e,"begin",t)}}}function U(e,t,n){var o,r,i,a=n.left,l=n.right,s=n.top,c=n.bottom,u=e.x,d=e.y;if(u<a||l<u||d<s||c<d)return null;i="x"===t?(o=a,r=l,u):(o=s,r=c,d);var f=r-o,g=400<f?100:f/4;return r-i<g?{direction:"end",speedFactor:(g-(r-i))/g}:i-o<g?{direction:"begin",speedFactor:(g-(i-o))/g}:null}var J=function(l){var s=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"y",c=null,u=null,d=null,f=null;return{animate:function(e,t){d=e,f=t,function a(){null===c&&(c=requestAnimationFrame(function(e){null===u&&(u=e);var t=e-u;u=e;var n,o,r,i=t/1e3*f;o=s,r=i="begin"===d?0-i:i,(n=l)&&(n!==window?"x"===o?n.scrollLeft+=r:n.scrollTop+=r:"x"===o?n.scrollBy(r,0):n.scrollBy(0,r)),c=null,a()}))}()},stop:function(){null!==c&&(cancelAnimationFrame(c),c=null),u=null}}};function K(e){return function(){return T(e,e.getBoundingClientRect())}}var Q,Z,$,ee=function(e){var u=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1500,a=e.reduce(function(e,t){var n=function(e){for(var t=[],n=e.element;n;){var o=A(n);if(o&&!L(n,i)){var r={};switch(o){case l.xy:r.x={animator:J(n,"x")},r.y={animator:J(n,"y")};break;case l.x:r.x={animator:J(n,"x")};break;case l.y:r.y={animator:J(n,"y")}}t.push({axisAnimations:r,getRect:K(n),scrollerElement:n})}n=n.parentElement}return t}(t).filter(function(t){return!e.find(function(e){return e.scrollerElement===t.scrollerElement})});return[].concat(g(e),g(n))},[]);return function(e){var t,o,n=e.draggableInfo;if(e.reset)a.forEach(function(e){e.axisAnimations.x&&e.axisAnimations.x.animator.stop(),e.axisAnimations.y&&e.axisAnimations.y.animator.stop()});else if(n){t=a,o=n.mousePosition,t.forEach(function(e){var t=e.axisAnimations,n=(0,e.getRect)();t.x&&(t.x.scrollParams=U(o,"x",n),e.cachedRect=n),t.y&&(t.y.scrollParams=U(o,"y",n),e.cachedRect=n)}),a.forEach(function(e){var t=e.axisAnimations,n=t.x,o=t.y;if(n)if(n.scrollParams){var r=n.scrollParams,i=r.direction,a=r.speedFactor;n.animator.animate(i,a*u)}else n.animator.stop();if(o)if(o.scrollParams){var l=o.scrollParams,s=l.direction,c=l.speedFactor;o.animator.animate(s,c*u)}else o.animator.stop()});var r=a.filter(function(e){return e.cachedRect});if(r.length&&1<r.length){var i=function(e,t){for(var n=document.elementFromPoint(t.x,t.y);n;){var o=e.find(function(e){return e.scrollerElement===n});if(o)return o;n=n.parentElement}return null}(r,n.mousePosition);i&&r.forEach(function(e){e!==i&&(e.axisAnimations.x&&e.axisAnimations.x.animator.stop(),e.axisAnimations.y&&e.axisAnimations.y.animator.stop())})}}}};"undefined"!=typeof window&&((Q=Node||Element)&&Q.prototype&&!Q.prototype.matches&&(Q.prototype.matches=Q.prototype.matchesSelector||Q.prototype.mozMatchesSelector||Q.prototype.msMatchesSelector||Q.prototype.oMatchesSelector||Q.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;0<=--n&&t.item(n)!==this;);return-1<n}),(Z=Node||Element)&&Z.prototype&&null==Z.prototype.firstElementChild&&Object.defineProperty(Z.prototype,"firstElementChild",{get:function(){for(var e,t=this.childNodes,n=0;e=t[n++];)if(1===e.nodeType)return e;return null}}),Array.prototype.some||(Array.prototype.some=function(e){if(null==this)throw new TypeError("Array.prototype.some called on null or undefined");if("function"!=typeof e)throw new TypeError;for(var t=Object(this),n=t.length>>>0,o=2<=arguments.length?arguments[1]:void 0,r=0;r<n;r++)if(r in t&&e.call(o,t[r],r,t))return!0;return!1}));var te={overflow:"hidden",display:"block"},ne={height:"100%",display:"table-cell","vertical-align":"top"},oe=(f($={},".".concat(w),{position:"relative","min-height":"30px","min-width":"30px"}),f($,".".concat(w,".horizontal"),{display:"table"}),f($,".".concat(w,".horizontal > .").concat(v),{display:"inline-block"}),f($,".".concat(w,".horizontal > .").concat(b),ne),f($,".".concat(w,".vertical > .").concat(b),te),f($,".".concat(b),{"box-sizing":"border-box"}),f($,".".concat(b,".horizontal"),ne),f($,".".concat(b,".vertical"),te),f($,".".concat(b,".animated"),{transition:"transform ease"}),f($,".".concat(C),{"box-sizing":"border-box"}),f($,".".concat(C,".animated"),{transition:"all ease-in-out"}),f($,".".concat(C," *"),{"pointer-events":"none"}),f($,".".concat(s," *"),{"touch-actions":"none","-ms-touch-actions":"none"}),f($,".".concat(c),{"-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none"}),f($,".".concat(x),{flex:"1"}),f($,".".concat(w,".horizontal > .").concat(E),{height:"100%",overflow:"hidden",display:"table-cell","vertical-align":"top"}),f($,".".concat(w,".vertical > .").concat(E),{overflow:"hidden",display:"block",width:"100%"}),f($,".".concat(D),{width:"100%",height:"100%",display:"flex","justify-content":"stretch","align-items":"stretch"}),f($,".".concat(y),{"background-color":"rgba(150, 150, 150, 0.1)",border:"1px solid #ccc"}),$);function re(o){return Object.keys(o).reduce(function(e,t){var n=o[t];return"object"===a(n)?"".concat(e).concat(t,"{").concat(re(n),"}"):"".concat(e).concat(t,":").concat(n,";")},"")}function ie(e){if(e&&"undefined"!=typeof window){var t=window.document.head||window.document.getElementsByTagName("head")[0],n=window.document.createElement("style"),o=re({"body *":{cursor:"".concat(e," !important")}});return n.type="text/css",n.styleSheet?n.styleSheet.cssText=o:n.appendChild(window.document.createTextNode(o)),t.appendChild(n),n}return null}var ae,le,se=["mousedown","touchstart"],ce=["mousemove","touchmove"],ue=["mouseup","touchend"],de=null,fe=null,ge=null,me=null,pe=[],ve=!1,he=!1,ye=!1,be=!1,we=null,xe=null,Ee=null,Ce=null,De=(ae=null,le=!1,{start:function(){le||(le=!0,function e(){ae=requestAnimationFrame(function(){de.forEach(function(e){return e.layout.invalidateRects()}),setTimeout(function(){null!==ae&&e()},50)})}())},stop:function(){null!==ae&&(cancelAnimationFrame(ae),ae=null),le=!1}}),Se="undefined"!=typeof window&&!!(window.navigator.userAgent.match(/Android/i)||window.navigator.userAgent.match(/webOS/i)||window.navigator.userAgent.match(/iPhone/i)||window.navigator.userAgent.match(/iPad/i)||window.navigator.userAgent.match(/iPod/i)||window.navigator.userAgent.match(/BlackBerry/i)||window.navigator.userAgent.match(/Windows Phone/i));function Oe(){"undefined"!=typeof window&&se.forEach(function(e){window.document.addEventListener(e,Ie,{passive:!1})})}function Re(){return me&&me.ghostParent?me.ghostParent:fe&&fe.parentElement||window.document.body}var Ae=function(){var r,i,o,a=null,l=1,s=5;function c(e){var t=_e(e),n=t.clientX,o=t.clientY;if(i)(Math.abs(r.clientX-n)>s||Math.abs(r.clientY-o)>s)&&f();else if(Math.abs(r.clientX-n)>l||Math.abs(r.clientY-o)>l)return g()}function u(){f()}function d(){f()}function f(){clearTimeout(a),ce.forEach(function(e){return window.document.removeEventListener(e,c)},{passive:!1}),ue.forEach(function(e){return window.document.removeEventListener(e,u)},{passive:!1}),window.document.removeEventListener("drag",d,{passive:!1})}function g(){clearTimeout(a),f(),o()}return function(e,t,n){r=_e(e),o=n,(i="number"==typeof t?t:Se?200:0)&&(a=setTimeout(g,i)),ce.forEach(function(e){return window.document.addEventListener(e,c)},{passive:!1}),ue.forEach(function(e){return window.document.addEventListener(e,u)},{passive:!1}),window.document.addEventListener("drag",d,{passive:!1})}}();function Ie(e){var t=_e(e);if(!ve&&(void 0===t.button||0===t.button)&&(fe=N(t.target,"."+b))){var n=N(fe,"."+w),o=pe.filter(function(e){return e.element===n})[0],r=o.getOptions().dragHandleSelector,i=o.getOptions().nonDragAreaSelector,a=!0;if(r&&!N(t.target,r)&&(a=!1),i&&N(t.target,i)&&(a=!1),a){M(window.document.body,s),M(window.document.body,c);window.document.addEventListener("mouseup",function e(){j(window.document.body,s),j(window.document.body,c),window.document.removeEventListener("mouseup",e)})}a&&Ae(t,o.getOptions().dragBeginDelay,function(){V(),Ye(t,X(e.target)),ce.forEach(function(e){window.document.addEventListener(e,Be,{passive:!1})}),ue.forEach(function(e){window.document.addEventListener(e,je,{passive:!1})})})}}function Be(e){e.preventDefault();var t=_e(e);if(me){var n=me.container.getOptions();"contain"===n.behaviour?function(e){var t,n,o,r,i=e.clientX,a=e.clientY,l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"vertical",s=me.container.layout.getBeginEndOfContainerVisibleRect();r="vertical"===l?(t=a,n="y",o="top",me.size.offsetHeight):(t=i,n="x",o="left",me.size.offsetWidth);var c=s.begin,u=s.end-r,d=Math.max(c,Math.min(u,t+ge.positionDelta[o]));ge.topLeft[n]=d,me.position[n]=Math.max(s.begin,Math.min(s.end,t+ge.centerDelta[n])),me.mousePosition[n]=Math.max(s.begin,Math.min(s.end,t)),me.position[n]<s.begin+r/2&&(me.position[n]=s.begin+2),me.position[n]>s.end-r/2&&(me.position[n]=s.end-2)}(t,n.orientation):Ee?"y"===Ee?(ge.topLeft.y=t.clientY+ge.positionDelta.top,me.position.y=t.clientY+ge.centerDelta.y,me.mousePosition.y=t.clientY):"x"===Ee&&(ge.topLeft.x=t.clientX+ge.positionDelta.left,me.position.x=t.clientX+ge.centerDelta.x,me.mousePosition.x=t.clientX):(ge.topLeft.x=t.clientX+ge.positionDelta.left,ge.topLeft.y=t.clientY+ge.positionDelta.top,me.position.x=t.clientX+ge.centerDelta.x,me.position.y=t.clientY+ge.centerDelta.y,me.mousePosition.x=t.clientX,me.mousePosition.y=t.clientY),Ge(),(be=!we(me))&&Le()}else Ye(t,X(e.target))}var Pe,Te,ze,Ne,Le=(Pe=Me,ze=!(Te=20),Ne=null,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Ne&&clearTimeout(Ne),ze&&!Ne?Pe.call.apply(Pe,[null].concat(t)):Ne=setTimeout(function(){Ne=null,Pe.call.apply(Pe,[null].concat(t))},Te)});function Me(){be&&(be=!1,Fe(me,de))}function je(){var e;ce.forEach(function(e){window.document.removeEventListener(e,Be,{passive:!1})}),ue.forEach(function(e){window.document.removeEventListener(e,je,{passive:!1})}),xe({reset:!0}),Ce&&((e=Ce)&&"undefined"!=typeof window&&(window.document.head||window.document.getElementsByTagName("head")[0]).removeChild(e),Ce=null),me&&(De.stop(),Me(),ye=!0,function(e){function i(){j(ge.ghost,"animated"),ge.ghost.style.transitionDuration=null,Re().removeChild(ge.ghost),e()}function t(e,t,n){var o=e.top,r=e.left;M(ge.ghost,"animated"),n&&M(ge.ghost.firstElementChild,n),ge.topLeft.x=r,ge.topLeft.y=o,Ge(t),setTimeout(function(){i()},t+20)}function n(e,t){M(ge.ghost,"animated"),Ge(e,.9,!0),setTimeout(function(){t()},e+20)}if(me.targetElement){var o=pe.filter(function(e){return e.element===me.targetElement})[0];!(p=o.getOptions()).shouldAnimateDrop||p.shouldAnimateDrop(me.container.getOptions(),me.payload)?t(o.getDragResult().shadowBeginEnd.rect,Math.max(150,o.getOptions().animationDuration/2),o.getOptions().dropClass):i()}else{var r=pe.filter(function(e){return e===me.container})[0];if(r){var a=r.getOptions(),l=a.behaviour,s=a.removeOnDropOut;if("move"!==l&&"contain"!==l||!he&&s||!r.getDragResult())n(r.getOptions().animationDuration,i);else{var c=r.layout.getContainerRectangles();if(!H(c.visibleRect)&&H(c.lastVisibleRect))t({top:c.lastVisibleRect.top,left:c.lastVisibleRect.left},r.getOptions().animationDuration,r.getOptions().dropClass);else{var u=r.getDragResult(),d=u.removedIndex,f=u.elementSize,g=r.layout;r.getTranslateCalculator({dragResult:{removedIndex:d,addedIndex:d,elementSize:f,pos:void 0,shadowBeginEnd:void 0}});var m=0<d?g.getBeginEnd(r.draggables[d-1]).end:g.getBeginEndOfContainer().begin;t(g.getTopLeftOfElementBegin(m),r.getOptions().animationDuration,r.getOptions().dropClass)}}}else n(S.animationDuration,i)}var p}(function(){He(ve=!1);for(var e=de||[],t=e.shift();void 0!==t;)t.handleDrop(me),t=e.shift();we=Ee=me=ge=fe=de=null,ye=!1}))}function _e(e){return e.touches?e.touches[0]:e}function Fe(n,e){var o=!1;e.forEach(function(e){var t=e.handleDrag(n);o=!!t.containerBoxChanged||!1,t.containerBoxChanged=!1}),o&&(o=!1,requestAnimationFrame(function(){pe.forEach(function(e){e.layout.invalidateRects(),e.onTranslated()})}))}function Ve(e){var t=e,n=null;return function(e){return!(null!==n||!ve||ye)&&(n=requestAnimationFrame(function(){ve&&!ye&&(Fe(e,t),xe({draggableInfo:e})),n=null}),!0)}}function Xe(e,t){return e.getOptions().autoScrollEnabled?ee(t,e.getScrollMaxSpeed()):function(e){return null}}function He(o){pe.forEach(function(e){var t=o?e.getOptions().onDragStart:e.getOptions().onDragEnd;if(t){var n={isSource:e===me.container,payload:me.payload};e.isDragRelevant(me.container,me.payload)?n.willAcceptDrop=!0:n.willAcceptDrop=!1,t(n)}})}function Ye(e,t){if(null!==fe){ve=!0;var n=pe.filter(function(e){return fe.parentElement===e.element})[0];n.setDraggables(),Ee=n.getOptions().lockAxis?n.getOptions().lockAxis.toLowerCase():null,y=fe,b=pe.filter(function(e){return y.parentElement===e.element})[0],w=b.draggables.indexOf(y),x=b.getOptions().getGhostParent,E=y.getBoundingClientRect(),me={container:b,element:y,size:{offsetHeight:E.bottom-E.top,offsetWidth:E.right-E.left},elementIndex:w,payload:b.getOptions().getChildPayload?b.getOptions().getChildPayload(w):void 0,targetElement:null,position:{x:0,y:0},groupName:b.getOptions().groupName,ghostParent:x?x():null,invalidateShadow:null,mousePosition:null,relevantContainers:null},o=fe,r={x:e.clientX,y:e.clientY},i=me.container,a=t,l=r.x,s=r.y,c=o.getBoundingClientRect(),u=c.left,d=c.top,f=c.right,g=c.bottom,m=O(i.layout.getContainerRectangles().visibleRect,c),p=m.left+(m.right-m.left)/2,v=m.top+(m.bottom-m.top)/2,(h=o.cloneNode(!0)).style.zIndex="1000",h.style.boxSizing="border-box",h.style.position="fixed",h.style.top="0px",h.style.left="0px",h.style.transform=null,h.style.removeProperty("transform"),i.shouldUseTransformForGhost()?h.style.transform="translate3d(".concat(u,"px, ").concat(d,"px, 0)"):(h.style.top="".concat(d,"px"),h.style.left="".concat(u,"px")),h.style.width=f-u+"px",h.style.height=g-d+"px",h.style.overflow="visible",h.style.transition=null,h.style.removeProperty("transition"),h.style.pointerEvents="none",h.style.userSelect="none",i.getOptions().dragClass?setTimeout(function(){M(h.firstElementChild,i.getOptions().dragClass);var e=window.getComputedStyle(h.firstElementChild).cursor;Ce=ie(e)}):Ce=ie(a),M(h,i.getOptions().orientation||"vertical"),M(h,C),ge={ghost:h,centerDelta:{x:p-l,y:v-s},positionDelta:{left:u-l,top:d-s},topLeft:{x:u,y:d}},me.position={x:e.clientX+ge.centerDelta.x,y:e.clientY+ge.centerDelta.y},me.mousePosition={x:e.clientX,y:e.clientY},de=pe.filter(function(e){return e.isDragRelevant(n,me.payload)}),me.relevantContainers=de,we=Ve(de),xe&&xe({reset:!0,draggableInfo:void 0}),xe=Xe(n,de),de.forEach(function(e){return e.prepareDrag(e,de)}),He(!0),we(me),Re().appendChild(ge.ghost),De.start()}var o,r,i,a,l,s,c,u,d,f,g,m,p,v,h,y,b,w,x,E}var ke=null;function Ge(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1,n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],o=ge,r=o.ghost,i=o.topLeft,a=i.x,l=i.y,s=!me.container||me.container.shouldUseTransformForGhost(),c=s?"translate3d(".concat(a,"px,").concat(l,"px, 0)"):null;if(1!==t&&(c=c?"".concat(c," scale(").concat(t,")"):"scale(".concat(t,")")),0<e)return ge.ghost.style.transitionDuration=e+"ms",void requestAnimationFrame(function(){c&&(r.style.transform=c),s||(r.style.left=a+"px",r.style.top=l+"px"),ke=null,n&&(r.style.opacity="0")});null===ke&&(ke=requestAnimationFrame(function(){c&&(r.style.transform=c),s||(r.style.left=a+"px",r.style.top=l+"px"),ke=null,n&&(r.style.opacity="0")}))}function We(){if(ve&&!he&&!ye){be=!(he=!0);var t=Object.assign({},me,{targetElement:null,position:{x:Number.MAX_SAFE_INTEGER,y:Number.MAX_SAFE_INTEGER},mousePosition:{x:Number.MAX_SAFE_INTEGER,y:Number.MAX_SAFE_INTEGER}});de.forEach(function(e){e.handleDrag(t)}),me.targetElement=null,me.cancelDrop=!0,je(),he=!1}}"undefined"!=typeof window&&function(){if("undefined"!=typeof window){var e=window.document.head||window.document.getElementsByTagName("head")[0],t=window.document.createElement("style");t.id="smooth-dnd-style-definitions";var n=re(oe);t.type="text/css",t.styleSheet?t.styleSheet.cssText=n:t.appendChild(window.document.createTextNode(n)),e.appendChild(t)}}();var qe=(Oe(),{register:function(e){var t;t=e,pe.push(t),ve&&me&&t.isDragRelevant(me.container,me.payload)&&(de.push(t),t.prepareDrag(t,de),xe&&xe({reset:!0,draggableInfo:void 0}),xe=Xe(t,de),we=Ve(de),t.handleDrag(me))},unregister:function(e){!function(e){if(pe.splice(pe.indexOf(e),1),ve&&me){me.container===e&&e.fireRemoveElement(),me.targetElement===e.element&&(me.targetElement=null);var t=de.indexOf(e);-1<t&&(de.splice(t,1),xe&&xe({reset:!0,draggableInfo:void 0}),xe=Xe(e,de),we=Ve(de))}}(e)},isDragging:function(){return ve},cancelDrag:We});function Ue(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:S.animationDuration;t?(M(e,o),e.style.transitionDuration=n+"ms"):(j(e,o),e.style.removeProperty("transition-duration"))}function Je(n){var o=[];return Array.prototype.forEach.call(n.children,function(e){if(e.nodeType===Node.ELEMENT_NODE){var t=e;L(e,b)||(t=function(e){if(yt.wrapChild){var t=window.document.createElement("div");return t.className="".concat(b),e.parentElement.insertBefore(t,e),t.appendChild(e),t}return e}(e)),t[p]=0,o.push(t)}else n.removeChild(e)}),o}function Ke(e){var g=e.layout;return function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2];return function e(t,n,o,r){var i=4<arguments.length&&void 0!==arguments[4]&&arguments[4];if(r<o)return o;if(o===r){var a=g.getBeginEnd(t[o]),l=a.begin,s=a.end;return i?n<(s+l)/2?o:o+1:o}var c=Math.floor((r+o)/2),u=g.getBeginEnd(t[c]),d=u.begin,f=u.end;return n<d?e(t,n,o,c-1,i):f<n?e(t,n,c+1,r,i):i?n<(f+d)/2?c:c+1:c}(e,t,0,e.length-1,n)}}function Qe(e){var t,n,o,r,i=e.element,a=e.draggables,l=e.layout,s=e.getOptions,c=(n=(t={element:i,draggables:a,layout:l,getOptions:s}).element,o=t.draggables,r=t.layout,function(){o.forEach(function(e){Ue(e,!1),r.setTranslation(e,0),r.setVisibility(e,!0)}),n[h]&&(n[h].parentNode.removeChild(n[h]),n[h]=null)}),u=(yt.dropHandler||Y)({element:i,draggables:a,layout:l,getOptions:s});return function(e,t){var n=t.addedIndex,o=t.removedIndex,r=2<arguments.length&&void 0!==arguments[2]&&arguments[2];if(c(),!e.cancelDrop&&(e.targetElement||s().removeOnDropOut||r)){var i={removedIndex:o,addedIndex:null!==n?null!==o&&o<n?n-1:n:null,payload:e.payload};u(i,s().onDrop)}}}function Ze(e){var o=e.element,r=e.getOptions,i=null;return function(e){var t=e.draggableInfo,n=i;return null==i&&t.container.element===o&&"copy"!==r().behaviour&&(n=i=t.elementIndex),{removedIndex:n}}}function $e(e){var n=e.draggables,o=e.layout;return function(e){var t=e.dragResult;null!==t.removedIndex&&o.setVisibility(n[t.removedIndex],!1)}}function et(e){var r=e.element,i=e.layout;return function(e){var t=e.draggableInfo,n=document.elementFromPoint(t.position.x,t.position.y);if(n){var o=z(n,t.relevantContainers);if(o&&o.element===r)return{pos:i.getPosition(t.position)}}return{pos:null}}}function tt(e){var n=e.layout,o=null;return function(e){var t=e.draggableInfo;return null===e.dragResult.pos?o=null:{elementSize:o=o||n.getSize(t.size)}}}function nt(e){var o=e.element;return function(e){var t=e.draggableInfo,n=e.dragResult;!function(e,t){var n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2];t&&n?e.targetElement=t:e.targetElement===t&&(e.targetElement=null)}(t,o,!!n.pos)}}function ot(){return function(e){return null!==e.dragResult.pos?{addedIndex:0}:{addedIndex:null}}}function rt(e){var r=e.layout,i=null;return function(e){var t=e.dragResult.addedIndex;if(t===i)return null;i=t;var n=r.getBeginEndOfContainer(),o=n.begin;n.end;return{shadowBeginEnd:{rect:r.getTopLeftOfElementBegin(o)}}}}function it(e){var g=e.layout,m=e.element,p=e.getOptions,v=null;return function(e){var t=e.dragResult,n=t.elementSize,o=t.shadowBeginEnd,r=t.addedIndex,i=t.dropPlaceholderContainer,a=p();if(a.dropPlaceholder){var l="boolean"==typeof a.dropPlaceholder?{}:a.dropPlaceholder,s=l.animationDuration,c=l.className,u=l.showOnTop;if(null===r)return i&&null!==v&&m.removeChild(i),v=null,{dropPlaceholderContainer:void 0};if(!i){var d=document.createElement("div"),f=document.createElement("div");f.className=D,d.className="".concat(x," ").concat(c||y),(i=document.createElement("div")).className="".concat(E),i.style.position="absolute",void 0!==s&&(i.style.transition="all ".concat(s,"ms ease")),i.appendChild(f),f.appendChild(d),g.setSize(i.style,n+"px"),i.style.pointerEvents="none",u?m.appendChild(i):m.insertBefore(i,m.firstElementChild)}return v!==r&&o.dropArea&&g.setBegin(i.style,o.dropArea.begin-g.getBeginEndOfContainer().begin+"px"),v=r,{dropPlaceholderContainer:i}}return null}}function at(e){var o=dt(e);return function(e){var t=e.draggableInfo,n=e.dragResult;return t.invalidateShadow?o({draggableInfo:t,dragResult:n}):null}}function lt(e){var t,i,a,o=(i=(t=e).draggables,a=Ke({layout:t.layout}),function(e){var t=e.dragResult,n=t.shadowBeginEnd,o=t.pos;if(n)return n.begin+n.beginAdjustment<=o&&n.end>=o?null:o<n.begin+n.beginAdjustment?a(i,o):o>n.end?a(i,o)+1:i.length;var r=a(i,o,!0);return null!==r?r:i.length});return function(e){var t=e.dragResult,n=null;return null!==t.pos&&null===(n=o({dragResult:t}))&&(n=t.addedIndex),{addedIndex:n}}}function st(){var r=null;return function(e){var t=e.dragResult,n=t.addedIndex,o=t.shadowBeginEnd;n!==r&&null!==r&&o&&(o.beginAdjustment=0),r=n}}function ct(e){var u=e.element,d=e.draggables,f=e.layout,g=e.getOptions,m=null;return function(e){var t=e.dragResult,n=t.addedIndex,o=t.removedIndex,r=t.elementSize;if(null===o)if(null!==n){if(!m){var i=f.getBeginEndOfContainer();i.end=i.begin+f.getSize(u);var a=f.getScrollSize(u)>f.getSize(u)?i.begin+f.getScrollSize(u)-f.getScrollValue(u):i.end,l=0<d.length?f.getBeginEnd(d[d.length-1]).end-d[d.length-1][p]:i.begin;if(a<l+r){(m=window.document.createElement("div")).className=v+" "+g().orientation;var s=0<d.length?r+l-a:r;return f.setSize(m.style,"".concat(s,"px")),u.appendChild(m),u[h]=m,{containerBoxChanged:!0}}}}else if(m){f.setTranslation(m,0);var c=m;return m=null,u.removeChild(c),{containerBoxChanged:!(u[h]=null)}}}}function ut(e){var s=e.draggables,c=e.layout,u=null,d=null;return function(e){var t=e.dragResult,n=t.addedIndex,o=t.removedIndex,r=t.elementSize;if(n!==u||o!==d){for(var i=0;i<s.length;i++)if(i!==o){var a=s[i],l=0;null!==o&&o<i&&(l-=r),null!==n&&n<=i&&(l+=r),c.setTranslation(a,l)}return{addedIndex:u=n,removedIndex:d=o}}}}function dt(e){var x=e.draggables,E=e.layout,C=null;return function(e){var t=e.draggableInfo,n=e.dragResult,o=n.addedIndex,r=n.removedIndex,i=n.elementSize,a=n.pos,l=n.shadowBeginEnd;if(null===a)return{shadowBeginEnd:C=null};if(null===o||!t.invalidateShadow&&o===C)return null;var s=o-1,c=Number.MIN_SAFE_INTEGER,u=0,d=0,f=null,g=null;if(s===r&&s--,-1<s){var m=E.getSize(x[s]);if(g=E.getBeginEnd(x[s]),i<m){var p=(m-i)/2;c=g.end-p}else c=g.end;u=g.end}else g={end:E.getBeginEndOfContainer().begin},u=E.getBeginEndOfContainer().begin;var v=Number.MAX_SAFE_INTEGER,h=o;if(h===r&&h++,h<x.length){var y=E.getSize(x[h]);if(f=E.getBeginEnd(x[h]),i<y){var b=(y-i)/2;v=f.begin+b}else v=f.begin;d=f.begin}else f={begin:E.getContainerRectangles().rect.end},d=E.getContainerRectangles().rect.end-E.getContainerRectangles().rect.begin;var w=g&&f?E.getTopLeftOfElementBegin(g.end):null;return C=o,{shadowBeginEnd:{dropArea:{begin:u,end:d},begin:c,end:v,rect:w,beginAdjustment:l?l.beginAdjustment:0}}}}function ft(){var a=null;return function(e){var t=e.dragResult,n=t.pos,o=t.addedIndex,r=t.shadowBeginEnd;if(null!==n){if(null!=o&&null===a){if(n<r.begin){var i=n-r.begin-5;r.beginAdjustment=i}a=o}}else a=null}}function gt(e){var t=e.getOptions,n=!1,o=t();return function(e){var t=!!e.dragResult.pos;t!==n&&((n=t)?o.onDragEnter&&o.onDragEnter():o.onDragLeave&&o.onDragLeave())}}function mt(e){var t=e.getOptions,s=null,c=t();return function(e){var t=e.dragResult,n=t.addedIndex,o=t.removedIndex,r=e.draggableInfo,i=r.payload,a=r.element;if(c.onDropReady&&null!==n&&s!==n){var l=s=n;null!==o&&o<n&&l--,c.onDropReady({addedIndex:l,removedIndex:o,payload:i,element:a?a.firstElementChild:void 0})}}}function pt(e){return"drop-zone"===e.getOptions().behaviour?vt(e)(Ze,$e,et,tt,nt,ot,rt,gt,mt):vt(e)(Ze,$e,et,tt,nt,at,lt,st,ct,ut,dt,it,ft,gt,mt)}function vt(i){return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.map(function(e){return e(i)}),r=null;return function(n){return r=o.reduce(function(e,t){return Object.assign(e,t({draggableInfo:n,dragResult:e}))},r||{addedIndex:null,removedIndex:null,elementSize:null,pos:null,shadowBeginEnd:null})}}}function ht(y){return function(e){var t,n,o,r,i,a,l,s=Object.assign({},S,e),c=null,u=null,d=(n=h,o=Je(t=y),r=n(),M(t,"".concat(w," ").concat(r.orientation)),{element:t,draggables:o,getOptions:n,layout:q(t,r.orientation,r.animationDuration)}),f=pt(d),g=Qe(d),m=function(t,n){var o=[];function e(){o&&(o.forEach(function(e){return e.removeEventListener("scroll",n)}),window.removeEventListener("scroll",n))}return function(){for(var e=t;e;)(I(e,"x")||I(e,"y"))&&o.push(e),e=e.parentElement}(),{dispose:function(){e(),o=null},start:function(){o&&(o.forEach(function(e){return e.addEventListener("scroll",n)}),window.addEventListener("scroll",n))},stop:e}}(y,function(){d.layout.invalidateRects(),p()});function p(){null!==u&&(u.invalidateShadow=!0,c=f(u),u.invalidateShadow=!1)}function v(e,t){for(var n=Je(t),o=0;o<n.length;o++)e[o]=n[o];for(var r=0;r<e.length-n.length;r++)e.pop()}function h(){return s}return{element:y,draggables:d.draggables,isDragRelevant:(i=d,a=i.element,l=i.getOptions,function(e,t){var n=l();if(n.shouldAcceptDrop)return n.shouldAcceptDrop(e.getOptions(),t);var o=e.getOptions();return"copy"!==n.behaviour&&N(a,"."+b)!==e.element&&(e.element===a||!(!o.groupName||o.groupName!==n.groupName))}),layout:d.layout,dispose:function(e){var t;m.dispose(),t=e.element,yt.wrapChild&&Array.prototype.forEach.call(t.children,function(e){e.nodeType===Node.ELEMENT_NODE&&L(e,b)&&(t.insertBefore(e.firstElementChild,e),t.removeChild(e))})},prepareDrag:function(e,t){var n=e.element,o=d.draggables;v(o,n),e.layout.invalidateRects(),o.forEach(function(e){return Ue(e,!0,h().animationDuration)}),m.start()},handleDrag:function(e){return c=f(u=e)},handleDrop:function(e){m.stop(),c&&c.dropPlaceholderContainer&&y.removeChild(c.dropPlaceholderContainer),u=null,f=pt(d),g(e,c),c=null},fireRemoveElement:function(){g(u,Object.assign({},c,{addedIndex:null}),!0),c=null},getDragResult:function(){return c},getTranslateCalculator:function(e){return ut(d)(e)},onTranslated:function(){p()},setDraggables:function(){v(d.draggables,y)},getScrollMaxSpeed:function(){return yt.maxScrollSpeed},shouldUseTransformForGhost:function(){return!0===yt.useTransformForGhost},getOptions:h,setOptions:function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];s=!1===t?Object.assign({},S,e):Object.assign({},S,s,e)}}}}var yt=function(e,t){var n=ht(e)(t);return e[r]=n,qe.register(n),{dispose:function(){qe.unregister(n),n.dispose(n)},setOptions:function(e,t){n.setOptions(e,t)}}};function bt(e,t,n){Object.defineProperty(e,n,{set:function(e){t[n]=e},get:function(){return t[n]}})}yt.wrapChild=!0,yt.cancelDrag=function(){qe.cancelDrag()},yt.isDragging=function(){return qe.isDragging()};var wt=function(e,t){return console.warn('default export is deprecated. please use named export "smoothDnD"'),yt(e,t)};wt.cancelDrag=function(){yt.cancelDrag()},wt.isDragging=function(){return yt.isDragging()},bt(wt,yt,"useTransformForGhost"),bt(wt,yt,"maxScrollSpeed"),bt(wt,yt,"wrapChild"),bt(wt,yt,"dropHandler"),e.smoothDnD=yt,e.constants=n,e.dropHandlers=k,e.default=wt,Object.defineProperty(e,"__esModule",{value:!0})});


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/edit-pod-name.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/edit-pod-name.js ***!
  \************************************************************/
/*! exports provided: EditPodName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditPodName", function() { return EditPodName; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _store_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store/constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
/* harmony import */ var _sluggable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sluggable */ "./ui/js/pods-dfv/src/admin/edit-pod/sluggable.js");
 // Pods dependencies


 // WordPress dependencies
// noinspection JSUnresolvedVariable

var __ = wp.i18n.__;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;
var compose = wp.compose.compose;
var EditPodName = compose([withSelect(function (select) {
  return {
    podName: select(_store_constants__WEBPACK_IMPORTED_MODULE_1__["STORE_KEY_EDIT_POD"]).getPodName()
  };
}), withDispatch(function (dispatch) {
  return {
    setPodName: dispatch(_store_constants__WEBPACK_IMPORTED_MODULE_1__["STORE_KEY_EDIT_POD"]).setPodName
  };
})])(function (props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2", null, __('Edit Pod: ', 'pods'), "\xA0"
  /* &nbsp; */
  , react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_sluggable__WEBPACK_IMPORTED_MODULE_2__["PodsDFVSluggable"], {
    value: props.podName,
    updateValue: props.setPodName
  }));
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/edit-pod.js":
/*!*******************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/edit-pod.js ***!
  \*******************************************************/
/*! exports provided: PodsDFVEditPod */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVEditPod", function() { return PodsDFVEditPod; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _store_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store/constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
/* harmony import */ var _handle_submit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./handle-submit */ "./ui/js/pods-dfv/src/admin/edit-pod/handle-submit.js");
/* harmony import */ var _save_status_message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./save-status-message */ "./ui/js/pods-dfv/src/admin/edit-pod/save-status-message.js");
/* harmony import */ var _edit_pod_name__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./edit-pod-name */ "./ui/js/pods-dfv/src/admin/edit-pod/edit-pod-name.js");
/* harmony import */ var _components_tabs_pods_nav_tab__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/tabs/pods-nav-tab */ "./ui/js/pods-dfv/src/components/tabs/pods-nav-tab.js");
/* harmony import */ var _main_tabs_active_tab_content__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./main-tabs/active-tab-content */ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/active-tab-content.js");
/* harmony import */ var _postbox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./postbox */ "./ui/js/pods-dfv/src/admin/edit-pod/postbox.js");
 // WordPress dependencies

var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;
var compose = wp.compose.compose; // Pods dependencies








var StoreSubscribe = compose([withSelect(function (select) {
  var storeSelect = select(_store_constants__WEBPACK_IMPORTED_MODULE_1__["STORE_KEY_EDIT_POD"]);
  return {
    tabs: storeSelect.getTabs(),
    activeTab: storeSelect.getActiveTab(),
    tabOptions: storeSelect.getTabOptions(storeSelect.getActiveTab()),
    groups: storeSelect.getGroups(),
    getOptionValue: storeSelect.getOptionValue,
    getGroupFields: storeSelect.getGroupFields
  };
}), withDispatch(function (dispatch) {
  var storeDispatch = dispatch(_store_constants__WEBPACK_IMPORTED_MODULE_1__["STORE_KEY_EDIT_POD"]);
  return {
    setActiveTab: storeDispatch.setActiveTab,
    setOptionValue: storeDispatch.setOptionValue,
    reorderGroupItem: storeDispatch.reorderGroupItem
  };
})]);
var PodsDFVEditPod = StoreSubscribe(function (props) {
  //--! Todo: debugging only
  window.select = wp.data.select('pods/edit-pod');
  window.dispatch = wp.data.dispatch('pods/edit-pod'); //--! Todo: debugging only

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form", {
    onSubmit: function onSubmit(e) {
      return Object(_handle_submit__WEBPACK_IMPORTED_MODULE_2__["handleSubmit"])(e, props);
    }
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_edit_pod_name__WEBPACK_IMPORTED_MODULE_4__["EditPodName"], null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_save_status_message__WEBPACK_IMPORTED_MODULE_3__["SaveStatusMessage"], null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_tabs_pods_nav_tab__WEBPACK_IMPORTED_MODULE_5__["PodsNavTab"], {
    tabs: props.tabs,
    activeTab: props.activeTab,
    setActiveTab: props.setActiveTab
  })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "poststuff"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "post-body",
    className: "columns-2"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_main_tabs_active_tab_content__WEBPACK_IMPORTED_MODULE_6__["ActiveTabContent"], {
    groups: props.groups,
    getGroupFields: props.getGroupFields,
    reorderGroupItem: props.reorderGroupItem,
    activeTab: props.activeTab,
    tabOptions: props.tabOptions,
    getOptionValue: props.getOptionValue,
    setOptionValue: props.setOptionValue
  }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_postbox__WEBPACK_IMPORTED_MODULE_7__["Postbox"], null))));
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/handle-submit.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/handle-submit.js ***!
  \************************************************************/
/*! exports provided: handleSubmit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handleSubmit", function() { return handleSubmit; });
var AJAX_ACTION = 'pods_admin_proto';
var handleSubmit = function handleSubmit(e, props) {
  e.preventDefault();
  var requestData = {
    'id': props.podMeta.id,
    'name': props.podMeta.name,
    'old_name': props.podMeta.name,
    '_wpnonce': props.nonce,
    'fields': props.fields
  };
  /*
  props.setSaveStatus( saveStatuses.SAVING );
  fetch( `${ajaxurl}?pods_ajax=1&action=${AJAX_ACTION}`, {
  	method: 'POST',
  	headers: {
  		'Accept': 'application/json',
  		'Content-Type': 'application/json'
  	},
  	body: JSON.stringify( requestData )
  } )
  .then(
  	( result ) => {
  		console.log( result );
  		props.setSaveStatus( saveStatuses.SAVE_SUCCESS );
  	},
  	( error ) => {
  		console.log( error );
  		props.setSaveStatus( saveStatuses.SAVE_ERROR );
  	}
  );
   */
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/active-tab-content.js":
/*!***************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/active-tab-content.js ***!
  \***************************************************************************/
/*! exports provided: ActiveTabContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActiveTabContent", function() { return ActiveTabContent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dynamic_tab_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dynamic-tab-content */ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/dynamic-tab-content.js");
/* harmony import */ var _field_groups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./field-groups */ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.js");

 // Pods dependencies



/**
 * ActiveTabContent
 *
 * Display the content for the active tab, manage-fields is treated special
 */

var ActiveTabContent = function ActiveTabContent(props) {
  var Component;

  if ('manage-fields' === props.activeTab) {
    Component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_field_groups__WEBPACK_IMPORTED_MODULE_3__["FieldGroups"], {
      groups: props.groups,
      getGroupFields: props.getGroupFields,
      reorderGroupItem: props.reorderGroupItem
    });
  } else {
    Component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_dynamic_tab_content__WEBPACK_IMPORTED_MODULE_2__["DynamicTabContent"], {
      tabOptions: props.tabOptions,
      getOptionValue: props.getOptionValue,
      setOptionValue: props.setOptionValue
    });
  }

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "post-body-content",
    className: "pods-nav-tab-group pods-manage-field"
  }, Component);
};
ActiveTabContent.propTypes = {
  groups: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,
  getGroupFields: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  reorderGroupItem: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  activeTab: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  tabOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,
  getOptionValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  setOptionValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/dynamic-tab-content.js":
/*!****************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/dynamic-tab-content.js ***!
  \****************************************************************************/
/*! exports provided: DynamicTabContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicTabContent", function() { return DynamicTabContent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_field_option__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components/field-option */ "./ui/js/pods-dfv/src/components/field-option.js");


 // WordPress Dependencies
// noinspection JSUnresolvedVariable

var _wp$i18n = wp.i18n,
    sprintf = _wp$i18n.sprintf,
    __ = _wp$i18n.__; // Pod dependencies



var MISSING = __('[MISSING DEFAULT]', 'pods');
/**
 * option data format
 * {
 *     optionName: {
 *         // default may get removed... merge it into value on the server side,
 *         // it's a one-time thing
 *         default: '',
 *         depends-on: { optionName: dependentValue },
 *         help: 'help',
 *         label: 'XXX %s',
 *         label_param: 'optionName',
 *         param_default: 'Item',
 *         type: 'text, boolean, number, pick, file'
 *         value: ''
 *     }
 * }
 */

/**
 * DynamicTabContent
 */


var DynamicTabContent = function DynamicTabContent(props) {
  var tabOptions = props.tabOptions,
      getOptionValue = props.getOptionValue,
      setOptionValue = props.setOptionValue;

  var getLabelValue = function getLabelValue(labelFormat, paramOption, paramDefault) {
    if (!paramOption) {
      return labelFormat;
    }

    var param = getOptionValue(paramOption) || paramDefault || MISSING;
    return sprintf(labelFormat, param);
  };

  return tabOptions.map(function (option) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(DependentFieldOption, {
      key: option.name,
      fieldType: option.type,
      name: option.name,
      label: getLabelValue(option.label, option.label_param, option.param_default),
      value: option.value || '',
      dependents: option['depends-on'],
      helpText: option.help,
      getOptionValue: getOptionValue,
      setOptionValue: setOptionValue
    });
  });
};
DynamicTabContent.propTypes = {
  tabOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,
  getOptionValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  setOptionValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};
/**
 * DependentFieldOption
 *
 * Conditionally display a FieldOption (depends-on support)
 */

var DependentFieldOption = function DependentFieldOption(props) {
  var fieldType = props.fieldType,
      name = props.name,
      label = props.label,
      value = props.value,
      dependents = props.dependents;
  var getOptionValue = props.getOptionValue,
      setOptionValue = props.setOptionValue;

  var handleInputChange = function handleInputChange(e) {
    var target = e.target;
    var value = 'checkbox' === target.type ? target.checked : target.value;
    setOptionValue(name, value);
  };

  if (!meetsDependencies(dependents, getOptionValue)) {
    return null;
  }

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_field_option__WEBPACK_IMPORTED_MODULE_3__["PodsFieldOption"], {
    fieldType: fieldType,
    name: name,
    value: value,
    label: label,
    onChange: handleInputChange,
    helpText: props.helpText
  });
};

DependentFieldOption.propTypes = {
  fieldType: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  name: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any.isRequired,
  label: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  dependents: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
  helpText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,
  getOptionValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  setOptionValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};
/**
 *
 * @param {object|object[]} dependencies Dictionary in the form optionName: requiredVal
 * @param {function} getOptionValue Selector to lookup option values by name
 *
 * @return {boolean} Whether or not the specified dependencies are met
 */

var meetsDependencies = function meetsDependencies(dependencies, getOptionValue) {
  var retVal = true;

  if (dependencies && Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isObject"])(dependencies)) {
    Object(lodash__WEBPACK_IMPORTED_MODULE_2__["each"])(dependencies, function (dependentValue, dependentOptionName) {
      // Loose comparison required, values may be 1/0 expecting true/false
      // noinspection EqualityComparisonWithCoercionJS
      if (getOptionValue(dependentOptionName) != dependentValue) {
        retVal = false;
        return false; // Early-exits the loop only, not the function
      }
    });
  }

  return retVal;
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.js":
/*!*********************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.js ***!
  \*********************************************************************/
/*! exports provided: FieldGroups */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldGroups", function() { return FieldGroups; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-smooth-dnd */ "./node_modules/react-smooth-dnd/dist/index.js");
/* harmony import */ var react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _field_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./field-list */ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-list.js");
/* harmony import */ var _field_groups_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./field-groups.scss */ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.scss");
/* harmony import */ var _field_groups_scss__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_field_groups_scss__WEBPACK_IMPORTED_MODULE_4__);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






var useState = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState;
var Dashicon = wp.components.Dashicon;
/**
 *
 */

var FieldGroups = function FieldGroups(props) {
  var handleGroupDrop = function handleGroupDrop(dragResult) {
    var removedIndex = dragResult.removedIndex,
        addedIndex = dragResult.addedIndex,
        payload = dragResult.payload;
    props.reorderGroupItem(removedIndex, addedIndex);
  };

  var containerProps = {
    groupName: 'groups',
    lockAxis: 'y',
    dragHandleSelector: '.pods-field-group--handle',
    dragClass: 'opacity-ghost',
    onDrop: handleGroupDrop
  }; // noinspection RequiredAttributes

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "field-groups"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__["Container"], containerProps, props.groups.map(function (thisGroup) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__["Draggable"], {
      key: thisGroup.name
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FieldGroup, {
      groupName: thisGroup.name,
      getGroupFields: props.getGroupFields
    }));
  })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-button-group--container"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "#"
  }, "Add Group"), " ", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "#"
  }, "Add Field")));
};
FieldGroups.propTypes = {
  groups: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired,
  getGroupFields: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  reorderGroupItem: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};
/**
 *
 */

var FieldGroup = function FieldGroup(props) {
  var Toggle;
  var groupName = props.groupName,
      getGroupFields = props.getGroupFields;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var toggleExpanded = function toggleExpanded() {
    setExpanded(!expanded);
  };

  if (expanded) {
    Toggle = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
      icon: "arrow-up"
    });
  } else {
    Toggle = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
      icon: "arrow-down"
    });
  } // noinspection RequiredAttributes


  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-group-wrapper"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-group--title",
    onClick: toggleExpanded
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-group--handle"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
    icon: "menu"
  })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-group--name"
  }, groupName), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-group--manage"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-group--toggle"
  }, Toggle))), expanded && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_field_list__WEBPACK_IMPORTED_MODULE_3__["FieldList"], {
    fields: getGroupFields(groupName)
  }));
};

FieldGroup.propTypes = {
  groupName: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  getGroupFields: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.scss":
/*!***********************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./field-groups.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-groups.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-list.js":
/*!*******************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/field-list.js ***!
  \*******************************************************************/
/*! exports provided: FieldList, FieldListItem, FieldHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldList", function() { return FieldList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldListItem", function() { return FieldListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FieldHeader", function() { return FieldHeader; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-smooth-dnd */ "./node_modules/react-smooth-dnd/dist/index.js");
/* harmony import */ var react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _manage_fields_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./manage-fields.scss */ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/manage-fields.scss");
/* harmony import */ var _manage_fields_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_manage_fields_scss__WEBPACK_IMPORTED_MODULE_3__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }




 // WordPress dependencies
// noinspection JSUnresolvedVariable

var __ = wp.i18n.__;
var Dashicon = wp.components.Dashicon;
var FieldList = function FieldList(props) {
  var containerProps = {
    groupName: 'fields',
    lockAxis: 'y',
    dragHandleSelector: '.pods-field--handle'
  };

  var handleFieldDrop = function handleFieldDrop(e) {
    console.log(e);
  };

  if (0 === props.fields.length) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__["Container"], _extends({}, containerProps, {
      onDrop: handleFieldDrop
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__["Draggable"], null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "pods-manage-fields no-fields"
    }, __('There are no fields in this group', 'pods'))));
  } // noinspection RequiredAttributes


  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-manage-fields"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FieldHeader, null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__["Container"], _extends({}, containerProps, {
    onDrop: handleFieldDrop
  }), props.fields.map(function (thisField) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_smooth_dnd__WEBPACK_IMPORTED_MODULE_2__["Draggable"], {
      key: thisField.id
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FieldListItem, {
      id: thisField.id,
      fieldLabel: thisField.label,
      fieldName: thisField.name,
      required: thisField.required,
      type: thisField.type
    }));
  })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FieldHeader, null));
};
FieldList.propTypes = {
  fields: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array.isRequired
};
/**
 *
 */

var FieldListItem = function FieldListItem(props) {
  var id = props.id,
      fieldName = props.fieldName,
      fieldLabel = props.fieldLabel,
      required = props.required,
      type = props.type;
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--wrapper"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field pods-field--handle"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
    icon: "menu"
  })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field pods-field--label"
  }, fieldLabel, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
    className: required && 'pods-field--required'
  }, "*"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--id"
  }, "[id = ", id, "]")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field pods-field--name"
  }, fieldName), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field pods-field--type"
  }, type, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--id"
  }, "[type = [STILL NEED THIS]]")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field pods-field--actions"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
    icon: "edit"
  }), " ", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
    icon: "admin-page"
  }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
    icon: "trash"
  })));
};
FieldListItem.propTypes = {
  id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number.isRequired,
  fieldName: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  fieldLabel: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  required: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  type: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired
};
/**
 *
 */

var FieldHeader = function FieldHeader() {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--wrapper-labels"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--wrapper-label-items"
  }, "Label"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--wrapper-label-items"
  }, "Name"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field--wrapper-label-items"
  }, "Field Type"));
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/manage-fields.scss":
/*!************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/manage-fields.scss ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./manage-fields.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./ui/js/pods-dfv/src/admin/edit-pod/main-tabs/manage-fields.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/postbox.js":
/*!******************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/postbox.js ***!
  \******************************************************/
/*! exports provided: Postbox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Postbox", function() { return Postbox; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _store_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store/constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
/* eslint-disable react/prop-types */


var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var Postbox = withSelect(function (select) {
  return {
    isSaving: select(_store_constants__WEBPACK_IMPORTED_MODULE_1__["STORE_KEY_EDIT_POD"]).isSaving()
  };
})(function (props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "postbox-container-1",
    className: "postbox-container pods_floatmenu"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "side-info-field",
    className: "inner-sidebar"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "side-sortables"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "submitdiv",
    className: "postbox pods-no-toggle"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, __('Manage', 'pods'), "\xA0"
  /* &nbsp; */
  , react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("small", null, "(", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "/wp-admin/admin.php?page=pods&action=manage"
  }, __('« Back to Manage', 'pods')), ")"))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "inside"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "submitbox",
    id: "submitpost"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "major-publishing-actions"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "delete-action"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "#not-implemented",
    className: "submitdelete deletion pods-confirm"
  }, __('Delete Pod', 'pods'))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "publishing-action"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Spinner, {
    isSaving: props.isSaving
  }), "\xA0"
  /* &nbsp; */
  , react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    className: "button-primary",
    type: "submit"
  }, __('Save Pod', 'pods'))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "clear"
  }))))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-submittable-fields"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    id: "side-sortables",
    className: "meta-box-sortables"
  })))));
});

var Spinner = function Spinner(props) {
  if (props.isSaving) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("img", {
      src: "/wp-admin/images/wpspin_light.gif",
      alt: ""
    });
  }

  return null;
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/save-status-message.js":
/*!******************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/save-status-message.js ***!
  \******************************************************************/
/*! exports provided: SaveStatusMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveStatusMessage", function() { return SaveStatusMessage; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _store_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store/constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
/* eslint-disable react/prop-types */


/* WordPress dependencies */
// noinspection JSUnresolvedVariable

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var SaveStatusMessage = withSelect(function (select) {
  return {
    saveStatus: select(_store_constants__WEBPACK_IMPORTED_MODULE_1__["STORE_KEY_EDIT_POD"]).getSaveStatus()
  };
})(function (props) {
  switch (props.saveStatus) {
    case _store_constants__WEBPACK_IMPORTED_MODULE_1__["uiConstants"].saveStatuses.SAVING:
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        id: "message",
        className: "notice notice-warning"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("b", null, __('Saving Pod...', 'pods'))));

    case _store_constants__WEBPACK_IMPORTED_MODULE_1__["uiConstants"].saveStatuses.SAVE_SUCCESS:
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        id: "message",
        className: "updated fade"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong", null, __('Success!', 'pods')), "\xA0"
      /* &nbsp; */
      , __('Pod saved successfully.', 'pods')));

    case _store_constants__WEBPACK_IMPORTED_MODULE_1__["uiConstants"].saveStatuses.SAVE_ERROR:
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        id: "message",
        className: "notice error"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("b", null, __('Save Error', 'pods'))));

    default:
      return null;
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/sluggable.js":
/*!********************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/sluggable.js ***!
  \********************************************************/
/*! exports provided: PodsDFVSluggable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVSluggable", function() { return PodsDFVSluggable; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



var useState = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState;
/* WordPress dependencies */
// noinspection JSUnresolvedVariable

var __ = wp.i18n.__;
var PodsDFVSluggable = function PodsDFVSluggable(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      editing = _useState2[0],
      setEditing = _useState2[1];

  var _useState3 = useState(props.value),
      _useState4 = _slicedToArray(_useState3, 2),
      localValue = _useState4[0],
      setLocalValue = _useState4[1];

  var handleValueChange = function handleValueChange(newValue) {
    setLocalValue(newValue);
  };

  var handleEditClick = function handleEditClick() {
    setEditing(true);
  };

  var handleOkClick = function handleOkClick() {
    setEditing(false);
    props.updateValue(localValue);
  };

  var handleCancelClick = function handleCancelClick(e) {
    e.preventDefault();
    setEditing(false);
    setLocalValue(props.value);
  };

  if (!editing) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(NotEditing, {
      value: props.value,
      handleEditClick: handleEditClick
    });
  } else {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Editing, {
      value: localValue,
      handleValueChange: handleValueChange,
      handleOkClick: handleOkClick,
      handleCancelClick: handleCancelClick
    });
  }
};
PodsDFVSluggable.propTypes = {
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  updateValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};

var NotEditing = function NotEditing(props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("em", {
    onClick: props.handleEditClick,
    style: {
      cursor: 'pointer'
    }
  }, props.value), "\xA0"
  /* &nbsp; */
  , react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "button",
    className: "edit-slug-button button",
    value: __('Edit', 'pods'),
    onClick: props.handleEditClick
  }));
};

NotEditing.propTypes = {
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  handleEditClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};

var Editing = function Editing(props) {
  var handleFocus = function handleFocus(e) {
    return e.target.select();
  };

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "text",
    autoFocus: true,
    id: "pods-form-ui-name",
    name: "name",
    className: "pods-form-ui-field pods-form-ui-field-type-text pods-form-ui-field-name-name",
    value: props.value,
    onChange: function onChange(e) {
      return props.handleValueChange(e.target.value);
    },
    onFocus: handleFocus,
    maxLength: "46",
    size: "25"
  }), "\xA0"
  /* &nbsp; */
  , react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "button",
    className: "save-button button",
    value: __('OK', 'pods'),
    onClick: props.handleOkClick
  }), "\xA0"
  /* &nbsp; */
  , react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    className: "cancel",
    onClick: props.handleCancelClick
  }, __('Cancel', 'pods')));
};

Editing.propTypes = {
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  handleValueChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  handleOkClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  handleCancelClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/store/actions.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/store/actions.js ***!
  \************************************************************/
/*! exports provided: setActiveTab, setSaveStatus, setOptionValue, setOptionItemValue, reorderGroupItem, setPodName, setPodMetaValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setActiveTab", function() { return setActiveTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSaveStatus", function() { return setSaveStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOptionValue", function() { return setOptionValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOptionItemValue", function() { return setOptionItemValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reorderGroupItem", function() { return reorderGroupItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPodName", function() { return setPodName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPodMetaValue", function() { return setPodMetaValue; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
 // UI

var setActiveTab = function setActiveTab(activeTab) {
  return {
    type: _constants__WEBPACK_IMPORTED_MODULE_0__["uiConstants"].actions.SET_ACTIVE_TAB,
    activeTab: activeTab
  };
};
var setSaveStatus = function setSaveStatus(saveStatus) {
  return {
    type: _constants__WEBPACK_IMPORTED_MODULE_0__["uiConstants"].actions.SET_SAVE_STATUS,
    saveStatus: saveStatus
  };
}; // Options

var setOptionValue = function setOptionValue(name, value) {
  return setOptionItemValue(name, 'value', value);
};
var setOptionItemValue = function setOptionItemValue(optionName, itemName, itemValue) {
  return {
    type: _constants__WEBPACK_IMPORTED_MODULE_0__["optionConstants"].actions.SET_OPTION_ITEM_VALUE,
    optionName: optionName,
    itemName: itemName,
    itemValue: itemValue
  };
}; // Groups

var reorderGroupItem = function reorderGroupItem(oldIndex, newIndex) {
  return {
    type: _constants__WEBPACK_IMPORTED_MODULE_0__["groupConstants"].actions.REORDER_GROUP_ITEM,
    oldIndex: oldIndex,
    newIndex: newIndex
  };
}; // Pod meta

var setPodName = function setPodName(name) {
  return {
    type: _constants__WEBPACK_IMPORTED_MODULE_0__["podMetaConstants"].actions.SET_POD_NAME,
    name: name
  };
};
var setPodMetaValue = function setPodMetaValue(key, value) {
  return {
    type: _constants__WEBPACK_IMPORTED_MODULE_0__["podMetaConstants"].actions.SET_POD_META_VALUE,
    key: key,
    value: value
  };
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js":
/*!**************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js ***!
  \**************************************************************/
/*! exports provided: STORE_KEY_EDIT_POD, uiConstants, optionConstants, groupConstants, podMetaConstants, initialUIState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STORE_KEY_EDIT_POD", function() { return STORE_KEY_EDIT_POD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uiConstants", function() { return uiConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionConstants", function() { return optionConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupConstants", function() { return groupConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "podMetaConstants", function() { return podMetaConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initialUIState", function() { return initialUIState; });
var STORE_KEY_EDIT_POD = 'pods/edit-pod';
var uiConstants = {
  actions: {
    SET_ACTIVE_TAB: 'SET_ACTIVE_TAB',
    SET_SAVE_STATUS: 'SET_SAVE_STATUS'
  },
  tabNames: {
    MANAGE_FIELDS: 'manage-fields',
    LABELS: 'labels',
    ADMIN_UI: 'admin-ui',
    ADVANCED_OPTIONS: 'advanced',
    AUTO_TEMPLATE_OPTIONS: 'pods-pfat',
    REST_API: 'rest-api'
  },
  saveStatuses: {
    NONE: '',
    SAVING: 'SAVING',
    SAVE_SUCCESS: 'SAVE_SUCCESS',
    SAVE_ERROR: 'SAVE_ERROR'
  }
};
var optionConstants = {
  actions: {
    SET_OPTION_ITEM_VALUE: 'SET_OPTION_ITEM_VALUE'
  }
};
var groupConstants = {
  actions: {
    REORDER_GROUP_ITEM: 'REORDER_GROUP_ITEM'
  }
};
var podMetaConstants = {
  actions: {
    SET_POD_NAME: 'SET_POD_NAME',
    SET_POD_META_VALUE: 'SET_POD_META_VALUE'
  }
};
var initialUIState = {
  activeTab: uiConstants.tabNames.MANAGE_FIELDS,
  saveStatus: uiConstants.saveStatuses.NONE
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/store/reducer.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/store/reducer.js ***!
  \************************************************************/
/*! exports provided: setObjectValue, ui, groups, options, podMeta, fields, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setObjectValue", function() { return setObjectValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ui", function() { return ui; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groups", function() { return groups; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "options", function() { return options; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "podMeta", function() { return podMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fields", function() { return fields; });
/* harmony import */ var _state_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state-paths */ "./ui/js/pods-dfv/src/admin/edit-pod/store/state-paths.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var combineReducers = wp.data.combineReducers; // Helper function

var setObjectValue = function setObjectValue(object, key, value) {
  return _objectSpread({}, object, _defineProperty({}, key, value));
}; // UI

var ui = function ui() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants__WEBPACK_IMPORTED_MODULE_1__["initialUIState"];
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actions = _constants__WEBPACK_IMPORTED_MODULE_1__["uiConstants"].actions,
      saveStatuses = _constants__WEBPACK_IMPORTED_MODULE_1__["uiConstants"].saveStatuses;

  switch (action.type) {
    case actions.SET_ACTIVE_TAB:
      // Use the default if the tab name doesn't exist
      var newTab = _constants__WEBPACK_IMPORTED_MODULE_1__["initialUIState"].activeTab;
      var tabIndex = _state_paths__WEBPACK_IMPORTED_MODULE_0__["TAB_LIST"].tailGetFrom(state).indexOf(action.activeTab);

      if (-1 !== tabIndex) {
        newTab = action.activeTab;
      }

      return _objectSpread({}, state, {
        activeTab: newTab
      });

    case actions.SET_SAVE_STATUS:
      var newStatus = action.saveStatus;

      if (!Object.values(saveStatuses).includes(newStatus)) {
        newStatus = _constants__WEBPACK_IMPORTED_MODULE_1__["initialUIState"].saveStatus;
      }

      return _objectSpread({}, state, {
        saveStatus: newStatus
      });

    default:
      return state;
  }
};
var groups = function groups() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actions = _constants__WEBPACK_IMPORTED_MODULE_1__["groupConstants"].actions;

  if (actions.REORDER_GROUP_ITEM === action.type) {
    var oldIndex = action.oldIndex,
        newIndex = action.newIndex;

    if (null === oldIndex || null === newIndex || oldIndex === newIndex) {
      return state;
    }

    var newGroupList = _toConsumableArray(_state_paths__WEBPACK_IMPORTED_MODULE_0__["GROUP_LIST"].tailGetFrom(state));

    newGroupList.splice(newIndex, 0, newGroupList.splice(oldIndex, 1)[0]);
    return _objectSpread({}, state, _defineProperty({}, _state_paths__WEBPACK_IMPORTED_MODULE_0__["GROUP_LIST"].tailPath, newGroupList));
  }

  return state;
};
var options = function options() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actions = _constants__WEBPACK_IMPORTED_MODULE_1__["optionConstants"].actions;

  if (actions.SET_OPTION_ITEM_VALUE === action.type) {
    var optionName = action.optionName,
        itemName = action.itemName,
        itemValue = action.itemValue;
    return _objectSpread({}, state, _defineProperty({}, optionName, setObjectValue(state[optionName], itemName, itemValue)));
  } else {
    return state;
  }
}; // Pod meta

var podMeta = function podMeta() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actions = _constants__WEBPACK_IMPORTED_MODULE_1__["podMetaConstants"].actions;

  switch (action.type) {
    case actions.SET_POD_NAME:
      return _objectSpread({}, state, {
        name: action.name
      });

    case actions.SET_POD_META_VALUE:
      return _objectSpread({}, state, _defineProperty({}, action.key, action.value));

    default:
      return state;
  }
}; // Fields

var fields = function fields() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return state;
};
/* harmony default export */ __webpack_exports__["default"] = (combineReducers({
  ui: ui,
  podMeta: podMeta,
  options: options,
  groups: groups,
  fields: fields
}));

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/store/selectors.js":
/*!**************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/store/selectors.js ***!
  \**************************************************************/
/*! exports provided: getState, getPodName, getPodMetaValue, getActiveTab, getTab, getTabList, getTabs, getTabOptionList, getTabOptions, getSaveStatus, isSaving, getOption, getOptionItemValue, getOptionValue, getGroupList, getGroup, getGroups, getFieldList, getGroupFields, getFields, getField */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getState", function() { return getState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPodName", function() { return getPodName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPodMetaValue", function() { return getPodMetaValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getActiveTab", function() { return getActiveTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTab", function() { return getTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTabList", function() { return getTabList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTabs", function() { return getTabs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTabOptionList", function() { return getTabOptionList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTabOptions", function() { return getTabOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSaveStatus", function() { return getSaveStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSaving", function() { return isSaving; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOption", function() { return getOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOptionItemValue", function() { return getOptionItemValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOptionValue", function() { return getOptionValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroupList", function() { return getGroupList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroup", function() { return getGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroups", function() { return getGroups; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFieldList", function() { return getFieldList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroupFields", function() { return getGroupFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFields", function() { return getFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getField", function() { return getField; });
/* harmony import */ var _state_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state-paths */ "./ui/js/pods-dfv/src/admin/edit-pod/store/state-paths.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");

 // Everything

var getState = function getState(state) {
  return state;
}; //-- Pod meta

var getPodName = function getPodName(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["POD_NAME"].getFrom(state);
};
var getPodMetaValue = function getPodMetaValue(state, key) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["POD_META"].getFrom(state)[key];
}; //-- Tabs

var getActiveTab = function getActiveTab(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["ACTIVE_TAB"].getFrom(state);
};
var getTab = function getTab(state, tabName) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["TABS_BY_NAME"].getFrom(state)[tabName];
};
var getTabList = function getTabList(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["TAB_LIST"].getFrom(state);
};
var getTabs = function getTabs(state) {
  return getTabList(state).map(function (tabName) {
    return getTab(state, tabName);
  });
};
var getTabOptionList = function getTabOptionList(state, tabName) {
  return getTab(state, tabName)[_state_paths__WEBPACK_IMPORTED_MODULE_0__["TAB_OPTION_LIST"]];
};
var getTabOptions = function getTabOptions(state, tabName) {
  return getTabOptionList(state, tabName).map(function (optionName) {
    return getOption(state, optionName);
  });
}; //-- Save status

var getSaveStatus = function getSaveStatus(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["SAVE_STATUS"].getFrom(state);
};
var isSaving = function isSaving(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["SAVE_STATUS"].getFrom(state) === _constants__WEBPACK_IMPORTED_MODULE_1__["uiConstants"].saveStatuses.SAVING;
}; //-- Options

var getOption = function getOption(state, optionName) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["OPTIONS"].getFrom(state)[optionName];
};
var getOptionItemValue = function getOptionItemValue(state, optionName, itemName) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["OPTIONS"].getFrom(state)[optionName][itemName];
};
var getOptionValue = function getOptionValue(state, optionName) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["OPTIONS"].getFrom(state)[optionName].value;
}; //-- Groups

var getGroupList = function getGroupList(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["GROUP_LIST"].getFrom(state);
};
var getGroup = function getGroup(state, groupName) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["GROUPS_BY_NAME"].getFrom(state)[groupName];
};
var getGroups = function getGroups(state) {
  return getGroupList(state).map(function (groupName) {
    return getGroup(state, groupName);
  });
};
var getFieldList = function getFieldList(state, groupName) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["GROUP_FIELD_LIST"].getFrom(state)[groupName];
};
var getGroupFields = function getGroupFields(state, groupName) {
  return getFieldList(state, groupName).map(function (fieldName) {
    return getField(state, fieldName);
  });
}; //-- Fields

var getFields = function getFields(state) {
  return _state_paths__WEBPACK_IMPORTED_MODULE_0__["FIELDS"].getFrom(state);
};
var getField = function getField(state, fieldName) {
  return getFields(state)[fieldName];
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/store/state-paths.js":
/*!****************************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/store/state-paths.js ***!
  \****************************************************************/
/*! exports provided: createStatePath, POD_META, POD_NAME, POD_ID, FIELDS, GROUPS, GROUPS_BY_NAME, GROUP_LIST, GROUP_FIELD_LIST, UI, ACTIVE_TAB, SAVE_STATUS, TABS, TAB_LIST, TABS_BY_NAME, OPTIONS, TAB_OPTION_LIST */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createStatePath", function() { return createStatePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POD_META", function() { return POD_META; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POD_NAME", function() { return POD_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POD_ID", function() { return POD_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIELDS", function() { return FIELDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUPS", function() { return GROUPS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUPS_BY_NAME", function() { return GROUPS_BY_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUP_LIST", function() { return GROUP_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUP_FIELD_LIST", function() { return GROUP_FIELD_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UI", function() { return UI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ACTIVE_TAB", function() { return ACTIVE_TAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SAVE_STATUS", function() { return SAVE_STATUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TABS", function() { return TABS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAB_LIST", function() { return TAB_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TABS_BY_NAME", function() { return TABS_BY_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPTIONS", function() { return OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAB_OPTION_LIST", function() { return TAB_OPTION_LIST; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var tailPath = function tailPath(dotPath) {
  return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["tail"])(dotPath.split('.')).join('.');
};

var _createTree = function createTree(value, dotPath) {
  return dotPath.split('.').reduceRight(function (acc, currentValue) {
    return _defineProperty({}, currentValue, acc);
  }, value);
};

var _getFrom = function getFrom(state, dotPath) {
  return dotPath.split('.').reduce(function (value, el) {
    return value[el];
  }, state);
};

var createStatePath = function createStatePath(path) {
  return {
    // path 'ui.tabs.tabList', tailPath: 'tabs.tabList'
    path: path,
    tailPath: tailPath(path),
    getFrom: function getFrom(state) {
      var dotPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : path;
      return _getFrom(state, dotPath);
    },
    tailGetFrom: function tailGetFrom(state) {
      return _getFrom(state, tailPath(path));
    },
    createTree: function createTree(value) {
      var dotPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : path;
      return _createTree(value, dotPath);
    },
    tailCreateTree: function tailCreateTree(value) {
      return _createTree(value, tailPath(path));
    }
  };
};
var POD_META = createStatePath('podMeta');
var POD_NAME = createStatePath("".concat(POD_META.path, ".name"));
var POD_ID = createStatePath("".concat(POD_META.path, ".id"));
var FIELDS = createStatePath('fields');
var GROUPS = createStatePath('groups');
var GROUPS_BY_NAME = createStatePath("".concat(GROUPS.path, ".byName")); // Ordered list of group names as an array: [ 'group1', 'group2', ... ]

var GROUP_LIST = createStatePath("".concat(GROUPS.path, ".groupList")); // One to many relationship:
// { 'group1': [ 'field1', 'field2', ...], 'group2': [...] }

var GROUP_FIELD_LIST = createStatePath("".concat(GROUPS.path, ".groupFieldList"));
var UI = createStatePath('ui');
var ACTIVE_TAB = createStatePath("".concat(UI.path, ".activeTab"));
var SAVE_STATUS = createStatePath("".concat(UI.path, ".saveStatus"));
var TABS = createStatePath("".concat(UI.path, ".tabs")); // Ordered list of tab names as an array: [ 'tab1', 'tab2', ... ]

var TAB_LIST = createStatePath("".concat(TABS.path, ".tabList")); // Tab objects keyed by tab name:
// { tab1: {tab object}, tab2: {tab object}, ...}

var TABS_BY_NAME = createStatePath("".concat(TABS.path, ".byName")); // Pod option list keyed by option name:
// { can_export: {object}, show_ui: {object}, etc }

var OPTIONS = createStatePath('options'); // Ordered list of option names for this tab as an array:
// [ 'option1', 'option2', ...]
// Stored in the tab objects in TABS_BY_NAME

var TAB_OPTION_LIST = 'optionList';

/***/ }),

/***/ "./ui/js/pods-dfv/src/admin/edit-pod/store/store.js":
/*!**********************************************************!*\
  !*** ./ui/js/pods-dfv/src/admin/edit-pod/store/store.js ***!
  \**********************************************************/
/*! exports provided: initStore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initStore", function() { return initStore; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _state_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state-paths */ "./ui/js/pods-dfv/src/admin/edit-pod/store/state-paths.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./ui/js/pods-dfv/src/admin/edit-pod/store/constants.js");
/* harmony import */ var _reducer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reducer */ "./ui/js/pods-dfv/src/admin/edit-pod/store/reducer.js");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./selectors */ "./ui/js/pods-dfv/src/admin/edit-pod/store/selectors.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions */ "./ui/js/pods-dfv/src/admin/edit-pod/store/actions.js");






var registerStore = wp.data.registerStore;
var initStore = function initStore(props) {
  var initialState = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["merge"])(_state_paths__WEBPACK_IMPORTED_MODULE_1__["UI"].createTree(_constants__WEBPACK_IMPORTED_MODULE_2__["initialUIState"]), props);
  return registerStore(_constants__WEBPACK_IMPORTED_MODULE_2__["STORE_KEY_EDIT_POD"], {
    reducer: _reducer__WEBPACK_IMPORTED_MODULE_3__["default"],
    selectors: _selectors__WEBPACK_IMPORTED_MODULE_4__,
    actions: _actions__WEBPACK_IMPORTED_MODULE_5__,
    initialState: initialState
  });
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/components/base-input.js":
/*!*****************************************************!*\
  !*** ./ui/js/pods-dfv/src/components/base-input.js ***!
  \*****************************************************/
/*! exports provided: PodsDFVBaseInput */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVBaseInput", function() { return PodsDFVBaseInput; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable react/prop-types */

var PodsDFVBaseInput = function PodsDFVBaseInput(props) {
  // Default implementation if onChange is omitted from props
  function handleChange(event) {
    props.setValue(event.target.value);
  } // noinspection JSUnresolvedVariable


  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: props.type,
    name: props.htmlAttr.name,
    id: props.htmlAttr.id,
    className: props.className,
    "data-name-clean": props.htmlAttr.name_clean,
    placeholder: props.fieldConfig.text_placeholder,
    maxLength: props.fieldConfig.text_max_length,
    value: props.value,
    readOnly: !!props.fieldConfig.readonly,
    onChange: props.onChange || handleChange,
    onBlur: props.onBlur,
    min: props.min,
    max: props.max
  });
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/components/field-container.js":
/*!**********************************************************!*\
  !*** ./ui/js/pods-dfv/src/components/field-container.js ***!
  \**********************************************************/
/*! exports provided: PodsDFVFieldContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVFieldContainer", function() { return PodsDFVFieldContainer; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _validation_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validation-messages */ "./ui/js/pods-dfv/src/components/validation-messages.js");
/* harmony import */ var _validation_validation_rules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../validation/validation-rules */ "./ui/js/pods-dfv/src/validation/validation-rules.js");
/* harmony import */ var _validation_validation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../validation/validation */ "./ui/js/pods-dfv/src/validation/validation.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* eslint-disable react/prop-types */





var useState = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState;
var PodsDFVFieldContainer = function PodsDFVFieldContainer(props) {
  var Field = props.fieldComponent;

  var _useState = useState(props.fieldItemData[0] || ''),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var validation = Object(_validation_validation__WEBPACK_IMPORTED_MODULE_4__["podsValidation"])();
  var validationMessages = validation.useValidation(value);
  validation.addRules([{
    rule: _validation_validation_rules__WEBPACK_IMPORTED_MODULE_3__["validationRules"].required(value, props.fieldConfig.label),
    condition: '1' === props.fieldConfig.required
  }]);
  var fieldClasses = classnames__WEBPACK_IMPORTED_MODULE_1___default()(props.htmlAttr["class"], {
    'pods-validate-error': validationMessages.length
  });
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-dfv-container"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Field, _extends({
    value: value,
    setValue: setValue,
    validation: validation,
    className: fieldClasses
  }, props)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_validation_messages__WEBPACK_IMPORTED_MODULE_2__["PodsDFVValidationMessages"], {
    messages: validationMessages
  }));
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/components/field-option.js":
/*!*******************************************************!*\
  !*** ./ui/js/pods-dfv/src/components/field-option.js ***!
  \*******************************************************/
/*! exports provided: PodsFieldOption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsFieldOption", function() { return PodsFieldOption; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _help_tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./help-tooltip */ "./ui/js/pods-dfv/src/components/help-tooltip.js");



var PodsFieldOption = function PodsFieldOption(props) {
  var fieldType = props.fieldType,
      name = props.name,
      value = props.value,
      label = props.label,
      onChange = props.onChange,
      helpText = props.helpText;

  var toBool = function toBool(stringOrNumber) {
    // Force any strings to numeric first
    return !!+stringOrNumber;
  };

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "pods-field-option"
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
    className: "pods-form-ui-label pods-form-ui-label-".concat(name),
    htmlFor: name
  }, label, helpText && 'help' !== helpText && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_help_tooltip__WEBPACK_IMPORTED_MODULE_2__["HelpTooltip"], {
    helpText: helpText
  })), 'boolean' === fieldType ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "checkbox",
    id: name,
    name: name,
    checked: toBool(value),
    onChange: onChange
  }) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "text",
    id: name,
    name: name,
    value: value,
    onChange: onChange
  }));
};
PodsFieldOption.propTypes = {
  fieldType: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  name: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any.isRequired,
  label: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
  helpText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/components/help-tooltip.js":
/*!*******************************************************!*\
  !*** ./ui/js/pods-dfv/src/components/help-tooltip.js ***!
  \*******************************************************/
/*! exports provided: HelpTooltip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HelpTooltip", function() { return HelpTooltip; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);


var _wp$components = wp.components,
    Tooltip = _wp$components.Tooltip,
    Dashicon = _wp$components.Dashicon;
var HelpTooltip = function HelpTooltip(props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tooltip, {
    text: props.helpText
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Dashicon, {
    icon: "editor-help"
  })));
};
HelpTooltip.propTypes = {
  helpText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/components/tabs/pods-nav-tab.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/components/tabs/pods-nav-tab.js ***!
  \************************************************************/
/*! exports provided: PodsNavTab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsNavTab", function() { return PodsNavTab; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);



var PodsNavTab = function PodsNavTab(props) {
  var getClassName = function getClassName(tabName) {
    return classnames__WEBPACK_IMPORTED_MODULE_2___default()('nav-tab pods-nav-tab-link', {
      'nav-tab-active': tabName === props.activeTab
    });
  };

  var handleClick = function handleClick(e, tabName) {
    e.preventDefault();
    props.setActiveTab(tabName);
  };

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2", {
    className: "nav-tab-wrapper pods-nav-tabs"
  }, props.tabs.map(function (thisTab) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
      key: thisTab.name,
      href: "#pods-".concat(thisTab.name),
      className: getClassName(thisTab.name),
      onClick: function onClick(e) {
        return handleClick(e, thisTab.name);
      }
    }, thisTab.titleText);
  }));
};
PodsNavTab.propTypes = {
  tabs: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.shape({
    name: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
    titleText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string
  })).isRequired,
  activeTab: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,
  setActiveTab: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/components/validation-messages.js":
/*!**************************************************************!*\
  !*** ./ui/js/pods-dfv/src/components/validation-messages.js ***!
  \**************************************************************/
/*! exports provided: PodsDFVValidationMessage, PodsDFVValidationMessages */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVValidationMessage", function() { return PodsDFVValidationMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVValidationMessages", function() { return PodsDFVValidationMessages; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable react/prop-types */

var PodsDFVValidationMessage = function PodsDFVValidationMessage(props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "notice notice-error"
  }, props.message);
};
var PodsDFVValidationMessages = function PodsDFVValidationMessages(props) {
  return props.messages.map(function (thisMessage) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PodsDFVValidationMessage, {
      key: thisMessage,
      message: thisMessage
    });
  });
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/dfv-modal.js":
/*!**********************************************!*\
  !*** ./ui/js/pods-dfv/src/core/dfv-modal.js ***!
  \**********************************************/
/*! exports provided: PodsDFVModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVModal", function() { return PodsDFVModal; });
/*global jQuery, _, Backbone, Marionette, wp, PodsI18n */

/**
 * A frame for displaying a modal popup with iframe content
 *
 * @augments wp.media.view.Frame
 */
var PodsDFVModal = wp.media.view.Modal.extend({
  /**
   * @param {Object} options
   * @returns {wp.media.view.Modal} Returns itself to allow chaining
   */
  close: function close(options) {
    var retVal = wp.media.view.Modal.prototype.close.apply(this, options); // Alert the listening control when we've been cancelled

    if (options && options.escape) {
      window.parent.jQuery(window.parent).trigger('dfv:modal:cancel');
    }

    return retVal;
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/gb-modal-listener.js":
/*!******************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/gb-modal-listener.js ***!
  \******************************************************/
/*! exports provided: PodsGbModalListener */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsGbModalListener", function() { return PodsGbModalListener; });
/**
 * Note: No checking is done here to make sure we're in a modal and that
 * Gutenberg is actually loaded.  Consuming code must make sure the implicit
 * Gutenberg dependencies exist (primarily wp.data) before calling through
 * to init().
 */
// The guard in front is to ensure wp.data exists before accessing select
var editorData = wp.data && wp.data.select('core/editor');
var unSubscribe;
/**
 * init() is the only exposed interface
 */

var PodsGbModalListener = {
  init: function init() {
    if (editorData.isCurrentPostPublished()) {
      // Post is published, this is an edit
      unSubscribe = wp.data.subscribe(saveListener);
    } else {
      // Unpublished post, this is an "add new" modal
      unSubscribe = wp.data.subscribe(publishListener);
    }
  }
}; //-------------------------------------------
// Helper functions, not externally exposed
//-------------------------------------------

/**
 *
 * @return string
 */

function getFeaturedImageURL() {
  var featuredImageId = editorData.getCurrentPostAttribute('featured_media');
  var url = ''; // Early exit if nothing was set

  if (!featuredImageId) {
    return url;
  }

  var media = wp.data.select('core').getMedia(featuredImageId);

  if (media) {
    var mediaSize = wp.hooks.applyFilters('editor.PostFeaturedImage.imageSize', 'post-thumbnail', '');

    if (media.media_details && media.media_details.sizes && media.media_details.sizes[mediaSize]) {
      url = media.media_details.sizes[mediaSize].source_url;
    } else {
      url = media.source_url;
    }
  }

  return url;
}
/**
 * Handles "add new" modals
 */


function publishListener() {
  if (editorData.isCurrentPostPublished()) {
    unSubscribe();
    triggerUpdateEvent({
      'icon': getFeaturedImageURL(),
      'link': editorData.getPermalink(),
      'edit_link': "post.php?post=".concat(editorData.getCurrentPostId(), "&action=edit&pods_modal=1"),
      'selected': true // Automatically select add new records

    });
  }
}
/**
 * Handles "edit existing" modals
 */


function saveListener() {
  if (saveListener.wasSaving) {
    // The wasSaving flag already ignores autosave so we only need to
    // check isSavingPost()
    if (!editorData.isSavingPost()) {
      // Currently on save failure we'll remain subscribed and try
      // listening for the next save attempt
      saveListener.wasSaving = false;

      if (editorData.didPostSaveRequestSucceed()) {
        unSubscribe();
        triggerUpdateEvent({
          'icon': getFeaturedImageURL()
        });
      }
    }
  } else {
    saveListener.wasSaving = isUserSaving();
  }
}
/**
 * Whether or not an active save is in progress due to user action (ignore autosaves)
 *
 * @return boolean
 */


function isUserSaving() {
  return !!(editorData.isSavingPost() && !editorData.isAutosavingPost());
}
/**
 * The event listener in the parent window will take care of closing the modal
 */


function triggerUpdateEvent(optionalData) {
  var defaultData = {
    'id': editorData.getCurrentPostId(),
    'name': editorData.getCurrentPostAttribute('title')
  };
  var postData = Object.assign(defaultData, optionalData);
  window.parent.jQuery(window.parent).trigger('dfv:modal:update', postData);
}

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/iframe-frame.js":
/*!*************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/iframe-frame.js ***!
  \*************************************************/
/*! exports provided: IframeFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IframeFrame", function() { return IframeFrame; });
/* harmony import */ var _dfv_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dfv-modal */ "./ui/js/pods-dfv/src/core/dfv-modal.js");
/*global jQuery, _, Backbone, Marionette, wp, PodsI18n */

/**
 * A frame for displaying a modal popup with iframe content
 *
 * @augments wp.media.view.Frame
 */

var IframeFrame = wp.media.view.Frame.extend({
  className: 'pods-modal-frame',
  template: _.template('<div class="media-frame-title" /><div class="media-frame-iframe" />'),
  regions: ['title', 'iframe'],
  initialize: function initialize() {
    wp.media.view.Frame.prototype.initialize.apply(this, arguments); // Ensure core UI is enabled.

    this.$el.addClass('wp-core-ui');
    this.initState();
    this.initModal();
    this.on('iframe:create:default', this.iframeContent, this);
    this.iframe.mode('default');
    this.on('title:create:default', this.createTitle, this);
    this.title.mode('default');
    this.on('title:render', function (view) {
      view.$el.append('<span class="dashicons dashicons-arrow-down"></span>');
    });
  },
  initState: function initState() {
    var title = this.options.title || PodsI18n.__('Add New Record');

    var src = this.options.src || '/';
    this.states.add([new wp.media.controller.State({
      id: 'default',
      title: title,
      src: src
    })]);
    this.options.state = 'default';
  },
  initModal: function initModal() {
    this.modal = new _dfv_modal__WEBPACK_IMPORTED_MODULE_0__["PodsDFVModal"]({
      controller: this
    });
    this.modal.content(this);
  },
  render: function render() {
    // Activate the default state if no active state exists.
    if (!this.state() && this.options.state) {
      this.setState(this.options.state);
    }
    /**
     * call 'render' directly on the parent class
     */


    return wp.media.view.Frame.prototype.render.apply(this, arguments);
  },

  /**
   * @param {Object} content
   * @this wp.media.controller.Region
   */
  iframeContent: function iframeContent(content) {
    content.view = new wp.media.view.Iframe({
      controller: this
    });
  },
  createTitle: function createTitle(title) {
    title.view = new wp.media.View({
      controller: this,
      tagName: 'h1'
    });
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/pods-field-model.js":
/*!*****************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/pods-field-model.js ***!
  \*****************************************************/
/*! exports provided: PodsDFVFieldModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVFieldModel", function() { return PodsDFVFieldModel; });
/*global jQuery, _, Backbone, Marionette */
var PodsDFVFieldModel = Backbone.Model.extend({
  defaults: {
    htmlAttr: {},
    fieldConfig: {}
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/pods-field-views.js":
/*!*****************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/pods-field-views.js ***!
  \*****************************************************/
/*! exports provided: PodsFieldListView, PodsFieldView, PodsDFVFieldLayout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsFieldListView", function() { return PodsFieldListView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsFieldView", function() { return PodsFieldView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVFieldLayout", function() { return PodsDFVFieldLayout; });
/*global jQuery, _, Backbone, Marionette */

/**
 *
 */
var PodsFieldListView = Marionette.CollectionView.extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  initialize: function initialize(options) {
    this.fieldModel = options.fieldModel;
    this.childViewOptions = {
      fieldModel: options.fieldModel
    };
  }
});
/**
 * @extends Backbone.View
 */

var PodsFieldView = Marionette.View.extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  serializeData: function serializeData() {
    var fieldModel = this.options.fieldModel;
    var data = this.model ? this.model.toJSON() : {};
    data.htmlAttr = fieldModel.get('htmlAttr');
    data.fieldConfig = fieldModel.get('fieldConfig');
    return data;
  }
});
/**
 * Top-level "main field container"
 */

var PodsDFVFieldLayout = Marionette.View.extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  initialize: function initialize(options) {
    this.fieldItemData = options.fieldItemData;
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/renderers/mn-renderer.js":
/*!**********************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/renderers/mn-renderer.js ***!
  \**********************************************************/
/*! exports provided: mnRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mnRenderer", function() { return mnRenderer; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pods_field_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pods-field-model */ "./ui/js/pods-dfv/src/core/pods-field-model.js");


function mnRenderer(FieldClass, element, data) {
  // Assemble the model and create the field
  var fieldModel = new _pods_field_model__WEBPACK_IMPORTED_MODULE_1__["PodsDFVFieldModel"]({
    htmlAttr: data.htmlAttr,
    fieldConfig: data.fieldConfig
  });
  var newField = new FieldClass({
    el: element,
    model: fieldModel,
    fieldItemData: data.fieldItemData
  }); // Render the field, trigger an event for the outside world, and stash a reference

  newField.render();
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).trigger('render');
  return newField;
}

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/renderers/react-direct-renderer.js":
/*!********************************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/renderers/react-direct-renderer.js ***!
  \********************************************************************/
/*! exports provided: reactDirectRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reactDirectRenderer", function() { return reactDirectRenderer; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "react-dom");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _admin_edit_pod_store_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../admin/edit-pod/store/store */ "./ui/js/pods-dfv/src/admin/edit-pod/store/store.js");



function reactDirectRenderer(FieldClass, element, props) {
  var Field = react__WEBPACK_IMPORTED_MODULE_0___default.a.createFactory(FieldClass); // Todo:
  //
  //  1: Need a generic way to initialize the stores.  This can't be inside
  // the component or it will revert to initial values on every render.
  // Kludged here for now to continue prototyping.
  //
  // 2: initialState (in initStore) will not arrive until WP 5.2.
  //

  Object(_admin_edit_pod_store_store__WEBPACK_IMPORTED_MODULE_2__["initStore"])(props);
  react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.render(Field(props), element);
}

/***/ }),

/***/ "./ui/js/pods-dfv/src/core/renderers/react-renderer.js":
/*!*************************************************************!*\
  !*** ./ui/js/pods-dfv/src/core/renderers/react-renderer.js ***!
  \*************************************************************/
/*! exports provided: reactRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reactRenderer", function() { return reactRenderer; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "react-dom");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_field_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/field-container */ "./ui/js/pods-dfv/src/components/field-container.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }




function reactRenderer(FieldClass, element, props) {
  var Field = react__WEBPACK_IMPORTED_MODULE_0___default.a.createFactory(FieldClass);
  react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.render(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_field_container__WEBPACK_IMPORTED_MODULE_2__["PodsDFVFieldContainer"], _extends({
    fieldComponent: Field
  }, props)), element);
}

/***/ }),

/***/ "./ui/js/pods-dfv/src/field-manifest.js":
/*!**********************************************!*\
  !*** ./ui/js/pods-dfv/src/field-manifest.js ***!
  \**********************************************/
/*! exports provided: FileUpload, Pick, PodsDFVText, PodsDFVPassword, PodsDFVNumber, PodsDFVEmail, PodsDFVTextArea, PodsDFVEditPod */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _fields_file_upload_file_upload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fields/file-upload/file-upload */ "./ui/js/pods-dfv/src/fields/file-upload/file-upload.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileUpload", function() { return _fields_file_upload_file_upload__WEBPACK_IMPORTED_MODULE_0__["FileUpload"]; });

/* harmony import */ var _fields_pick_pick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fields/pick/pick */ "./ui/js/pods-dfv/src/fields/pick/pick.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pick", function() { return _fields_pick_pick__WEBPACK_IMPORTED_MODULE_1__["Pick"]; });

/* harmony import */ var _fields_text_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fields/text/text */ "./ui/js/pods-dfv/src/fields/text/text.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVText", function() { return _fields_text_text__WEBPACK_IMPORTED_MODULE_2__["PodsDFVText"]; });

/* harmony import */ var _fields_password_password__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fields/password/password */ "./ui/js/pods-dfv/src/fields/password/password.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVPassword", function() { return _fields_password_password__WEBPACK_IMPORTED_MODULE_3__["PodsDFVPassword"]; });

/* harmony import */ var _fields_number_number__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fields/number/number */ "./ui/js/pods-dfv/src/fields/number/number.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVNumber", function() { return _fields_number_number__WEBPACK_IMPORTED_MODULE_4__["PodsDFVNumber"]; });

/* harmony import */ var _fields_email_email__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fields/email/email */ "./ui/js/pods-dfv/src/fields/email/email.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVEmail", function() { return _fields_email_email__WEBPACK_IMPORTED_MODULE_5__["PodsDFVEmail"]; });

/* harmony import */ var _fields_textarea_textarea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fields/textarea/textarea */ "./ui/js/pods-dfv/src/fields/textarea/textarea.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVTextArea", function() { return _fields_textarea_textarea__WEBPACK_IMPORTED_MODULE_6__["PodsDFVTextArea"]; });

/* harmony import */ var _admin_edit_pod_edit_pod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./admin/edit-pod/edit-pod */ "./ui/js/pods-dfv/src/admin/edit-pod/edit-pod.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVEditPod", function() { return _admin_edit_pod_edit_pod__WEBPACK_IMPORTED_MODULE_7__["PodsDFVEditPod"]; });










/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/email/email.js":
/*!**************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/email/email.js ***!
  \**************************************************/
/*! exports provided: PodsDFVEmail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVEmail", function() { return PodsDFVEmail; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_base_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/base-input */ "./ui/js/pods-dfv/src/components/base-input.js");
/* harmony import */ var _validation_validation_rules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../validation/validation-rules */ "./ui/js/pods-dfv/src/validation/validation-rules.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types */



var PodsDFVEmail = function PodsDFVEmail(props) {
  props.validation.addRules([{
    rule: _validation_validation_rules__WEBPACK_IMPORTED_MODULE_2__["validationRules"].emailFormat(props.value),
    condition: true
  }]); // noinspection JSUnresolvedVariable

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_base_input__WEBPACK_IMPORTED_MODULE_1__["PodsDFVBaseInput"], _extends({
    type: '1' === props.fieldConfig.email_html5 ? 'email' : 'text'
  }, props));
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/file-upload-model.js":
/*!********************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/file-upload-model.js ***!
  \********************************************************************/
/*! exports provided: FileUploadModel, FileUploadCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadModel", function() { return FileUploadModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadCollection", function() { return FileUploadCollection; });
/*global jQuery, _, Backbone, Marionette */

/**
 *
 */
var FileUploadModel = Backbone.Model.extend({
  defaults: {
    'id': 0,
    'icon': '',
    'name': '',
    'edit_link': '',
    'link': '',
    'download': ''
  }
});
/**
 *
 */

var FileUploadCollection = Backbone.Collection.extend({
  model: FileUploadModel
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/file-upload.js":
/*!**************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/file-upload.js ***!
  \**************************************************************/
/*! exports provided: FileUpload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUpload", function() { return FileUpload; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/* harmony import */ var _file_upload_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./file-upload-model */ "./ui/js/pods-dfv/src/fields/file-upload/file-upload-model.js");
/* harmony import */ var _views_file_upload_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/file-upload-list */ "./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-list.js");
/* harmony import */ var _views_file_upload_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/file-upload-form */ "./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-form.js");
/* harmony import */ var _uploaders_plupload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uploaders/plupload */ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/plupload.js");
/* harmony import */ var _uploaders_media_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uploaders/media-modal */ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/media-modal.js");
/*global jQuery, _, Backbone, Marionette */
var template = "<div class=\"pods-ui-file-list pods-field-template-<%- fieldConfig.file_field_template %>\"></div>\n<div class=\"pods-ui-region\"></div>\n<div class=\"pods-ui-form\"></div>\n";






var Uploaders = [_uploaders_plupload__WEBPACK_IMPORTED_MODULE_4__["Plupload"], _uploaders_media_modal__WEBPACK_IMPORTED_MODULE_5__["MediaModal"]];
var UNLIMITED_FILES = 0;
/**
 * @extends Backbone.View
 */

var FileUpload = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsDFVFieldLayout"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  template: _.template(template),
  regions: {
    list: '.pods-ui-file-list',
    uiRegion: '.pods-ui-region',
    // "Utility" container for uploaders to use
    form: '.pods-ui-form'
  },
  childViewEvents: {
    'childview:remove:file:click': 'onChildviewRemoveFileClick',
    'childview:add:file:click': 'onChildviewAddFileClick'
  },
  uploader: {},

  /**
   *
   */
  onBeforeRender: function onBeforeRender() {
    if (this.collection === undefined) {
      this.collection = new _file_upload_model__WEBPACK_IMPORTED_MODULE_1__["FileUploadCollection"](this.fieldItemData);
    }
  },
  onRender: function onRender() {
    var listView = new _views_file_upload_list__WEBPACK_IMPORTED_MODULE_2__["FileUploadList"]({
      collection: this.collection,
      fieldModel: this.model
    });
    var formView = new _views_file_upload_form__WEBPACK_IMPORTED_MODULE_3__["FileUploadForm"]({
      fieldModel: this.model
    });
    this.showChildView('list', listView);
    this.showChildView('form', formView); // Setup the uploader and listen for a response event

    this.uploader = this.createUploader();
    this.listenTo(this.uploader, 'added:files', this.onAddedFiles);
  },

  /**
   * Fired by a remove:file:click trigger in any child view
   *
   * @param childView View that was the source of the event
   */
  onChildviewRemoveFileClick: function onChildviewRemoveFileClick(childView) {
    this.collection.remove(childView.model);
  },

  /**
   * Fired by a add:file:click trigger in any child view
   *
   * plupload fields should never generate this event, it places a shim over our button and handles the
   * event internally.  But this event does still come through with plupload fields in some browser
   * environments for reasons we've been unable to determine.
   */
  onChildviewAddFileClick: function onChildviewAddFileClick() {
    // Invoke the uploader
    if ('function' === typeof this.uploader.invoke) {
      this.uploader.invoke();
    }
  },

  /**
   * Concrete uploader implementations simply need to: this.trigger( 'added:files', newFiles )
   *
   * @param {Object[]} data An array of model objects to be added
   */
  onAddedFiles: function onAddedFiles(data) {
    var fieldConfig = this.model.get('fieldConfig');
    var fileLimit = +fieldConfig['file_limit']; // Unary plus to force to number

    var newCollection, filteredModels; // Get a copy of the existing collection with the new files added

    newCollection = this.collection.clone();
    newCollection.add(data); // Enforce the file limit option if one is set

    if (UNLIMITED_FILES === fileLimit) {
      filteredModels = newCollection.models;
    } else {
      // Number of uploads is limited: keep the last N models, FIFO/queue style
      filteredModels = newCollection.filter(function (model) {
        return newCollection.indexOf(model) >= newCollection.length - fileLimit;
      });
    }

    this.collection.reset(filteredModels);
  },
  createUploader: function createUploader() {
    var fieldConfig = this.model.get('fieldConfig');
    var targetUploader = fieldConfig['file_uploader'];
    var Uploader;
    jQuery.each(Uploaders, function (index, thisUploader) {
      if (targetUploader === thisUploader.prototype.fileUploader) {
        Uploader = thisUploader;
        return false;
      }
    });

    if (Uploader !== undefined) {
      this.uploader = new Uploader({
        // We provide regular DOM element for the button
        browseButton: this.getRegion('form').getEl('.pods-dfv-list-add').get(),
        uiRegion: this.getRegion('uiRegion'),
        fieldConfig: fieldConfig
      });
      return this.uploader;
    } else {
      // @todo sprintf type with PodsI18n.__()
      throw "Could not locate file uploader '".concat(targetUploader, "'");
    }
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/media-modal.js":
/*!************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/uploaders/media-modal.js ***!
  \************************************************************************/
/*! exports provided: MediaModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaModal", function() { return MediaModal; });
/* harmony import */ var _pods_file_uploader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pods-file-uploader */ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/pods-file-uploader.js");
/* eslint-disable camelcase */

/*global jQuery, _, Backbone, Marionette, wp, PodsI18n */

var MediaModal = _pods_file_uploader__WEBPACK_IMPORTED_MODULE_0__["PodsFileUploader"].extend({
  mediaObject: {},
  fileUploader: 'attachment',
  invoke: function invoke() {
    if (wp.Uploader.defaults.filters.mime_types === undefined) {
      wp.Uploader.defaults.filters.mime_types = [{
        title: PodsI18n.__('Allowed Files'),
        extensions: '*'
      }];
    }

    var defaultExt = wp.Uploader.defaults.filters.mime_types[0].extensions;
    wp.Uploader.defaults.filters.mime_types[0].extensions = this.fieldConfig['limit_extensions']; // set our settings
    // noinspection EqualityComparisonWithCoercionJS ("1" is every bit as valid to us as 1)

    this.mediaObject = wp.media({
      title: this.fieldConfig['file_modal_title'],
      multiple: 1 != this.fieldConfig['file_limit'],
      library: {
        type: this.fieldConfig['limit_types']
      },
      // Customize the submit button.
      button: {
        // Set the text of the button.
        text: this.fieldConfig['file_modal_add_button']
      }
    }); // One-shot callback ( event, callback, context )

    this.mediaObject.once('select', this.onMediaSelect, this); // open the frame

    this.mediaObject.open();
    this.mediaObject.content.mode(this.fieldConfig['file_attachment_tab']); // Reset the allowed file extensions

    wp.Uploader.defaults.filters.mime_types[0].extensions = defaultExt;
  },
  onMediaSelect: function onMediaSelect() {
    var selection = this.mediaObject.state().get('selection');
    var newFiles = [];

    if (!selection) {
      return;
    } // loop through the selected files


    selection.each(function (attachment) {
      var sizes = attachment.attributes.sizes;
      var attachmentThumbnail; // by default use the generic icon

      attachmentThumbnail = attachment.attributes.icon; // only thumbnails have sizes which is what we're on the hunt for

      if (sizes !== undefined) {
        // Get thumbnail if it exists
        if (sizes.thumbnail !== undefined && sizes.thumbnail.url !== undefined) {
          attachmentThumbnail = sizes.thumbnail.url;
        } else if (sizes.full !== undefined && sizes.full.url !== undefined) {
          // If thumbnail doesn't exist, get full because this is a small image
          attachmentThumbnail = sizes.full.url;
        }
      }

      newFiles.push({
        id: attachment.attributes.id,
        icon: attachmentThumbnail,
        name: attachment.attributes.title,
        edit_link: attachment.attributes.editLink,
        link: attachment.attributes.link,
        download: attachment.attributes.url
      });
    }); // Fire an event with an array of models to be added

    this.trigger('added:files', newFiles);
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/plupload.js":
/*!*********************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/uploaders/plupload.js ***!
  \*********************************************************************/
/*! exports provided: Plupload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plupload", function() { return Plupload; });
/* harmony import */ var _pods_file_uploader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pods-file-uploader */ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/pods-file-uploader.js");
/* harmony import */ var _views_file_upload_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/file-upload-queue */ "./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-queue.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-disable camelcase */

/*global jQuery, _, Backbone, Marionette, wp, plupload, PodsI18n */


var Plupload = _pods_file_uploader__WEBPACK_IMPORTED_MODULE_0__["PodsFileUploader"].extend({
  plupload: {},
  fileUploader: 'plupload',
  initialize: function initialize() {
    // Set the browse button argument for plupload... it's required
    this.fieldConfig['plupload_init']['browse_button'] = this.browseButton;
    this.plupload = new plupload.Uploader(this.fieldConfig['plupload_init']);
    this.plupload.init(); // Setup all callbacks: ( event_name, callback, context )

    this.plupload.bind('FilesAdded', this.onFilesAdded, this);
    this.plupload.bind('UploadProgress', this.onUploadProgress, this);
    this.plupload.bind('FileUploaded', this.onFileUploaded, this);
  },

  /**
   * Fired after files have been selected from the dialog
   *
   * @param up
   * @param files
   */
  onFilesAdded: function onFilesAdded(up, files) {
    var model, collection, view; // Assemble the collection data for the file queue

    collection = new Backbone.Collection();
    jQuery.each(files, function (index, file) {
      model = new _views_file_upload_queue__WEBPACK_IMPORTED_MODULE_1__["FileUploadQueueModel"]({
        id: file.id,
        filename: file.name
      });
      collection.add(model);
    }); // Create a new view based on the collection

    view = new _views_file_upload_queue__WEBPACK_IMPORTED_MODULE_1__["FileUploadQueue"]({
      collection: collection
    });
    view.render(); // Generate the HTML, not attached to the DOM yet
    // Reset the region in case any error messages are hanging around from a previous upload
    // and show the new file upload queue

    this.uiRegion.reset();
    this.uiRegion.show(view); // Stash references

    this.queueCollection = collection;
    up.refresh();
    up.start();
  },

  /**
   *
   * @param up
   * @param file
   */
  onUploadProgress: function onUploadProgress(up, file) {
    var model = this.queueCollection.get(file.id);
    model.set({
      progress: file.percent
    });
  },

  /**
   *
   * @param up
   * @param file
   * @param resp
   */
  onFileUploaded: function onFileUploaded(up, file, resp) {
    var model = this.queueCollection.get(file.id);
    var response = resp.response;
    var newFile = [];
    var json; // Error condition 1

    if ('Error: ' === resp.response.substr(0, 7)) {
      response = response.substr(7);

      if (window.console) {
        console.log(response);
      }

      model.set({
        progress: 0,
        errorMsg: response
      }); // Error condition 2
    } else if ('<e>' === resp.response.substr(0, 3)) {
      response = jQuery(response).text(); // Strip tags, text only

      if (window.console) {
        console.log(response);
      }

      model.set({
        progress: 0,
        errorMsg: response
      });
    } else {
      json = response.match(/{.*}$/);

      if (null !== json && 0 < json.length) {
        json = jQuery.parseJSON(json[0]);
      } else {
        json = {};
      }

      if ('object' !== _typeof(json) || jQuery.isEmptyObject(json)) {
        if (window.console) {
          console.log(response);
        }

        if (window.console) {
          console.log(json);
        }

        model.set({
          progress: 0,
          errorMsg: PodsI18n.__('Error uploading file: ') + file.name
        });
        return;
      }

      newFile = {
        id: json.ID,
        icon: json.thumbnail,
        name: json.post_title,
        edit_link: json.edit_link,
        link: json.link,
        download: json.download
      }; // Remove the file from the upload queue model and trigger an event for the hosting container

      model.trigger('destroy', model);
      this.trigger('added:files', newFile);
    }
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/uploaders/pods-file-uploader.js":
/*!*******************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/uploaders/pods-file-uploader.js ***!
  \*******************************************************************************/
/*! exports provided: PodsFileUploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsFileUploader", function() { return PodsFileUploader; });
/*global jQuery, _, Backbone, Marionette */

/**
 *
 * @param {Object} options
 *
 * @param {Object} options.browseButton   Existing and attached DOM node
 * @param {Object} options.uiRegion       Marionette.Region object
 * @param {Object} options.fieldConfig
 *
 * @param {string} options.fieldConfig.file_modal_title
 * @param {string} options.fieldConfig.file_modal_add_button
 * @param {string} options.fieldConfig.file_limit
 * @param {string} options.fieldConfig.limit_extensions
 * @param {string} options.fieldConfig.limit_types
 * @param {string} options.fieldConfig.file_attachment_tab
 *
 * @param {Object} options.fieldConfig.plupload_init
 * @param {Object} options.fieldConfig.plupload_init.browse_button
 *
 * @class
 */
var PodsFileUploader = Marionette.Object.extend({
  constructor: function constructor(options) {
    // Magically set the object properties we need, they'll just "be there" for the concrete instance
    this.browseButton = options.browseButton;
    this.uiRegion = options.uiRegion;
    this.fieldConfig = options.fieldConfig;
    Marionette.Object.call(this, options);
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-form.js":
/*!*************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-form.js ***!
  \*************************************************************************/
/*! exports provided: FileUploadForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadForm", function() { return FileUploadForm; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<a class=\"button pods-dfv-list-add\" href=\"#\" tabindex=\"2\"><%= fieldConfig.file_add_button %></a>";

var FileUploadForm = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'div',
  template: _.template(template),
  ui: {
    addButton: '.pods-dfv-list-add'
  },
  triggers: {
    'click @ui.addButton': 'childview:add:file:click'
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-list.js":
/*!*************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-list.js ***!
  \*************************************************************************/
/*! exports provided: FileUploadItem, FileUploadList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadItem", function() { return FileUploadItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadList", function() { return FileUploadList; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<input\n\tname=\"<%- htmlAttr.name %>[<%- id %>][id]\"\n\tdata-name-clean=\"<%- htmlAttr.name_clean %>-id\"\n\tid=\"<%- htmlAttr.id %>-<%- id %>-id\"\n\tclass=\"<%- htmlAttr.class %>\"\n\ttype=\"hidden\"\n\tvalue=\"<%- id %>\" />\n<ul class=\"pods-dfv-list-meta media-item\">\n\t<% if ( 1 != fieldConfig.file_limit ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-handle\"><span><%- PodsI18n.__( 'Reorder' ) %></span></li>\n\t<% } %>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-icon\"><img class=\"pinkynail\" src=\"<%- icon %>\" alt=\"<%- PodsI18n.__( 'Icon' ) %>\"></li>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-name\">\n\t\t<% if ( 0 != fieldConfig.file_edit_title ) { %>\n\t\t\t<input\n\t\t\t\tname=\"<%- htmlAttr.name %>[<%- id %>][title]\"\n\t\t\t\tdata-name-clean=\"<%- htmlAttr.name_clean %>-title\"\n\t\t\t\tid=\"pods-form-ui-<%- htmlAttr.name_clean %>-<%- id %>-title\"\n\t\t\t\tclass=\"pods-form-ui-field-type-text pods-form-ui-field-name-<%- htmlAttr.name_clean %>-title\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue=\"<%- name %>\"\n\t\t\t\ttabindex=\"2\"\n\t\t\t\tmaxlength=\"255\" />\n\t\t<% } else { %>\n\t\t\t<%- name %>\n\t\t<% } %>\n\t</li>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-actions\">\n\t\t<ul>\n\t\t\t<li class=\"pods-dfv-list-col pods-dfv-list-remove\">\n\t\t\t\t<a href=\"#remove\" title=\"<%- PodsI18n.__( 'Deselect' ) %>\"><%- PodsI18n.__( 'Deselect' ) %></a>\n\t\t\t</li>\n\t\t\t<% if ( 1 == fieldConfig.file_linked && '' != download ) { %>\n\t\t\t\t<li class=\"pods-dfv-list-col pods-dfv-list-download\">\n\t\t\t\t\t<a href=\"<%- download %>\" target=\"_blank\" title=\"<%- PodsI18n.__( 'Download' ) %>\"><%- PodsI18n.__( 'Download' ) %></a>\n\t\t\t\t</li>\n\t\t\t<% } %>\n\t\t\t<% if ( 1 == fieldConfig.file_show_edit_link && '' != edit_link ) { %>\n\t\t\t\t<li class=\"pods-dfv-list-col pods-dfv-list-edit\">\n\t\t\t\t\t<a href=\"<%- edit_link %>\" target=\"_blank\" title=\"<%- PodsI18n.__( 'Edit' ) %>\"><%- PodsI18n.__( 'Edit' ) %></a>\n\t\t\t\t</li>\n\t\t\t<% } %>\n\t\t</ul>\n\t</li>\n</ul>\n";

/**
 * Individual list items, representing a single file
 */

var FileUploadItem = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'li',
  template: _.template(template),
  className: 'pods-dfv-list-item',
  ui: {
    dragHandle: '.pods-dfv-list-handle',
    editLink: '.pods-dfv-list-edit-link',
    viewLink: '.pods-dfv-list-link',
    downloadLink: '.pods-dfv-list-download',
    removeButton: '.pods-dfv-list-remove',
    itemName: '.pods-dfv-list-name'
  },
  triggers: {
    'click @ui.removeButton': 'remove:file:click'
  }
});
/**
 * The file list container
 */

var FileUploadList = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldListView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'ul',
  className: 'pods-dfv-list',
  childView: FileUploadItem,
  childViewTriggers: {
    'remove:file:click': 'childview:remove:file:click'
  },
  onAttach: function onAttach() {
    var fieldConfig = this.options.fieldModel.get('fieldConfig');
    var sort_axis = 'y'; // @todo
    // http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

    if (1 != fieldConfig['file_limit']) {
      if ('tiles' == fieldConfig['file_field_template']) {
        sort_axis = '';
      } // init sortable


      this.$el.sortable({
        containment: 'parent',
        axis: sort_axis,
        scrollSensitivity: 40,
        tolerance: 'pointer',
        opacity: 0.6
      });
    }
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-queue.js":
/*!**************************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/file-upload/views/file-upload-queue.js ***!
  \**************************************************************************/
/*! exports provided: FileUploadQueueModel, FileUploadQueueItem, FileUploadQueue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadQueueModel", function() { return FileUploadQueueModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadQueueItem", function() { return FileUploadQueueItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadQueue", function() { return FileUploadQueue; });
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<ul class=\"pods-dfv-list-meta media-item\">\n\t<% if ( '' === errorMsg ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-progress\"><div class=\"progress-bar\" style=\"width: <%- progress %>%;\"></div></li>\n\t<% } %>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-name\"><%- filename %></li>\n</ul>\n<% if ( '' !== errorMsg ) { %>\n\t<div class=\"error\"><%- errorMsg %></div>\n<% } %>\n";
var FileUploadQueueModel = Backbone.Model.extend({
  defaults: {
    id: 0,
    filename: '',
    progress: 0,
    errorMsg: ''
  }
});
/**
 *
 */

var FileUploadQueueItem = Marionette.View.extend({
  model: FileUploadQueueModel,
  tagName: 'li',
  template: _.template(template),
  attributes: function attributes() {
    return {
      "class": 'pods-dfv-list-item',
      id: this.model.get('id')
    };
  },
  modelEvents: {
    'change': 'onModelChanged'
  },
  onModelChanged: function onModelChanged() {
    this.render();
  }
});
/**
 *
 */

var FileUploadQueue = Marionette.CollectionView.extend({
  tagName: 'ul',
  className: 'pods-dfv-list pods-dfv-list-queue',
  childView: FileUploadQueueItem
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/number/number.js":
/*!****************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/number/number.js ***!
  \****************************************************/
/*! exports provided: PodsDFVNumber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVNumber", function() { return PodsDFVNumber; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_base_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/base-input */ "./ui/js/pods-dfv/src/components/base-input.js");
/* harmony import */ var _validation_validation_rules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../validation/validation-rules */ "./ui/js/pods-dfv/src/validation/validation-rules.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types */



var PodsDFVNumber = function PodsDFVNumber(props) {
  // noinspection JSUnresolvedVariable
  props.validation.addRules([{
    rule: _validation_validation_rules__WEBPACK_IMPORTED_MODULE_2__["validationRules"].max(props.value, props.fieldConfig.number_max),
    condition: true
  }, {
    rule: _validation_validation_rules__WEBPACK_IMPORTED_MODULE_2__["validationRules"].min(props.value, props.fieldConfig.number_min),
    condition: true
  }]); // noinspection JSUnresolvedVariable

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_base_input__WEBPACK_IMPORTED_MODULE_1__["PodsDFVBaseInput"], _extends({
    type: '1' === props.fieldConfig.number_html5 ? 'number' : 'text',
    min: props.fieldConfig.number_min,
    max: props.fieldConfig.number_max
  }, props));
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/password/password.js":
/*!********************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/password/password.js ***!
  \********************************************************/
/*! exports provided: PodsDFVPassword */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVPassword", function() { return PodsDFVPassword; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_base_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/base-input */ "./ui/js/pods-dfv/src/components/base-input.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var PodsDFVPassword = function PodsDFVPassword(props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_base_input__WEBPACK_IMPORTED_MODULE_1__["PodsDFVBaseInput"], _extends({
    type: "password"
  }, props));
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/pick-field-model.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/pick-field-model.js ***!
  \************************************************************/
/*! exports provided: PickFieldModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PickFieldModel", function() { return PickFieldModel; });
/*global jQuery, _, Backbone, Marionette */
var PickFieldModel = Backbone.Model.extend({
  defaults: {
    'view_name': 'select',
    'iframe_src': '',
    'pick_format_type': 'single',
    'pick_show_icon': false,
    'pick_show_view_link': false,
    'pick_show_edit_link': false
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/pick.js":
/*!************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/pick.js ***!
  \************************************************/
/*! exports provided: Pick */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pick", function() { return Pick; });
/* harmony import */ var _core_pods_field_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/pods-field-model */ "./ui/js/pods-dfv/src/core/pods-field-model.js");
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/* harmony import */ var _core_iframe_frame__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/iframe-frame */ "./ui/js/pods-dfv/src/core/iframe-frame.js");
/* harmony import */ var _relationship_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./relationship-model */ "./ui/js/pods-dfv/src/fields/pick/relationship-model.js");
/* harmony import */ var _pick_field_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pick-field-model */ "./ui/js/pods-dfv/src/fields/pick/pick-field-model.js");
/* harmony import */ var _views_radio_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./views/radio-view */ "./ui/js/pods-dfv/src/fields/pick/views/radio-view.js");
/* harmony import */ var _views_checkbox_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/checkbox-view */ "./ui/js/pods-dfv/src/fields/pick/views/checkbox-view.js");
/* harmony import */ var _views_select_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/select-view */ "./ui/js/pods-dfv/src/fields/pick/views/select-view.js");
/* harmony import */ var _views_list_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./views/list-view */ "./ui/js/pods-dfv/src/fields/pick/views/list-view.js");
/* harmony import */ var _views_add_new__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./views/add-new */ "./ui/js/pods-dfv/src/fields/pick/views/add-new.js");
/* eslint-disable camelcase */

/*global jQuery, _, Backbone, Marionette, wp, PodsI18n */
var template = "<%if ( fieldConfig.view_name === 'list' ) { %>\n\t<div class=\"pods-ui-list-autocomplete\"></div>\n<% } %>\n\n<div class=\"pods-pick-values\"></div>\n\n<% if ( fieldConfig.iframe_src != '' ) { %>\n\t<div class=\"pods-ui-add-new\"></div>\n<% } %>";










var views = {
  'checkbox': _views_checkbox_view__WEBPACK_IMPORTED_MODULE_6__["CheckboxView"],
  'select': _views_select_view__WEBPACK_IMPORTED_MODULE_7__["SelectView"],
  'select2': _views_select_view__WEBPACK_IMPORTED_MODULE_7__["SelectView"],
  // SelectView handles select2 as well
  'radio': _views_radio_view__WEBPACK_IMPORTED_MODULE_5__["RadioView"],
  'list': _views_list_view__WEBPACK_IMPORTED_MODULE_8__["ListView"]
};
var modalIFrame;
/**
 * @extends Backbone.View
 */

var Pick = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_1__["PodsDFVFieldLayout"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  template: _.template(template),
  regions: {
    autocomplete: '.pods-ui-list-autocomplete',
    list: '.pods-pick-values',
    addNew: '.pods-ui-add-new'
  },
  childViewEvents: {
    'childview:remove:item:click': 'onChildviewRemoveItemClick',
    'childview:edit:item:click': 'onChildviewEditItemClick',
    'childview:selection:limit:over': 'onChildviewSelectionLimitOver',
    'childview:selection:limit:under': 'onChildviewSelectionLimitUnder',
    'childview:change:selected': 'onChildviewChangeSelected',
    'childview:add:new': 'onChildviewAddNew'
  },

  /**
   *
   */
  onBeforeRender: function onBeforeRender() {
    if (this.collection === undefined) {
      this.collection = new _relationship_model__WEBPACK_IMPORTED_MODULE_3__["RelationshipCollection"](this.fieldItemData);
    }
  },

  /**
   *
   */
  onRender: function onRender() {
    this.fieldConfig = new _pick_field_model__WEBPACK_IMPORTED_MODULE_4__["PickFieldModel"](this.model.get('fieldConfig')); // Add New?
    // noinspection EqualityComparisonWithCoercionJS (why would we reject "1"?)

    if ('' !== this.fieldConfig.get('iframe_src') && 1 == this.fieldConfig.get('pick_allow_add_new')) {
      this.showAddNew();
    } // Autocomplete?


    if ('list' === this.fieldConfig.get('view_name')) {
      this.buildAutocomplete();
    } // Build the list last, events fired by the list (like selection limit) may impact state in other views we manage


    this.showList();
  },

  /**
   * This is for the List View's autocomplete for select from existing
   */
  buildAutocomplete: function buildAutocomplete() {
    var fieldConfig, model, collection, view;
    var pickLimit = +this.fieldConfig.get('pick_limit'); // Unary plus forces cast to number

    fieldConfig = {
      view_name: 'select2',
      pick_format_type: 'multi',
      selectFromExisting: true,
      ajax_data: this.fieldConfig.get('ajax_data'),
      select2_overrides: this.fieldConfig.get('select2_overrides'),
      label: this.fieldConfig.get('label'),
      pick_limit: pickLimit
    }; // The autocomplete portion of List View doesn't track selected items; disable if we're at the selection limit

    if (this.collection.filterBySelected().length >= pickLimit && 0 !== pickLimit) {
      fieldConfig.limitDisable = true;
      this.onChildviewSelectionLimitOver();
    } else {
      this.onChildviewSelectionLimitUnder();
    }

    model = new _core_pods_field_model__WEBPACK_IMPORTED_MODULE_0__["PodsDFVFieldModel"]({
      fieldConfig: fieldConfig
    });
    collection = this.collection.filterByUnselected();
    view = new _views_select_view__WEBPACK_IMPORTED_MODULE_7__["SelectView"]({
      collection: collection,
      fieldModel: model
    }); // Provide a custom list filter for the autocomplete portion's AJAX data lists

    view.filterAjaxList = this.filterAjaxList.bind(this); // Rebuild from scratch

    this.showChildView('autocomplete', view);
  },

  /**
   *
   */
  showList: function showList() {
    var viewName, View, list; // Setup the view to be used

    viewName = this.fieldConfig.get('view_name');

    if (views[viewName] === undefined) {
      throw new Error("Invalid view name \"".concat(viewName, "\""));
    }

    View = views[viewName];
    list = new View({
      collection: this.collection,
      fieldModel: this.model
    });
    this.showChildView('list', list);
  },

  /**
   *
   */
  showAddNew: function showAddNew() {
    var addNew = new _views_add_new__WEBPACK_IMPORTED_MODULE_9__["AddNew"]({
      fieldModel: this.model
    });
    this.showChildView('addNew', addNew);
  },

  /**
   * List Views need to filter items already selected from their select from existing list.  The AJAX function
   * itself does not filter.
   *
   * @param data
   */
  filterAjaxList: function filterAjaxList(data) {
    var selectedItems = this.collection.filterBySelected();
    var returnList = []; // Loop through the items returned via ajax

    _.each(data.results, function (element) {
      element.text = element.name; // Select2 needs the "text" key but our model uses "name"
      // Only keep choices that haven't been selected yet, we don't want selected items in the autocomplete portion

      if (!selectedItems.get(element.id)) {
        returnList.push(element);
      }
    }); // The collection may be partial in ajax mode, make sure we add any items we didn't yet have


    this.collection.add(returnList);
    this.getChildView('autocomplete').setCollection(this.collection.filterByUnselected());
    return {
      'results': returnList
    };
  },

  /**
   *
   * @param childView
   */
  onChildviewSelectionLimitOver: function onChildviewSelectionLimitOver(childView) {
    var addNew = this.getChildView('addNew');

    if (addNew) {
      addNew.disable();
    }
  },

  /**
   *
   * @param childView
   */
  onChildviewSelectionLimitUnder: function onChildviewSelectionLimitUnder(childView) {
    var addNew = this.getChildView('addNew');

    if (addNew) {
      addNew.enable();
    }
  },

  /**
   * "Remove" in list view just toggles an item's selected attribute
   *
   * @param childView
   */
  onChildviewRemoveItemClick: function onChildviewRemoveItemClick(childView) {
    childView.model.toggleSelected();
    this.getChildView('list').render(); // Keep autocomplete in sync, removed items should now be available choices

    if ('list' === this.fieldConfig.get('view_name')) {
      this.buildAutocomplete();
    }
  },

  /**
   * @param childView
   */
  onChildviewAddNew: function onChildviewAddNew(childView) {
    var fieldConfig = this.model.get('fieldConfig');
    modalIFrame = new _core_iframe_frame__WEBPACK_IMPORTED_MODULE_2__["IframeFrame"]({
      title: fieldConfig.iframe_title_add,
      src: fieldConfig.iframe_src
    });
    this.setModalListeners();
    modalIFrame.modal.open();
  },

  /**
   * @param childView
   */
  onChildviewEditItemClick: function onChildviewEditItemClick(childView) {
    var fieldConfig = this.model.get('fieldConfig');
    modalIFrame = new _core_iframe_frame__WEBPACK_IMPORTED_MODULE_2__["IframeFrame"]({
      title: fieldConfig.iframe_title_edit,
      src: childView.ui.editButton.attr('href')
    });
    this.setModalListeners();
    modalIFrame.modal.open();
  },

  /**
   *
   * @param childView
   */
  onChildviewChangeSelected: function onChildviewChangeSelected(childView) {
    // Refresh the autocomplete and List View lists on autocomplete selection
    if (childView.fieldConfig.selectFromExisting) {
      _.defer(this.buildAutocomplete.bind(this));

      this.getChildView('list').render();
    }
  },
  setModalListeners: function setModalListeners() {
    jQuery(window).on('dfv:modal:update', this.modalSuccess.bind(this));
    jQuery(window).on('dfv:modal:cancel', this.modalCancel.bind(this));
  },
  clearModalListeners: function clearModalListeners() {
    jQuery(window).off('dfv:modal:update');
    jQuery(window).off('dfv:modal:cancel');
  },

  /**
   * @param event
   * @param data
   */
  modalSuccess: function modalSuccess(event, data) {
    var itemModel = this.collection.get(data.id);

    if (itemModel) {
      // Edit: update an existing model and force a re-render
      itemModel.set(data);
      this.getChildView('list').render();
    } else {
      // Add new: create a new model in the collection
      this.collection.add(data);
    }

    this.clearModalListeners();
    modalIFrame.modal.close({});
  },

  /**
   *
   */
  modalCancel: function modalCancel() {
    this.clearModalListeners();
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/relationship-model.js":
/*!**************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/relationship-model.js ***!
  \**************************************************************/
/*! exports provided: RelationshipModel, RelationshipCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationshipModel", function() { return RelationshipModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationshipCollection", function() { return RelationshipCollection; });
/*global jQuery, _, Backbone, Marionette */

/**
 *
 */
var RelationshipModel = Backbone.Model.extend({
  defaults: {
    'id': 0,
    'name': '',
    'icon': '',
    'link': '',
    'edit_link': '',
    'selected': false
  },
  toggleSelected: function toggleSelected() {
    this.set('selected', !this.get('selected'));
  }
});
/**
 *
 */

var RelationshipCollection = Backbone.Collection.extend({
  model: RelationshipModel,

  /**
   *
   * @param { ?string[] } ids
   */
  setSelected: function setSelected(ids) {
    this.map(function (thisModel) {
      var selected = _.contains(ids, thisModel.get('id') + '');

      thisModel.set('selected', selected);
    });
  },

  /**
   * Return a new collection containing just the selected items in this one
   *
   * @returns {*}
   */
  filterBySelected: function filterBySelected() {
    // Get an array with only the selected items
    var filtered = this.filter(function (itemModel) {
      return itemModel.get('selected');
    }); // this.filter is going to return an array, so create a collection out of it

    return new RelationshipCollection(filtered);
  },

  /**
   * Return a new collection containing just the unselected items in this one
   *
   * @returns {*}
   */
  filterByUnselected: function filterByUnselected() {
    // Get an array with only the unselected items
    var filtered = this.filter(function (itemModel) {
      return !itemModel.get('selected');
    }); // this.filter is going to return an array, so create a collection out of it

    return new RelationshipCollection(filtered);
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/views/add-new.js":
/*!*********************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/views/add-new.js ***!
  \*********************************************************/
/*! exports provided: AddNew */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddNew", function() { return AddNew; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<a href=\"/wp-admin?pods_modal=1\"\n\t\tclass=\"button pods-related-add-new pods-modal\"\n\t\tdata-pod-id=\"<%- fieldConfig.pod_id %>\"\n\t\tdata-field-id=\"<%- fieldConfig.id %>\"\n\t\tdata-item-id=\"<%- fieldConfig.item_id %>\">\n\t<%- PodsI18n.__( 'Add New' ) %>\n</a>\n";

var DISABLED_CLASS = 'button-disabled';
var AddNew = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'div',
  className: 'podsform-dfv-list-relationship-container',
  ui: {
    addButton: 'a.pods-related-add-new'
  },
  template: _.template(template),
  triggers: {
    'click @ui.addButton': 'add:new:click'
  },

  /**
   *
   */
  disable: function disable() {
    var addButton = this.getUI('addButton');
    addButton.addClass(DISABLED_CLASS); // Note: this just styles the link (button), click event enforces
  },

  /**
   *
   */
  enable: function enable() {
    var addButton = this.getUI('addButton');
    addButton.removeClass(DISABLED_CLASS); // Note: this just styles the link (button), click event enforces
  },

  /**
   *
   */
  onAddNewClick: function onAddNewClick() {
    var addButton = this.getUI('addButton'); // Only pass the event up the view chain if we're enabled

    if (!addButton.hasClass(DISABLED_CLASS)) {
      this.trigger('childview:add:new', this);
    }
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/views/checkbox-view.js":
/*!***************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/views/checkbox-view.js ***!
  \***************************************************************/
/*! exports provided: CheckboxItem, CheckboxView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxItem", function() { return CheckboxItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxView", function() { return CheckboxView; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<div class=\"pods-field pods-boolean\">\n\t<input\n\t\tname=\"<%- htmlAttr.name %>[<%= ordinal %>]\"\n\t\t<%= selected ? 'checked=\"checked\"' : '' %>\n\t\tdata-name-clean=\"<%- htmlAttr.name_clean %>\"\n\t\tdata-label=\"<%- fieldConfig.label %>\"\n\t\tid=\"<%- htmlAttr.id %><%= ordinal %>\"\n\t\tclass=\"pods-form-ui-field-type-pick\"\n\t\ttype=\"checkbox\" tabindex=\"2\" value=\"<%- id %>\">\n\t<label class=\"pods-form-ui-label\" for=\"<%- htmlAttr.id %><%= ordinal %>\">\n\t\t<%= name %>\n\t</label>\n</div>\n";

/**
 *
 */

var CheckboxItem = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'li',
  template: _.template(template),
  className: 'pods-pick',
  ui: {
    checkbox: 'input.pods-form-ui-field-type-pick'
  },
  triggers: {
    'click @ui.checkbox': 'toggle:selected'
  },
  modelEvents: {
    'change': 'modelChanged'
  },
  templateContext: function templateContext() {
    return {
      ordinal: this.model.collection.indexOf(this.model)
    };
  },
  modelChanged: function modelChanged() {
    this.render();
  }
});
/**
 *
 */

var CheckboxView = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldListView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'ul',
  className: 'pods-checkbox-view',
  childView: CheckboxItem,
  childViewEvents: {
    'toggle:selected': 'onChildviewToggleSelected'
  },

  /**
   *
   */
  onAttach: function onAttach() {
    // Check initial selection limit status and enforce it if needed
    if (!this.validateSelectionLimit()) {
      this.selectionLimitOver();
    }
  },

  /**
   *
   * @param childView
   */
  onChildviewToggleSelected: function onChildviewToggleSelected(childView) {
    childView.model.toggleSelected(); // Dynamically enforce selection limit

    if (this.validateSelectionLimit()) {
      this.selectionLimitUnder();
    } else {
      this.selectionLimitOver();
    }
  },

  /**
   * @returns {boolean} true if unlimited selections are allowed or we're below the selection limit
   */
  validateSelectionLimit: function validateSelectionLimit() {
    var fieldConfig = this.fieldModel.get('fieldConfig');
    var limit, numSelected;
    limit = +fieldConfig.pick_limit; // Unary plus will implicitly cast to number

    numSelected = this.collection.filterBySelected().length;
    return 0 === limit || numSelected < limit;
  },

  /**
   *
   */
  selectionLimitOver: function selectionLimitOver() {
    this.$el.find('input:checkbox:not(:checked)').prop('disabled', true);
    this.trigger('selection:limit:over', this);
  },

  /**
   *
   */
  selectionLimitUnder: function selectionLimitUnder() {
    this.$el.find('input:checkbox').prop('disabled', false);
    this.trigger('selection:limit:under', this);
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/views/list-view.js":
/*!***********************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/views/list-view.js ***!
  \***********************************************************/
/*! exports provided: ListItem, ListView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItem", function() { return ListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListView", function() { return ListView; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<input\n\t\t<% if ( 'single' === fieldConfig.pick_format_type ) { %>\n\t\t\tname=\"<%- htmlAttr.name %>\"\n\t\t\tid=\"<%- htmlAttr.id %>\"\n\t\t<% } else { %>\n\t\t\tname=\"<%- htmlAttr.name %>[<%= ordinal %>]\"\n\t\t\tid=\"<%- htmlAttr.id %><%= ordinal %>\"\n\t\t<% } %>\n\t\tdata-name-clean=\"<%- htmlAttr.name_clean %>\"\n\t\ttype=\"hidden\"\n\t\tvalue=\"<%- id %>\">\n<ul class=\"pods-dfv-list-meta relationship-item\">\n\t<% if ( 1 != fieldConfig.pick_limit ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-handle\"><span><%- PodsI18n.__( 'Reorder' ) %></span></li>\n\t<% } %>\n\t<% if ( 1 == fieldConfig.pick_show_icon ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-icon\">\n\t\t\t<% if ( '' == icon ) { %>\n\t\t\t\t<% if ( /^dashicons/.test( fieldConfig.default_icon ) ) { %>\n\t\t\t\t\t<span class=\"pinkynail dashicons <%- fieldConfig.default_icon %>\"></span>\n\t\t\t\t<% } else { %>\n\t\t\t\t\t<img class=\"pinkynail\" src=\"<%- fieldConfig.default_icon %>\" alt=\"Icon\">\n\t\t\t\t<% } %>\n\t\t\t<% } else { %>\n\t\t\t\t<% if ( /^dashicons/.test( icon ) ) { %>\n\t\t\t\t\t<span class=\"pinkynail dashicons <%- icon %>\"></span>\n\t\t\t\t<% } else { %>\n\t\t\t\t\t<img class=\"pinkynail\" src=\"<%- icon %>\" alt=\"Icon\">\n\t\t\t\t<% } %>\n\t\t\t<% } %>\n\t\t</li>\n\t<% } %>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-name\">\n\t\t<%= name %>\n\t</li>\n\t<li class=\"pods-dfv-list-col pods-dfv-list-remove\"><a href=\"#remove\" title=\"<%- PodsI18n.__( 'Deselect' ) %>\"><%- PodsI18n.__( 'Deselect' ) %></a></li>\n\t<% if ( 1 == fieldConfig.pick_show_view_link && '' != link ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-link\"><a href=\"<%- link %>\" title=\"<%- PodsI18n.__( 'View' ) %>\"  target=\"_blank\"><%- PodsI18n.__( 'View' ) %></a></li>\n\t<% } %>\n\t<% if ( 1 == fieldConfig.pick_show_edit_link && '' != edit_link ) { %>\n\t\t<li class=\"pods-dfv-list-col pods-dfv-list-edit\"><a href=\"<%- edit_link %>\" title=\"<%- PodsI18n.__( 'Edit' ) %>\" target=\"_blank\"><%- PodsI18n.__( 'Edit' ) %></a></li>\n\t<% } %>\n</ul>\n";

/**
 *
 */

var ListItem = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'li',
  className: 'pods-dfv-list-item pods-relationship',
  template: _.template(template),
  ui: {
    removeButton: '.pods-dfv-list-remove a',
    editButton: '.pods-dfv-list-edit a'
  },
  triggers: {
    'click @ui.removeButton': 'remove:item:click',
    'click @ui.editButton': 'edit:item:click'
  },
  templateContext: function templateContext() {
    return {
      ordinal: this.model.collection.indexOf(this.model)
    };
  }
});
/**
 *  Represents the markup of the container as a whole
 */

var ListView = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldListView"].extend({
  // Cache the template function for the overall container
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'ul',
  className: 'pods-dfv-list pods-relationship',
  childView: ListItem,
  // Pass these up the containment chain
  childViewTriggers: {
    'remove:item:click': 'childview:remove:item:click',
    'edit:item:click': 'childview:edit:item:click'
  },
  filter: function filter(child, index, collection) {
    return child.attributes.selected;
  },
  onAttach: function onAttach() {
    var fieldConfig = this.options.fieldModel.get('fieldConfig'); // @todo
    // http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833

    if (1 !== fieldConfig['pick_limit']) {
      // init sortable
      this.$el.sortable({
        containment: 'parent',
        axis: 'y',
        scrollSensitivity: 40,
        tolerance: 'pointer',
        opacity: 0.6
      });
    }
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/views/radio-view.js":
/*!************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/views/radio-view.js ***!
  \************************************************************/
/*! exports provided: RadioItem, RadioView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioItem", function() { return RadioItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioView", function() { return RadioView; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/*global jQuery, _, Backbone, Marionette, wp */
var template = "<div class=\"pods-field pods-boolean\">\n\t<input\n\t\t\tname=\"<%- htmlAttr.name %>\"\n\t\t\tdata-name-clean=\"<%- htmlAttr.name_clean %>\"\n\t\t\tdata-label=\"<%- fieldConfig.label %>\"\n\t\t\tid=\"<%- htmlAttr.id %><%= ordinal %>\"\n\t\t\tclass=\"pods-form-ui-field-type-pick pods-form-ui-field-name-<%- htmlAttr.name_clean %>\"\n\t\t\ttype=\"radio\"\n\t\t\t<% if ( selected ) { %>\n\t\t\t\tchecked=\"CHECKED\"\n\t\t\t<% } %>\n\t\t\tvalue=\"<%- id %>\"\n\t\t\ttabindex=\"2\">\n\t<label\n\t\tclass=\"pods-form-ui-label pods-form-ui-label-<%- htmlAttr.id %><%= ordinal %>\"\n\t\tfor=\"<%- htmlAttr.id %><%= ordinal %>\">\n\t\t<%= name %>\n\t</label>\n</div>\n";

/**
 *
 */

var RadioItem = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'li',
  template: _.template(template),
  templateContext: function templateContext() {
    return {
      ordinal: this.model.collection.indexOf(this.model) + 1 // One based indexing unlike checkboxes

    };
  },
  modelChanged: function modelChanged() {
    this.render();
  }
});
/**
 *
 */

var RadioView = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldListView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'ul',
  className: 'pods-radio',
  childView: RadioItem
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/pick/views/select-view.js":
/*!*************************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/pick/views/select-view.js ***!
  \*************************************************************/
/*! exports provided: SelectItem, Optgroup, SelectView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectItem", function() { return SelectItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Optgroup", function() { return Optgroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectView", function() { return SelectView; });
/* harmony import */ var _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/pods-field-views */ "./ui/js/pods-dfv/src/core/pods-field-views.js");
/* harmony import */ var _relationship_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../relationship-model */ "./ui/js/pods-dfv/src/fields/pick/relationship-model.js");
/*global jQuery, _, Backbone, Marionette, select2, sprintf, wp, ajaxurl, PodsI18n */
// Note: this is a template-less view


var SELECT2_UL_TARGET = 'ul.select2-selection__rendered';
var SELECT2_SELECTED_TARGET = '.select2-selection__choice';
/**
 * option
 *
 * @extends Backbone.View
 */

var SelectItem = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'option',
  template: false,
  initialize: function initialize(options) {
    this.$el.val(this.model.get('id'));
    this.$el.html(this.model.get('name'));

    if (this.model.get('selected')) {
      this.$el.prop('selected', 'selected');
    }
  }
});
/**
 * optgroup
 *
 * @extends Backbone.View
 */

var Optgroup = _core_pods_field_views__WEBPACK_IMPORTED_MODULE_0__["PodsFieldListView"].extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'optgroup',
  childView: SelectItem,
  attributes: function attributes() {
    return {
      label: this.model.get('label')
    };
  }
});
/**
 * select
 *
 * @extends Backbone.View
 */

var SelectView = Marionette.CollectionView.extend({
  childViewEventPrefix: false,
  // Disable implicit event listeners in favor of explicit childViewTriggers and childViewEvents
  tagName: 'select',
  triggers: {
    'change': {
      event: 'change:selected',
      stopPropagation: false
    }
  },
  multiLastValidSelection: [],

  /**
   *
   * @param newCollection
   */
  setCollection: function setCollection(newCollection) {
    this.collection = newCollection;
  },

  /**
   *
   * @param options
   */
  initialize: function initialize(options) {
    this.fieldModel = options.fieldModel;
    this.fieldConfig = this.fieldModel.get('fieldConfig');
  },

  /**
   * Set the proper child view (optgroups or no)
   *
   * @param item
   * @returns {*}
   */
  childView: function childView(item) {
    if (this.fieldConfig.optgroup) {
      return Optgroup;
    } else {
      return SelectItem;
    }
  },

  /**
   * todo: We're bypassing the PodsFieldListView functionality, need to explicitly include it for now
   *
   * @param model
   * @param index
   * @returns {{fieldModel: *}}
   */
  childViewOptions: function childViewOptions(model, index) {
    var returnOptions = {
      fieldModel: this.fieldModel
    };

    if (this.fieldConfig.optgroup) {
      returnOptions.collection = new _relationship_model__WEBPACK_IMPORTED_MODULE_1__["RelationshipCollection"](model.get('collection'));
    }

    return returnOptions;
  },

  /**
   * todo: We're bypassing the PodsFieldListView functionality, need to explicitly include it for now
   *
   * @returns {{}}
   */
  serializeData: function serializeData() {
    var fieldModel = this.options.fieldModel;
    var data = this.model ? this.model.toJSON() : {};
    data.htmlAttr = fieldModel.get('attributes');
    data.fieldConfig = fieldModel.get('fieldConfig');
    return data;
  },

  /**
   *
   */
  attributes: function attributes() {
    /**
     * @param {string} htmlAttr.name
     * @param {string} htmlAttr.class
     * @param {string} htmlAttr.name_clean
     * @param {string} htmlAttr.id
     *
     * @param {string} fieldConfig.pick_format_type 'single' or 'multi'
     */
    var fieldModel = this.options.fieldModel;
    var htmlAttr = fieldModel.get('htmlAttr');
    var fieldConfig = fieldModel.get('fieldConfig');
    var name = htmlAttr.name;

    if ('multi' === fieldConfig.pick_format_type) {
      name = name + '[]';
    }

    return {
      'name': name,
      'class': htmlAttr["class"],
      'data-name-clean': htmlAttr.name_clean,
      'id': htmlAttr.id,
      'tabindex': '2',
      'multiple': 'multi' === fieldConfig.pick_format_type
    };
  },

  /**
   * Setup to be done once attached to the DOM.  Select2 has some setup needs.
   *
   * @var {RelationshipCollection} this.collection
   */
  onAttach: function onAttach() {
    var view_name = this.fieldConfig.view_name;
    var format_type = this.fieldConfig.pick_format_type; // Initialize select2 fields

    if ('select2' === view_name) {
      this.setupSelect2();
    } // Check initial selection limit status for regular multiselect and enforce it if needed


    if ('select' === view_name && 'multi' === format_type) {
      // Store initial selection in case we need to revert back from an invalid state
      this.multiLastValidSelection = this.$el.val();
    } // If we're at the limit: disable all unselected items so no selections can be added


    if (!this.validateSelectionLimit()) {
      this.selectionLimitOver();
    }
  },

  /**
   * @var {RelationshipCollection} this.collection
   */
  onChangeSelected: function onChangeSelected() {
    var limit = +this.fieldConfig.pick_limit; // Unary plus will implicitly cast to number

    var view_name = this.fieldConfig.view_name;
    var format_type = this.fieldConfig.pick_format_type; // Regular multiselect may need to reject the selection change

    if ('select' === view_name && 'multi' === format_type) {
      // Has the selection gone OVER the limit?  Can occur with consecutive item selection.
      if (null !== this.$el.val() && 0 !== limit && limit < this.$el.val().length) {
        // Revert to the last valid selection and punt on what they attempted
        this.$el.val(this.multiLastValidSelection);
        window.alert("".concat(PodsI18n.__('You can only select'), " ").concat(sprintf(PodsI18n._n('%s item', '%s items', limit), limit)));
        this.trigger('childview:change:selected', this);
        return;
      }
    } // Update the collection and last valid selection based on the new selections


    this.collection.setSelected(this.$el.val());
    this.multiLastValidSelection = this.$el.val(); // Dynamically enforce selection limits

    if (this.validateSelectionLimit()) {
      this.selectionLimitUnder();
    } else {
      this.selectionLimitOver();
    }

    this.trigger('childview:change:selected', this);
  },
  onBeforeDetach: function onBeforeDetach() {
    this.$el.selectWoo('destroy');
  },

  /**
   * @var {RelationshipCollection} this.collection
   *
   * @returns {boolean} true if unlimited selections are allowed or we're below the selection limit
   */
  validateSelectionLimit: function validateSelectionLimit() {
    var limit, numSelected;
    limit = +this.fieldConfig.pick_limit; // Unary plus will implicitly cast to number

    numSelected = this.collection.filterBySelected().length;
    return 0 === limit || numSelected < limit;
  },

  /**
   *
   */
  selectionLimitOver: function selectionLimitOver() {
    var viewName = this.fieldConfig.view_name;
    var formatType = this.fieldConfig.pick_format_type;

    if ('select' === viewName && 'multi' === formatType) {
      // At the limit: disable all unselected items so no further selections can be added
      this.$el.find('option:not(:selected)').prop('disabled', true);
    }

    this.trigger('childview:selection:limit:over', this);
  },

  /**
   *
   */
  selectionLimitUnder: function selectionLimitUnder() {
    var viewName = this.fieldConfig.view_name;
    var formatType = this.fieldConfig.pick_format_type;

    if ('select' === viewName && 'multi' === formatType) {
      // Not at limit, make sure all items are enabled
      this.$el.find('option').prop('disabled', false);
    }

    this.trigger('childview:selection:limit:under', this);
  },

  /**
   * No filtering, by default.  Consuming views can override this function to provide custom filtering
   * (e.g. List View needs to filter items already selected for its select from existing list)
   *
   * @param data
   */
  filterAjaxList: function filterAjaxList(data) {
    var selectedItems = this.collection.filterBySelected();
    var returnList = [];

    _.each(data.results, function (element) {
      element.text = element.name; // Select2 needs the "text" key but our model uses "name"
      // Only keep choices that haven't been selected yet, we don't want selected items in the autocomplete portion

      if (!selectedItems.get(element.id)) {
        returnList.push(element);
      }
    });

    return {
      'results': returnList
    };
  },

  /**
   * Initialize Select2, setup drag-drop reordering
   */
  setupSelect2: function setupSelect2() {
    var self = this;
    var $select2 = this.$el;
    var fieldConfig = this.options.fieldModel.get('fieldConfig');
    var ajaxData = fieldConfig.ajax_data;
    var select2Overrides = fieldConfig.select2_overrides;
    var limit = fieldConfig.pick_limit;
    var isSingle = 'single' === fieldConfig.pick_format_type;
    var selectedCount = this.collection.filterBySelected().length;
    var $ulContainer, select2Options, placeholder; // 'placeholder' for single select requires an empty option.  None of the examples set selected but
    // it did not work for me in testing with just an empty option like the examples.
    //
    // https://select2.org/placeholders#single-select-placeholders
    // https://github.com/select2/select2/issues/3553

    if (0 === selectedCount && isSingle) {
      $select2.prepend('<option selected="selected">');
    } // ToDo:
    // limitDisable is only used to control the List View's select2 component, it won't be set
    // for regular autocomplete.  This function should be generic and not have to poke around with
    // special properties like this for exception cases.


    if (fieldConfig.limitDisable) {
      placeholder = "".concat(PodsI18n.__('You can only select'), " ").concat(sprintf(PodsI18n._n('%s item', '%s items', limit), limit));
    } else {
      placeholder = "".concat(PodsI18n.__('Search'), " ").concat(fieldConfig.label, "...");
    }

    select2Options = {
      maximumSelectionLength: isSingle ? undefined : limit,
      // Should not be set for single select, messes up placeholder
      placeholder: placeholder,
      allowClear: isSingle,
      disabled: fieldConfig.limitDisable,
      tags: fieldConfig.pick_taggable,
      escapeMarkup: function escapeMarkup(text) {
        return text;
      }
    };

    if (ajaxData.ajax) {
      jQuery.extend(select2Options, {
        minimumInputLength: ajaxData.minimum_input_length,
        ajax: {
          url: ajaxurl + '?pods_ajax=1',
          type: 'POST',
          dataType: 'json',
          delay: ajaxData.delay,
          data: function data(params) {
            return {
              _wpnonce: ajaxData._wpnonce,
              action: 'pods_relationship',
              method: 'select2',
              pod: ajaxData.pod,
              field: ajaxData.field,
              uri: ajaxData.uri,
              id: ajaxData.id,
              query: params.term // ToDo: term{lang}

            };
          },
          processResults: function processResults(data, params) {
            return self.filterAjaxList(data, params);
          }
        }
      });
    } // Initialize select2


    $select2.selectWoo(jQuery.extend(true, select2Options, select2Overrides)); // Get a reference to the ul container of the visual UI portion.  Can't do this until select2 is initialized

    $ulContainer = $select2.parent().find(SELECT2_UL_TARGET); // Make the list drag-drop sortable

    $ulContainer.sortable({
      containment: 'parent'
    }); // With select2 4.0, sortable is just reordering the UI elements.  Keep the underlying select/option list
    // synced with the changes.  See: https://github.com/select2/select2/issues/3004

    $ulContainer.on('sortstop', function () {
      var $selected = $ulContainer.find(SELECT2_SELECTED_TARGET).get().reverse();
      jQuery($selected).each(function () {
        var id = jQuery(this).data('data').id;
        var option = $select2.find('option[value="' + id + '"]')[0];
        $select2.prepend(option);
      });
    });
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/text/text.js":
/*!************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/text/text.js ***!
  \************************************************/
/*! exports provided: PodsDFVText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVText", function() { return PodsDFVText; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_base_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/base-input */ "./ui/js/pods-dfv/src/components/base-input.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var PodsDFVText = function PodsDFVText(props) {
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_base_input__WEBPACK_IMPORTED_MODULE_1__["PodsDFVBaseInput"], _extends({
    type: "text"
  }, props));
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/fields/textarea/textarea.js":
/*!********************************************************!*\
  !*** ./ui/js/pods-dfv/src/fields/textarea/textarea.js ***!
  \********************************************************/
/*! exports provided: PodsDFVTextArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PodsDFVTextArea", function() { return PodsDFVTextArea; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable react/prop-types */

var PodsDFVTextArea = function PodsDFVTextArea(props) {
  // Default implementation if onChange is omitted from props
  function handleChange(event) {
    props.setValue(event.target.value);
  }

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("textarea", {
    value: props.value,
    name: props.htmlAttr.name,
    id: props.htmlAttr.id,
    className: props.className,
    "data-name-clean": props.htmlAttr.name_clean,
    "data-label": props.fieldConfig.label,
    onChange: props.onChange || handleChange,
    onBlur: props.onBlur
  }, props.value);
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/model-manifest.js":
/*!**********************************************!*\
  !*** ./ui/js/pods-dfv/src/model-manifest.js ***!
  \**********************************************/
/*! exports provided: PodsDFVFieldModel, RelationshipModel, RelationshipCollection, FileUploadModel, FileUploadCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_pods_field_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/pods-field-model */ "./ui/js/pods-dfv/src/core/pods-field-model.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PodsDFVFieldModel", function() { return _core_pods_field_model__WEBPACK_IMPORTED_MODULE_0__["PodsDFVFieldModel"]; });

/* harmony import */ var _fields_pick_relationship_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fields/pick/relationship-model */ "./ui/js/pods-dfv/src/fields/pick/relationship-model.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RelationshipModel", function() { return _fields_pick_relationship_model__WEBPACK_IMPORTED_MODULE_1__["RelationshipModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RelationshipCollection", function() { return _fields_pick_relationship_model__WEBPACK_IMPORTED_MODULE_1__["RelationshipCollection"]; });

/* harmony import */ var _fields_file_upload_file_upload_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fields/file-upload/file-upload-model */ "./ui/js/pods-dfv/src/fields/file-upload/file-upload-model.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileUploadModel", function() { return _fields_file_upload_file_upload_model__WEBPACK_IMPORTED_MODULE_2__["FileUploadModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileUploadCollection", function() { return _fields_file_upload_file_upload_model__WEBPACK_IMPORTED_MODULE_2__["FileUploadCollection"]; });





/***/ }),

/***/ "./ui/js/pods-dfv/src/pods-dfv.js":
/*!****************************************!*\
  !*** ./ui/js/pods-dfv/src/pods-dfv.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_renderers_mn_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/renderers/mn-renderer */ "./ui/js/pods-dfv/src/core/renderers/mn-renderer.js");
/* harmony import */ var _core_renderers_react_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/renderers/react-renderer */ "./ui/js/pods-dfv/src/core/renderers/react-renderer.js");
/* harmony import */ var _core_renderers_react_direct_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/renderers/react-direct-renderer */ "./ui/js/pods-dfv/src/core/renderers/react-direct-renderer.js");
/* harmony import */ var _core_gb_modal_listener__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/gb-modal-listener */ "./ui/js/pods-dfv/src/core/gb-modal-listener.js");
/* harmony import */ var _field_manifest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./field-manifest */ "./ui/js/pods-dfv/src/field-manifest.js");
/* harmony import */ var _model_manifest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model-manifest */ "./ui/js/pods-dfv/src/model-manifest.js");







var SCRIPT_TARGET = 'script.pods-dfv-field-data'; // What scripts to look for

var fieldClasses = {
  'file': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["FileUpload"],
    renderer: _core_renderers_mn_renderer__WEBPACK_IMPORTED_MODULE_1__["mnRenderer"]
  },
  'avatar': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["FileUpload"],
    renderer: _core_renderers_mn_renderer__WEBPACK_IMPORTED_MODULE_1__["mnRenderer"]
  },
  'pick': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["Pick"],
    renderer: _core_renderers_mn_renderer__WEBPACK_IMPORTED_MODULE_1__["mnRenderer"]
  },
  'text': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["PodsDFVText"],
    renderer: _core_renderers_react_renderer__WEBPACK_IMPORTED_MODULE_2__["reactRenderer"]
  },
  'password': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["PodsDFVPassword"],
    renderer: _core_renderers_react_renderer__WEBPACK_IMPORTED_MODULE_2__["reactRenderer"]
  },
  'number': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["PodsDFVNumber"],
    renderer: _core_renderers_react_renderer__WEBPACK_IMPORTED_MODULE_2__["reactRenderer"]
  },
  'email': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["PodsDFVEmail"],
    renderer: _core_renderers_react_renderer__WEBPACK_IMPORTED_MODULE_2__["reactRenderer"]
  },
  'paragraph': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["PodsDFVTextArea"],
    renderer: _core_renderers_react_renderer__WEBPACK_IMPORTED_MODULE_2__["reactRenderer"]
  },
  'edit-pod': {
    FieldClass: _field_manifest__WEBPACK_IMPORTED_MODULE_5__["PodsDFVEditPod"],
    renderer: _core_renderers_react_direct_renderer__WEBPACK_IMPORTED_MODULE_3__["reactDirectRenderer"]
  }
};
var PodsDFV = {
  fields: fieldClasses,
  models: _model_manifest__WEBPACK_IMPORTED_MODULE_6__,
  fieldInstances: {},

  /**
   *
   */
  init: function init() {
    // Find all in-line data scripts
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(SCRIPT_TARGET).each(function () {
      var parent = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parent().get(0);
      var data = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.parseJSON(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).html()); // Kludge to disable the "Add New" button if we're inside a media modal.  This should
      // eventually be ironed out so we can use Add New from this context (see #4864)

      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parents('.media-modal-content').length) {
        // eslint-disable-next-line
        data.fieldConfig.pick_allow_add_new = 0;
      } // Ignore anything that doesn't have the field type set


      if (data.fieldType !== undefined) {
        var field = fieldClasses[data.fieldType];

        if (field !== undefined) {
          //self.fieldInstances[ data.htmlAttr.id ] = field.renderer( field.fieldClass, data );
          field.renderer(field.FieldClass, parent, data);
        }
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).remove();
    });
  },
  isModalWindow: function isModalWindow() {
    return -1 !== location.search.indexOf('pods_modal=');
  },
  isGutenbergEditorLoaded: function isGutenbergEditorLoaded() {
    return wp.data !== undefined && wp.data.select('core/editor') !== undefined;
  }
};
/* harmony default export */ __webpack_exports__["default"] = (PodsDFV);
/**
 * Kick everything off on DOMContentLoaded
 */

document.addEventListener('DOMContentLoaded', function () {
  PodsDFV.init(); // Load the Gutenberg modal listener if we're inside a Pods modal with Gutenberg active

  if (PodsDFV.isModalWindow() && PodsDFV.isGutenbergEditorLoaded()) {
    _core_gb_modal_listener__WEBPACK_IMPORTED_MODULE_4__["PodsGbModalListener"].init();
  }
});

/***/ }),

/***/ "./ui/js/pods-dfv/src/validation/validation-rules.js":
/*!***********************************************************!*\
  !*** ./ui/js/pods-dfv/src/validation/validation-rules.js ***!
  \***********************************************************/
/*! exports provided: validationRules */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validationRules", function() { return validationRules; });
var _wp$i18n = wp.i18n,
    __ = _wp$i18n.__,
    sprintf = _wp$i18n.sprintf;
var validationRules = {
  required: function required(value, fieldLabel) {
    return {
      facts: {
        value: value
      },
      conditions: {
        value: {
          equal: ''
        }
      },
      event: {
        message: sprintf(__('%s is required.', 'pods'), fieldLabel)
      }
    };
  },
  max: function max(value, _max) {
    return {
      facts: {
        numericValue: value * 1,
        max: _max * 1
      },
      conditions: {
        numericValue: {
          greater: '$max'
        }
      },
      event: {
        message: sprintf(__('Exceeds the maximum value of %s', 'pods'), _max)
      }
    };
  },
  min: function min(value, _min) {
    return {
      facts: {
        numericValue: value * 1,
        min: _min * 1
      },
      conditions: {
        numericValue: {
          less: '$min'
        }
      },
      event: {
        message: sprintf(__('Below the minimum value of %s', 'pods'), _min)
      }
    };
  },
  emailFormat: function emailFormat(value) {
    var emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return {
      facts: {
        value: value,
        emailRegex: emailRegex
      },
      conditions: {
        not: {
          or: [{
            value: {
              equal: ''
            }
          }, {
            emailRegex: {
              matches: value
            }
          }]
        }
      },
      event: {
        message: __('Invalid email address format')
      }
    };
  }
};

/***/ }),

/***/ "./ui/js/pods-dfv/src/validation/validation.js":
/*!*****************************************************!*\
  !*** ./ui/js/pods-dfv/src/validation/validation.js ***!
  \*****************************************************/
/*! exports provided: podsValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "podsValidation", function() { return podsValidation; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var json_rules_engine_simplified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! json-rules-engine-simplified */ "./node_modules/json-rules-engine-simplified/lib/index.js");
/* harmony import */ var json_rules_engine_simplified__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(json_rules_engine_simplified__WEBPACK_IMPORTED_MODULE_1__);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


var useState = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState;
var useEffect = react__WEBPACK_IMPORTED_MODULE_0___default.a.useEffect;

/**
 *
 * @return
 * {
 *     {function} addRules
 *     {function} useValidation,
 * 	}
 */

var podsValidation = function podsValidation() {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      validationMessages = _useState2[0],
      setValidationMessages = _useState2[1];

  var rules = [];
  var facts = {};
  /**
   *
   * @param conditionalRules
   */

  var addRules = function addRules(conditionalRules) {
    conditionalRules.forEach(function (conditionalRule) {
      if (conditionalRule.condition) {
        rules.push(conditionalRule.rule);

        if (conditionalRule.rule.facts) {
          facts = Object.assign(facts, conditionalRule.rule.facts);
        }
      }
    });
  };
  /**
   *
   * @return {Promise<any>}
   */


  var checkValidation = function checkValidation() {
    var rulesEngine = new json_rules_engine_simplified__WEBPACK_IMPORTED_MODULE_1___default.a(rules);
    var messages = [];
    return new Promise(function (resolve) {
      // noinspection JSUnresolvedFunction
      rulesEngine.run(facts).then(function (events) {
        events.forEach(function (event) {
          messages.push(event.message);
        });
      })["finally"](function () {
        resolve(messages);
      });
    });
  };
  /**
   *
   * @param {string} value The field's value
   *
   * @return {string} Array of messages for all validation failures
   */


  var useValidation = function useValidation(value) {
    useEffect(function () {
      checkValidation().then(function (messages) {
        return setValidationMessages(messages);
      });
    }, [value]);
    return validationMessages;
  };

  return {
    addRules: addRules,
    useValidation: useValidation
  };
};

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = lodash;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),

/***/ "react-dom":
/*!***************************!*\
  !*** external "ReactDOM" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JyYWNrZXRzMmRvdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL21haW4tdGFicy9maWVsZC1ncm91cHMuc2NzcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2QvbWFpbi10YWJzL21hbmFnZS1maWVsZHMuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jdXJyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvdHNwbGl0LmpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYXN0LWJpbmQvYmluZC1sb29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uLXJ1bGVzLWVuZ2luZS1zaW1wbGlmaWVkL2xpYi9FbmdpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzb24tcnVsZXMtZW5naW5lLXNpbXBsaWZpZWQvbGliL2FwcGxpY2FibGVBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uLXJ1bGVzLWVuZ2luZS1zaW1wbGlmaWVkL2xpYi9jaGVja0ZpZWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uLXJ1bGVzLWVuZ2luZS1zaW1wbGlmaWVkL2xpYi9jb25kaXRpb25zTWVldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbi1ydWxlcy1lbmdpbmUtc2ltcGxpZmllZC9saWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uLXJ1bGVzLWVuZ2luZS1zaW1wbGlmaWVkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbi1ydWxlcy1lbmdpbmUtc2ltcGxpZmllZC9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzb24tcnVsZXMtZW5naW5lLXNpbXBsaWZpZWQvbGliL3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmVkaWNhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWRpY2F0ZS9saWIvY2hhaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWRpY2F0ZS9saWIvb3RoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWRpY2F0ZS9saWIvcHJlZGljYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJlZGljYXRlL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc21vb3RoLWRuZC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWxlY3RuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbW9vdGgtZG5kL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL2VkaXQtcG9kLW5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL2VkaXQtcG9kLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9oYW5kbGUtc3VibWl0LmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9tYWluLXRhYnMvYWN0aXZlLXRhYi1jb250ZW50LmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9tYWluLXRhYnMvZHluYW1pYy10YWItY29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2QvbWFpbi10YWJzL2ZpZWxkLWdyb3Vwcy5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2QvbWFpbi10YWJzL2ZpZWxkLWdyb3Vwcy5zY3NzPzRlY2YiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL21haW4tdGFicy9maWVsZC1saXN0LmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9tYWluLXRhYnMvbWFuYWdlLWZpZWxkcy5zY3NzPzA5M2EiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3Bvc3Rib3guanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3NhdmUtc3RhdHVzLW1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3NsdWdnYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2Qvc3RvcmUvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2Qvc3RvcmUvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9zdG9yZS9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9zdG9yZS9zZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3N0b3JlL3N0YXRlLXBhdGhzLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9zdG9yZS9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvY29tcG9uZW50cy9iYXNlLWlucHV0LmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb21wb25lbnRzL2ZpZWxkLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvY29tcG9uZW50cy9maWVsZC1vcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2NvbXBvbmVudHMvaGVscC10b29sdGlwLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb21wb25lbnRzL3RhYnMvcG9kcy1uYXYtdGFiLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb21wb25lbnRzL3ZhbGlkYXRpb24tbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2NvcmUvZGZ2LW1vZGFsLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb3JlL2diLW1vZGFsLWxpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb3JlL2lmcmFtZS1mcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvY29yZS9wb2RzLWZpZWxkLW1vZGVsLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb3JlL3BvZHMtZmllbGQtdmlld3MuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2NvcmUvcmVuZGVyZXJzL21uLXJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9jb3JlL3JlbmRlcmVycy9yZWFjdC1kaXJlY3QtcmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2NvcmUvcmVuZGVyZXJzL3JlYWN0LXJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZC1tYW5pZmVzdC5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL2VtYWlsL2VtYWlsLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZHMvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQtbW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3VwbG9hZGVycy9tZWRpYS1tb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3VwbG9hZGVycy9wbHVwbG9hZC5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3VwbG9hZGVycy9wb2RzLWZpbGUtdXBsb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC92aWV3cy9maWxlLXVwbG9hZC1mb3JtLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZHMvZmlsZS11cGxvYWQvdmlld3MvZmlsZS11cGxvYWQtbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3ZpZXdzL2ZpbGUtdXBsb2FkLXF1ZXVlLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZHMvbnVtYmVyL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL3Bhc3N3b3JkL3Bhc3N3b3JkLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay9waWNrLWZpZWxkLW1vZGVsLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay9waWNrLmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay9yZWxhdGlvbnNoaXAtbW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3ZpZXdzL2FkZC1uZXcuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3ZpZXdzL2NoZWNrYm94LXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3ZpZXdzL2xpc3Qtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svdmlld3MvcmFkaW8tdmlldy5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svdmlld3Mvc2VsZWN0LXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy90ZXh0L3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL2ZpZWxkcy90ZXh0YXJlYS90ZXh0YXJlYS5qcyIsIndlYnBhY2s6Ly8vLi91aS9qcy9wb2RzLWRmdi9zcmMvbW9kZWwtbWFuaWZlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL3BvZHMtZGZ2LmpzIiwid2VicGFjazovLy8uL3VpL2pzL3BvZHMtZGZ2L3NyYy92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcnVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vdWkvanMvcG9kcy1kZnYvc3JjL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJsb2Rhc2hcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIlJlYWN0RE9NXCIiXSwibmFtZXMiOlsiX18iLCJ3cCIsImkxOG4iLCJkYXRhIiwid2l0aFNlbGVjdCIsIndpdGhEaXNwYXRjaCIsImNvbXBvc2UiLCJFZGl0UG9kTmFtZSIsInNlbGVjdCIsInBvZE5hbWUiLCJTVE9SRV9LRVlfRURJVF9QT0QiLCJnZXRQb2ROYW1lIiwiZGlzcGF0Y2giLCJzZXRQb2ROYW1lIiwicHJvcHMiLCJTdG9yZVN1YnNjcmliZSIsInN0b3JlU2VsZWN0IiwidGFicyIsImdldFRhYnMiLCJhY3RpdmVUYWIiLCJnZXRBY3RpdmVUYWIiLCJ0YWJPcHRpb25zIiwiZ2V0VGFiT3B0aW9ucyIsImdyb3VwcyIsImdldEdyb3VwcyIsImdldE9wdGlvblZhbHVlIiwiZ2V0R3JvdXBGaWVsZHMiLCJzdG9yZURpc3BhdGNoIiwic2V0QWN0aXZlVGFiIiwic2V0T3B0aW9uVmFsdWUiLCJyZW9yZGVyR3JvdXBJdGVtIiwiUG9kc0RGVkVkaXRQb2QiLCJ3aW5kb3ciLCJlIiwiaGFuZGxlU3VibWl0IiwiQUpBWF9BQ1RJT04iLCJwcmV2ZW50RGVmYXVsdCIsInJlcXVlc3REYXRhIiwicG9kTWV0YSIsImlkIiwibmFtZSIsIm5vbmNlIiwiZmllbGRzIiwiQWN0aXZlVGFiQ29udGVudCIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFycmF5IiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJzdHJpbmciLCJzcHJpbnRmIiwiTUlTU0lORyIsIkR5bmFtaWNUYWJDb250ZW50IiwiZ2V0TGFiZWxWYWx1ZSIsImxhYmVsRm9ybWF0IiwicGFyYW1PcHRpb24iLCJwYXJhbURlZmF1bHQiLCJwYXJhbSIsIm1hcCIsIm9wdGlvbiIsInR5cGUiLCJsYWJlbCIsImxhYmVsX3BhcmFtIiwicGFyYW1fZGVmYXVsdCIsInZhbHVlIiwiaGVscCIsIkRlcGVuZGVudEZpZWxkT3B0aW9uIiwiZmllbGRUeXBlIiwiZGVwZW5kZW50cyIsImhhbmRsZUlucHV0Q2hhbmdlIiwidGFyZ2V0IiwiY2hlY2tlZCIsIm1lZXRzRGVwZW5kZW5jaWVzIiwiaGVscFRleHQiLCJhbnkiLCJvYmplY3QiLCJkZXBlbmRlbmNpZXMiLCJyZXRWYWwiLCJpc09iamVjdCIsImVhY2giLCJkZXBlbmRlbnRWYWx1ZSIsImRlcGVuZGVudE9wdGlvbk5hbWUiLCJ1c2VTdGF0ZSIsIlJlYWN0IiwiRGFzaGljb24iLCJjb21wb25lbnRzIiwiRmllbGRHcm91cHMiLCJoYW5kbGVHcm91cERyb3AiLCJkcmFnUmVzdWx0IiwicmVtb3ZlZEluZGV4IiwiYWRkZWRJbmRleCIsInBheWxvYWQiLCJjb250YWluZXJQcm9wcyIsImdyb3VwTmFtZSIsImxvY2tBeGlzIiwiZHJhZ0hhbmRsZVNlbGVjdG9yIiwiZHJhZ0NsYXNzIiwib25Ecm9wIiwidGhpc0dyb3VwIiwiRmllbGRHcm91cCIsIlRvZ2dsZSIsImV4cGFuZGVkIiwic2V0RXhwYW5kZWQiLCJ0b2dnbGVFeHBhbmRlZCIsIkZpZWxkTGlzdCIsImhhbmRsZUZpZWxkRHJvcCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJ0aGlzRmllbGQiLCJyZXF1aXJlZCIsIkZpZWxkTGlzdEl0ZW0iLCJmaWVsZE5hbWUiLCJmaWVsZExhYmVsIiwibnVtYmVyIiwiRmllbGRIZWFkZXIiLCJQb3N0Ym94IiwiaXNTYXZpbmciLCJTcGlubmVyIiwiU2F2ZVN0YXR1c01lc3NhZ2UiLCJzYXZlU3RhdHVzIiwiZ2V0U2F2ZVN0YXR1cyIsInVpQ29uc3RhbnRzIiwic2F2ZVN0YXR1c2VzIiwiU0FWSU5HIiwiU0FWRV9TVUNDRVNTIiwiU0FWRV9FUlJPUiIsIlBvZHNERlZTbHVnZ2FibGUiLCJlZGl0aW5nIiwic2V0RWRpdGluZyIsImxvY2FsVmFsdWUiLCJzZXRMb2NhbFZhbHVlIiwiaGFuZGxlVmFsdWVDaGFuZ2UiLCJuZXdWYWx1ZSIsImhhbmRsZUVkaXRDbGljayIsImhhbmRsZU9rQ2xpY2siLCJ1cGRhdGVWYWx1ZSIsImhhbmRsZUNhbmNlbENsaWNrIiwiTm90RWRpdGluZyIsImN1cnNvciIsIkVkaXRpbmciLCJoYW5kbGVGb2N1cyIsImFjdGlvbnMiLCJTRVRfQUNUSVZFX1RBQiIsInNldFNhdmVTdGF0dXMiLCJTRVRfU0FWRV9TVEFUVVMiLCJzZXRPcHRpb25JdGVtVmFsdWUiLCJvcHRpb25OYW1lIiwiaXRlbU5hbWUiLCJpdGVtVmFsdWUiLCJvcHRpb25Db25zdGFudHMiLCJTRVRfT1BUSU9OX0lURU1fVkFMVUUiLCJvbGRJbmRleCIsIm5ld0luZGV4IiwiZ3JvdXBDb25zdGFudHMiLCJSRU9SREVSX0dST1VQX0lURU0iLCJwb2RNZXRhQ29uc3RhbnRzIiwiU0VUX1BPRF9OQU1FIiwic2V0UG9kTWV0YVZhbHVlIiwia2V5IiwiU0VUX1BPRF9NRVRBX1ZBTFVFIiwidGFiTmFtZXMiLCJNQU5BR0VfRklFTERTIiwiTEFCRUxTIiwiQURNSU5fVUkiLCJBRFZBTkNFRF9PUFRJT05TIiwiQVVUT19URU1QTEFURV9PUFRJT05TIiwiUkVTVF9BUEkiLCJOT05FIiwiaW5pdGlhbFVJU3RhdGUiLCJjb21iaW5lUmVkdWNlcnMiLCJzZXRPYmplY3RWYWx1ZSIsInVpIiwic3RhdGUiLCJhY3Rpb24iLCJuZXdUYWIiLCJ0YWJJbmRleCIsInBhdGhzIiwidGFpbEdldEZyb20iLCJpbmRleE9mIiwibmV3U3RhdHVzIiwiT2JqZWN0IiwidmFsdWVzIiwiaW5jbHVkZXMiLCJuZXdHcm91cExpc3QiLCJzcGxpY2UiLCJ0YWlsUGF0aCIsIm9wdGlvbnMiLCJnZXRTdGF0ZSIsImdldEZyb20iLCJnZXRQb2RNZXRhVmFsdWUiLCJnZXRUYWIiLCJ0YWJOYW1lIiwiZ2V0VGFiTGlzdCIsImdldFRhYk9wdGlvbkxpc3QiLCJnZXRPcHRpb24iLCJnZXRPcHRpb25JdGVtVmFsdWUiLCJnZXRHcm91cExpc3QiLCJnZXRHcm91cCIsImdldEZpZWxkTGlzdCIsImdldEZpZWxkIiwiZ2V0RmllbGRzIiwiZG90UGF0aCIsInRhaWwiLCJzcGxpdCIsImpvaW4iLCJjcmVhdGVUcmVlIiwicmVkdWNlUmlnaHQiLCJhY2MiLCJjdXJyZW50VmFsdWUiLCJyZWR1Y2UiLCJlbCIsImNyZWF0ZVN0YXRlUGF0aCIsInBhdGgiLCJ0YWlsQ3JlYXRlVHJlZSIsIlBPRF9NRVRBIiwiUE9EX05BTUUiLCJQT0RfSUQiLCJGSUVMRFMiLCJHUk9VUFMiLCJHUk9VUFNfQllfTkFNRSIsIkdST1VQX0xJU1QiLCJHUk9VUF9GSUVMRF9MSVNUIiwiVUkiLCJBQ1RJVkVfVEFCIiwiU0FWRV9TVEFUVVMiLCJUQUJTIiwiVEFCX0xJU1QiLCJUQUJTX0JZX05BTUUiLCJPUFRJT05TIiwiVEFCX09QVElPTl9MSVNUIiwicmVnaXN0ZXJTdG9yZSIsImluaXRTdG9yZSIsImluaXRpYWxTdGF0ZSIsIm1lcmdlIiwicmVkdWNlciIsInNlbGVjdG9ycyIsIlBvZHNERlZCYXNlSW5wdXQiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsInNldFZhbHVlIiwiaHRtbEF0dHIiLCJjbGFzc05hbWUiLCJuYW1lX2NsZWFuIiwiZmllbGRDb25maWciLCJ0ZXh0X3BsYWNlaG9sZGVyIiwidGV4dF9tYXhfbGVuZ3RoIiwicmVhZG9ubHkiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIm1pbiIsIm1heCIsIlBvZHNERlZGaWVsZENvbnRhaW5lciIsIkZpZWxkIiwiZmllbGRDb21wb25lbnQiLCJmaWVsZEl0ZW1EYXRhIiwidmFsaWRhdGlvbiIsInBvZHNWYWxpZGF0aW9uIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwidXNlVmFsaWRhdGlvbiIsImFkZFJ1bGVzIiwicnVsZSIsInZhbGlkYXRpb25SdWxlcyIsImNvbmRpdGlvbiIsImZpZWxkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJQb2RzRmllbGRPcHRpb24iLCJ0b0Jvb2wiLCJzdHJpbmdPck51bWJlciIsIlRvb2x0aXAiLCJIZWxwVG9vbHRpcCIsIlBvZHNOYXZUYWIiLCJnZXRDbGFzc05hbWUiLCJoYW5kbGVDbGljayIsInRoaXNUYWIiLCJ0aXRsZVRleHQiLCJhcnJheU9mIiwic2hhcGUiLCJQb2RzREZWVmFsaWRhdGlvbk1lc3NhZ2UiLCJtZXNzYWdlIiwiUG9kc0RGVlZhbGlkYXRpb25NZXNzYWdlcyIsIm1lc3NhZ2VzIiwidGhpc01lc3NhZ2UiLCJQb2RzREZWTW9kYWwiLCJtZWRpYSIsInZpZXciLCJNb2RhbCIsImV4dGVuZCIsImNsb3NlIiwicHJvdG90eXBlIiwiYXBwbHkiLCJlc2NhcGUiLCJwYXJlbnQiLCJqUXVlcnkiLCJ0cmlnZ2VyIiwiZWRpdG9yRGF0YSIsInVuU3Vic2NyaWJlIiwiUG9kc0diTW9kYWxMaXN0ZW5lciIsImluaXQiLCJpc0N1cnJlbnRQb3N0UHVibGlzaGVkIiwic3Vic2NyaWJlIiwic2F2ZUxpc3RlbmVyIiwicHVibGlzaExpc3RlbmVyIiwiZ2V0RmVhdHVyZWRJbWFnZVVSTCIsImZlYXR1cmVkSW1hZ2VJZCIsImdldEN1cnJlbnRQb3N0QXR0cmlidXRlIiwidXJsIiwiZ2V0TWVkaWEiLCJtZWRpYVNpemUiLCJob29rcyIsImFwcGx5RmlsdGVycyIsIm1lZGlhX2RldGFpbHMiLCJzaXplcyIsInNvdXJjZV91cmwiLCJ0cmlnZ2VyVXBkYXRlRXZlbnQiLCJnZXRQZXJtYWxpbmsiLCJnZXRDdXJyZW50UG9zdElkIiwid2FzU2F2aW5nIiwiaXNTYXZpbmdQb3N0IiwiZGlkUG9zdFNhdmVSZXF1ZXN0U3VjY2VlZCIsImlzVXNlclNhdmluZyIsImlzQXV0b3NhdmluZ1Bvc3QiLCJvcHRpb25hbERhdGEiLCJkZWZhdWx0RGF0YSIsInBvc3REYXRhIiwiYXNzaWduIiwiSWZyYW1lRnJhbWUiLCJGcmFtZSIsInRlbXBsYXRlIiwiXyIsInJlZ2lvbnMiLCJpbml0aWFsaXplIiwiYXJndW1lbnRzIiwiJGVsIiwiYWRkQ2xhc3MiLCJpbml0U3RhdGUiLCJpbml0TW9kYWwiLCJvbiIsImlmcmFtZUNvbnRlbnQiLCJpZnJhbWUiLCJtb2RlIiwiY3JlYXRlVGl0bGUiLCJ0aXRsZSIsImFwcGVuZCIsIlBvZHNJMThuIiwic3JjIiwic3RhdGVzIiwiYWRkIiwiY29udHJvbGxlciIsIlN0YXRlIiwibW9kYWwiLCJjb250ZW50IiwicmVuZGVyIiwic2V0U3RhdGUiLCJJZnJhbWUiLCJWaWV3IiwidGFnTmFtZSIsIlBvZHNERlZGaWVsZE1vZGVsIiwiQmFja2JvbmUiLCJNb2RlbCIsImRlZmF1bHRzIiwiUG9kc0ZpZWxkTGlzdFZpZXciLCJNYXJpb25ldHRlIiwiQ29sbGVjdGlvblZpZXciLCJjaGlsZFZpZXdFdmVudFByZWZpeCIsImZpZWxkTW9kZWwiLCJjaGlsZFZpZXdPcHRpb25zIiwiUG9kc0ZpZWxkVmlldyIsInNlcmlhbGl6ZURhdGEiLCJtb2RlbCIsInRvSlNPTiIsImdldCIsIlBvZHNERlZGaWVsZExheW91dCIsIm1uUmVuZGVyZXIiLCJGaWVsZENsYXNzIiwiZWxlbWVudCIsIm5ld0ZpZWxkIiwicmVhY3REaXJlY3RSZW5kZXJlciIsImNyZWF0ZUZhY3RvcnkiLCJSZWFjdERPTSIsInJlYWN0UmVuZGVyZXIiLCJQb2RzREZWRW1haWwiLCJlbWFpbEZvcm1hdCIsImVtYWlsX2h0bWw1IiwiRmlsZVVwbG9hZE1vZGVsIiwiRmlsZVVwbG9hZENvbGxlY3Rpb24iLCJDb2xsZWN0aW9uIiwiVXBsb2FkZXJzIiwiUGx1cGxvYWQiLCJNZWRpYU1vZGFsIiwiVU5MSU1JVEVEX0ZJTEVTIiwiRmlsZVVwbG9hZCIsImxpc3QiLCJ1aVJlZ2lvbiIsImZvcm0iLCJjaGlsZFZpZXdFdmVudHMiLCJ1cGxvYWRlciIsIm9uQmVmb3JlUmVuZGVyIiwiY29sbGVjdGlvbiIsInVuZGVmaW5lZCIsIm9uUmVuZGVyIiwibGlzdFZpZXciLCJGaWxlVXBsb2FkTGlzdCIsImZvcm1WaWV3IiwiRmlsZVVwbG9hZEZvcm0iLCJzaG93Q2hpbGRWaWV3IiwiY3JlYXRlVXBsb2FkZXIiLCJsaXN0ZW5UbyIsIm9uQWRkZWRGaWxlcyIsIm9uQ2hpbGR2aWV3UmVtb3ZlRmlsZUNsaWNrIiwiY2hpbGRWaWV3IiwicmVtb3ZlIiwib25DaGlsZHZpZXdBZGRGaWxlQ2xpY2siLCJpbnZva2UiLCJmaWxlTGltaXQiLCJuZXdDb2xsZWN0aW9uIiwiZmlsdGVyZWRNb2RlbHMiLCJjbG9uZSIsIm1vZGVscyIsImZpbHRlciIsInJlc2V0IiwidGFyZ2V0VXBsb2FkZXIiLCJVcGxvYWRlciIsImluZGV4IiwidGhpc1VwbG9hZGVyIiwiZmlsZVVwbG9hZGVyIiwiYnJvd3NlQnV0dG9uIiwiZ2V0UmVnaW9uIiwiZ2V0RWwiLCJQb2RzRmlsZVVwbG9hZGVyIiwibWVkaWFPYmplY3QiLCJmaWx0ZXJzIiwibWltZV90eXBlcyIsImV4dGVuc2lvbnMiLCJkZWZhdWx0RXh0IiwibXVsdGlwbGUiLCJsaWJyYXJ5IiwiYnV0dG9uIiwidGV4dCIsIm9uY2UiLCJvbk1lZGlhU2VsZWN0Iiwib3BlbiIsInNlbGVjdGlvbiIsIm5ld0ZpbGVzIiwiYXR0YWNobWVudCIsImF0dHJpYnV0ZXMiLCJhdHRhY2htZW50VGh1bWJuYWlsIiwiaWNvbiIsInRodW1ibmFpbCIsImZ1bGwiLCJwdXNoIiwiZWRpdF9saW5rIiwiZWRpdExpbmsiLCJsaW5rIiwiZG93bmxvYWQiLCJwbHVwbG9hZCIsImJpbmQiLCJvbkZpbGVzQWRkZWQiLCJvblVwbG9hZFByb2dyZXNzIiwib25GaWxlVXBsb2FkZWQiLCJ1cCIsImZpbGVzIiwiZmlsZSIsIkZpbGVVcGxvYWRRdWV1ZU1vZGVsIiwiZmlsZW5hbWUiLCJGaWxlVXBsb2FkUXVldWUiLCJzaG93IiwicXVldWVDb2xsZWN0aW9uIiwicmVmcmVzaCIsInN0YXJ0Iiwic2V0IiwicHJvZ3Jlc3MiLCJwZXJjZW50IiwicmVzcCIsInJlc3BvbnNlIiwibmV3RmlsZSIsImpzb24iLCJzdWJzdHIiLCJlcnJvck1zZyIsIm1hdGNoIiwicGFyc2VKU09OIiwiaXNFbXB0eU9iamVjdCIsIklEIiwicG9zdF90aXRsZSIsImNvbnN0cnVjdG9yIiwiY2FsbCIsImFkZEJ1dHRvbiIsInRyaWdnZXJzIiwiRmlsZVVwbG9hZEl0ZW0iLCJkcmFnSGFuZGxlIiwidmlld0xpbmsiLCJkb3dubG9hZExpbmsiLCJyZW1vdmVCdXR0b24iLCJjaGlsZFZpZXdUcmlnZ2VycyIsIm9uQXR0YWNoIiwic29ydF9heGlzIiwic29ydGFibGUiLCJjb250YWlubWVudCIsImF4aXMiLCJzY3JvbGxTZW5zaXRpdml0eSIsInRvbGVyYW5jZSIsIm9wYWNpdHkiLCJGaWxlVXBsb2FkUXVldWVJdGVtIiwibW9kZWxFdmVudHMiLCJvbk1vZGVsQ2hhbmdlZCIsIlBvZHNERlZOdW1iZXIiLCJudW1iZXJfbWF4IiwibnVtYmVyX21pbiIsIm51bWJlcl9odG1sNSIsIlBvZHNERlZQYXNzd29yZCIsIlBpY2tGaWVsZE1vZGVsIiwidmlld3MiLCJDaGVja2JveFZpZXciLCJTZWxlY3RWaWV3IiwiUmFkaW9WaWV3IiwiTGlzdFZpZXciLCJtb2RhbElGcmFtZSIsIlBpY2siLCJhdXRvY29tcGxldGUiLCJhZGROZXciLCJSZWxhdGlvbnNoaXBDb2xsZWN0aW9uIiwic2hvd0FkZE5ldyIsImJ1aWxkQXV0b2NvbXBsZXRlIiwic2hvd0xpc3QiLCJwaWNrTGltaXQiLCJ2aWV3X25hbWUiLCJwaWNrX2Zvcm1hdF90eXBlIiwic2VsZWN0RnJvbUV4aXN0aW5nIiwiYWpheF9kYXRhIiwic2VsZWN0Ml9vdmVycmlkZXMiLCJwaWNrX2xpbWl0IiwiZmlsdGVyQnlTZWxlY3RlZCIsImxpbWl0RGlzYWJsZSIsIm9uQ2hpbGR2aWV3U2VsZWN0aW9uTGltaXRPdmVyIiwib25DaGlsZHZpZXdTZWxlY3Rpb25MaW1pdFVuZGVyIiwiZmlsdGVyQnlVbnNlbGVjdGVkIiwiZmlsdGVyQWpheExpc3QiLCJ2aWV3TmFtZSIsIkVycm9yIiwiQWRkTmV3Iiwic2VsZWN0ZWRJdGVtcyIsInJldHVybkxpc3QiLCJyZXN1bHRzIiwiZ2V0Q2hpbGRWaWV3Iiwic2V0Q29sbGVjdGlvbiIsImRpc2FibGUiLCJlbmFibGUiLCJvbkNoaWxkdmlld1JlbW92ZUl0ZW1DbGljayIsInRvZ2dsZVNlbGVjdGVkIiwib25DaGlsZHZpZXdBZGROZXciLCJpZnJhbWVfdGl0bGVfYWRkIiwiaWZyYW1lX3NyYyIsInNldE1vZGFsTGlzdGVuZXJzIiwib25DaGlsZHZpZXdFZGl0SXRlbUNsaWNrIiwiaWZyYW1lX3RpdGxlX2VkaXQiLCJlZGl0QnV0dG9uIiwiYXR0ciIsIm9uQ2hpbGR2aWV3Q2hhbmdlU2VsZWN0ZWQiLCJkZWZlciIsIm1vZGFsU3VjY2VzcyIsIm1vZGFsQ2FuY2VsIiwiY2xlYXJNb2RhbExpc3RlbmVycyIsIm9mZiIsIml0ZW1Nb2RlbCIsIlJlbGF0aW9uc2hpcE1vZGVsIiwic2V0U2VsZWN0ZWQiLCJpZHMiLCJ0aGlzTW9kZWwiLCJzZWxlY3RlZCIsImNvbnRhaW5zIiwiZmlsdGVyZWQiLCJESVNBQkxFRF9DTEFTUyIsImdldFVJIiwicmVtb3ZlQ2xhc3MiLCJvbkFkZE5ld0NsaWNrIiwiaGFzQ2xhc3MiLCJDaGVja2JveEl0ZW0iLCJjaGVja2JveCIsInRlbXBsYXRlQ29udGV4dCIsIm9yZGluYWwiLCJtb2RlbENoYW5nZWQiLCJ2YWxpZGF0ZVNlbGVjdGlvbkxpbWl0Iiwic2VsZWN0aW9uTGltaXRPdmVyIiwib25DaGlsZHZpZXdUb2dnbGVTZWxlY3RlZCIsInNlbGVjdGlvbkxpbWl0VW5kZXIiLCJsaW1pdCIsIm51bVNlbGVjdGVkIiwiZmluZCIsInByb3AiLCJMaXN0SXRlbSIsImNoaWxkIiwiUmFkaW9JdGVtIiwiU0VMRUNUMl9VTF9UQVJHRVQiLCJTRUxFQ1QyX1NFTEVDVEVEX1RBUkdFVCIsIlNlbGVjdEl0ZW0iLCJ2YWwiLCJodG1sIiwiT3B0Z3JvdXAiLCJzdG9wUHJvcGFnYXRpb24iLCJtdWx0aUxhc3RWYWxpZFNlbGVjdGlvbiIsIml0ZW0iLCJvcHRncm91cCIsInJldHVybk9wdGlvbnMiLCJmb3JtYXRfdHlwZSIsInNldHVwU2VsZWN0MiIsIm9uQ2hhbmdlU2VsZWN0ZWQiLCJhbGVydCIsIl9uIiwib25CZWZvcmVEZXRhY2giLCJzZWxlY3RXb28iLCJmb3JtYXRUeXBlIiwic2VsZiIsIiRzZWxlY3QyIiwiYWpheERhdGEiLCJzZWxlY3QyT3ZlcnJpZGVzIiwiaXNTaW5nbGUiLCJzZWxlY3RlZENvdW50IiwiJHVsQ29udGFpbmVyIiwic2VsZWN0Mk9wdGlvbnMiLCJwbGFjZWhvbGRlciIsInByZXBlbmQiLCJtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoIiwiYWxsb3dDbGVhciIsImRpc2FibGVkIiwidGFncyIsInBpY2tfdGFnZ2FibGUiLCJlc2NhcGVNYXJrdXAiLCJhamF4IiwibWluaW11bUlucHV0TGVuZ3RoIiwibWluaW11bV9pbnB1dF9sZW5ndGgiLCJhamF4dXJsIiwiZGF0YVR5cGUiLCJkZWxheSIsInBhcmFtcyIsIl93cG5vbmNlIiwibWV0aG9kIiwicG9kIiwiZmllbGQiLCJ1cmkiLCJxdWVyeSIsInRlcm0iLCJwcm9jZXNzUmVzdWx0cyIsIiRzZWxlY3RlZCIsInJldmVyc2UiLCJQb2RzREZWVGV4dCIsIlBvZHNERlZUZXh0QXJlYSIsIlNDUklQVF9UQVJHRVQiLCJyZW5kZXJlciIsIlBvZHNERlYiLCJmaWVsZEluc3RhbmNlcyIsInBhcmVudHMiLCJwaWNrX2FsbG93X2FkZF9uZXciLCJpc01vZGFsV2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJpc0d1dGVuYmVyZ0VkaXRvckxvYWRlZCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImZhY3RzIiwiY29uZGl0aW9ucyIsImVxdWFsIiwibnVtZXJpY1ZhbHVlIiwiZ3JlYXRlciIsImxlc3MiLCJlbWFpbFJlZ2V4Iiwibm90Iiwib3IiLCJtYXRjaGVzIiwidXNlRWZmZWN0Iiwic2V0VmFsaWRhdGlvbk1lc3NhZ2VzIiwicnVsZXMiLCJjb25kaXRpb25hbFJ1bGVzIiwiZm9yRWFjaCIsImNvbmRpdGlvbmFsUnVsZSIsImNoZWNrVmFsaWRhdGlvbiIsInJ1bGVzRW5naW5lIiwiRW5naW5lIiwiUHJvbWlzZSIsInJlc29sdmUiLCJydW4iLCJ0aGVuIiwiZXZlbnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9E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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNsQ2E7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLHNEQUFTO0FBQy9COztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7O0FDNUxRO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7O0FDeEREO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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UDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLEtBQXFDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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OztBQUliLElBQUksSUFBcUM7QUFDekM7QUFDQTs7QUFFQSw4Q0FBOEMsY0FBYzs7QUFFNUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHNGQUFzRixhQUFhO0FBQ25HO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRGQUE0RixlQUFlO0FBQzNHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0EsS0FBSyxLQUF3QyxFQUFFLEVBRTdDOztBQUVGLFFBQVEsc0JBQWlCO0FBQ3pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7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TixDQUFFek4sS0FBRixDQUhNLENBQVQ7QUFLQSxXQUFPa00sa0JBQVA7QUFDQSxHQVBEOztBQVNBLFNBQU87QUFDTkUsWUFBUSxFQUFFQSxRQURKO0FBRU5ELGlCQUFhLEVBQUVBO0FBRlQsR0FBUDtBQUlBLENBL0RNLEM7Ozs7Ozs7Ozs7O0FDYlAsd0I7Ozs7Ozs7Ozs7O0FDQUEsd0I7Ozs7Ozs7Ozs7O0FDQUEsdUI7Ozs7Ozs7Ozs7O0FDQUEsMEIiLCJmaWxlIjoicG9kcy1kZnYubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi91aS9qcy9wb2RzLWRmdi9zcmMvcG9kcy1kZnYuanNcIik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJyYWNrZXRzMmRvdHM7XG5cbi8qIVxuICogcmVnZXhwIHBhdHRlcm5zLlxuICovXG5cbnZhciBSRVBMQUNFX0JSQUNLRVRTID0gL1xcWyhbXlxcW1xcXV0rKVxcXS9nO1xudmFyIExGVF9SVF9UUklNX0RPVFMgPSAvXlsuXSp8Wy5dKiQvZztcblxuLyoqXG4gKiBDb252ZXJ0IHN0cmluZyB3aXRoIGJyYWNrZXQgbm90YXRpb24gdG8gZG90IHByb3BlcnR5IG5vdGF0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlczpcbiAqXG4gKiAgICAgIGJyYWNrZXRzMmRvdHMoJ2dyb3VwWzBdLnNlY3Rpb24uYS5zZWF0WzNdJylcbiAqICAgICAgLy89PiAnZ3JvdXAuMC5zZWN0aW9uLmEuc2VhdC4zJ1xuICpcbiAqICAgICAgYnJhY2tldHMyZG90cygnWzBdLnNlY3Rpb24uYS5zZWF0WzNdJylcbiAqICAgICAgLy89PiAnMC5zZWN0aW9uLmEuc2VhdC4zJ1xuICpcbiAqICAgICAgYnJhY2tldHMyZG90cygncGVvcGxlWypdLmFnZScpXG4gKiAgICAgIC8vPT4gJ3Blb3BsZS4qLmFnZSdcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0cmluZ1xuICogb3JpZ2luYWwgc3RyaW5nXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICogZG90L2JyYWNrZXQtbm90YXRpb24gc3RyaW5nXG4gKi9cblxuZnVuY3Rpb24gYnJhY2tldHMyZG90cyhzdHJpbmcpIHtcbiAgcmV0dXJuICh7fSkudG9TdHJpbmcuY2FsbChzdHJpbmcpID09ICdbb2JqZWN0IFN0cmluZ10nXG4gICAgICAgPyBzdHJpbmcucmVwbGFjZShSRVBMQUNFX0JSQUNLRVRTLCAnLiQxJykucmVwbGFjZShMRlRfUlRfVFJJTV9ET1RTLCAnJylcbiAgICAgICA6ICcnXG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vcGFjaXR5LWdob3N0IHtcXG4gIHRyYW5zaXRpb246IGFsbCAuOHMgZWFzZTtcXG4gIG9wYWNpdHk6IDAuNDtcXG4gIGJveC1zaGFkb3c6IDNweCAzcHggMTBweCAzcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xcbiAgY3Vyc29yOiBucy1yZXNpemU7IH1cXG5cXG4ucG9kcy1maWVsZC0td3JhcHBlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IDIwMG1zIGVhc2UgYmFja2dyb3VuZC1jb2xvcjtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZXNtb2tlOyB9XFxuICAucG9kcy1maWVsZC0td3JhcHBlcjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7IH1cXG5cXG4ucG9kcy1maWVsZCB7XFxuICB3aWR0aDogMjUlO1xcbiAgcGFkZGluZzogNXB4IDIwcHg7IH1cXG5cXG4ucG9kcy1maWVsZC0taGFuZGxlIHtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgb3BhY2l0eTogLjI7XFxuICBwYWRkaW5nLWxlZnQ6IDEzcHg7XFxuICBwYWRkaW5nLXJpZ2h0OiAxM3B4O1xcbiAgY3Vyc29yOiBtb3ZlOyB9XFxuXFxuLnBvZHMtZmllbGQtLXJlcXVpcmVkIHtcXG4gIGNvbG9yOiByZWQ7IH1cXG5cXG4ucG9kcy1maWVsZC0tYWN0aW9ucyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IGF1dG87IH1cXG5cXG4ucG9kcy1maWVsZC0tYWN0aW9ucyBpIHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBjb2xvcjogIzAwNzNhYTsgfVxcbiAgLnBvZHMtZmllbGQtLWFjdGlvbnMgaTpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgY29sb3I6ICMwMGEwZDI7IH1cXG5cXG4ucG9kcy1maWVsZC0tbGFiZWwge1xcbiAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuXFxuLnBvZHMtZmllbGQtLWxhYmVsOmhvdmVyIC5wb2RzLWZpZWxkLS1pZCxcXG4ucG9kcy1maWVsZC0tdHlwZTpob3ZlciAucG9kcy1maWVsZC0taWQge1xcbiAgb3BhY2l0eTogMTsgfVxcblxcbi5wb2RzLWZpZWxkLS1pZCB7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBjb2xvcjogIzk5OTtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiAyMDBtcyBlYXNlIG9wYWNpdHk7IH1cXG5cXG4ucG9kcy1maWVsZC0tbGFiZWwsXFxuLnBvZHMtZmllbGQtLW5hbWUge1xcbiAgY29sb3I6ICMwMDczYWE7IH1cXG4gIC5wb2RzLWZpZWxkLS1sYWJlbDpob3ZlcixcXG4gIC5wb2RzLWZpZWxkLS1uYW1lOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBjb2xvcjogIzAwYTBkMjsgfVxcblxcbi5wb2RzLWZpZWxkLS1sYWJlbCxcXG4ucG9kcy1maWVsZC0tdHlwZSB7XFxuICB3aWR0aDogMzAlOyB9XFxuXFxuLnBvZHMtZmllbGQtLXdyYXBwZXItbGFiZWxzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgd2hpdGVzbW9rZTtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7IH1cXG5cXG4ucG9kcy1maWVsZC0td3JhcHBlci1sYWJlbC1pdGVtcyB7XFxuICB3aWR0aDogMTcycHg7XFxuICBwYWRkaW5nOiAyMHB4IDIwcHggMTdweDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgfVxcbiAgLnBvZHMtZmllbGQtLXdyYXBwZXItbGFiZWwtaXRlbXM6Zmlyc3QtY2hpbGQge1xcbiAgICBtYXJnaW4tbGVmdDogMzZweDsgfVxcblxcbi5wb2RzLWZpZWxkLWdyb3VwLXdyYXBwZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYzNjM2MztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItbGVmdDogNXB4IHNvbGlkICM5NGJmM2E7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XFxuICAucG9kcy1maWVsZC1ncm91cC13cmFwcGVyID4gLnBvZHMtZmllbGQtLXdyYXBwZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlOyB9XFxuICAgIC5wb2RzLWZpZWxkLWdyb3VwLXdyYXBwZXIgPiAucG9kcy1maWVsZC0td3JhcHBlcjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2U0ZTRlNDsgfVxcbiAgLnBvZHMtZmllbGQtZ3JvdXAtd3JhcHBlcjpsYXN0LWNoaWxkIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogMDsgfVxcblxcbi5wb2RzLWZpZWxkLWdyb3VwLS10aXRsZSB7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiAjMzMzOyB9XFxuXFxuLnBvZHMtZmllbGQtZ3JvdXAtLWhhbmRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxM3B4O1xcbiAgY3Vyc29yOiBtb3ZlOyB9XFxuXFxuLnBvZHMtZmllbGQtZ3JvdXAtLW1hbmFnZSB7XFxuICBtYXJnaW4tbGVmdDogYXV0bzsgfVxcblxcbi5wb2RzLWJ1dHRvbi1ncm91cC0tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICBtYXJnaW4tdG9wOiAxMHB4OyB9XFxuXFxuLnBvZHMtZmllbGQtZ3JvdXAtLXRvZ2dsZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG4ucG9kcy1idXR0b24tZ3JvdXAtLWl0ZW0ge1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0cmFuc2l0aW9uOiAzMDBtcyBlYXNlIGJhY2tncm91bmQtY29sb3I7IH1cXG4gIC5wb2RzLWJ1dHRvbi1ncm91cC0taXRlbTpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7IH1cXG4gIC5wb2RzLWJ1dHRvbi1ncm91cC0taXRlbTpsYXN0LWNoaWxkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzk0YmYzYTtcXG4gICAgY29sb3I6IHdoaXRlOyB9XFxuICAgIC5wb2RzLWJ1dHRvbi1ncm91cC0taXRlbTpsYXN0LWNoaWxkOmhvdmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2M5ZTMzOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucG9kcy1maWVsZC0td3JhcHBlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IDIwMG1zIGVhc2UgYmFja2dyb3VuZC1jb2xvcjtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZXNtb2tlOyB9XFxuICAucG9kcy1maWVsZC0td3JhcHBlcjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3Zjc7IH1cXG5cXG4ucG9kcy1tYW5hZ2UtZmllbGRzLm5vLWZpZWxkcyB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIG1hcmdpbjogMWVtOyB9XFxuXFxuZGl2LnBvZHMtbWFuYWdlLWZcXG4ucG9kcy1maWVsZCB7XFxuICB3aWR0aDogMjUlO1xcbiAgcGFkZGluZzogMTBweCAyMHB4OyB9XFxuXFxuLnBvZHMtZmllbGQtLWhhbmRsZSB7XFxuICB3aWR0aDogYXV0bztcXG4gIG9wYWNpdHk6IC4yOyB9XFxuXFxuLnBvZHMtZmllbGQtLXJlcXVpcmVkIHtcXG4gIGNvbG9yOiByZWQ7IH1cXG5cXG4ucG9kcy1maWVsZC0tYWN0aW9ucyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IGF1dG87IH1cXG5cXG4ucG9kcy1maWVsZC0tYWN0aW9ucyAuZGFzaGljb24ge1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGNvbG9yOiAjMDA3M2FhOyB9XFxuICAucG9kcy1maWVsZC0tYWN0aW9ucyAuZGFzaGljb246aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGNvbG9yOiAjMDBhMGQyOyB9XFxuXFxuLnBvZHMtZmllbGQtLWxhYmVsIHtcXG4gIHBhZGRpbmctbGVmdDogMDsgfVxcblxcbi5wb2RzLWZpZWxkLS1sYWJlbDpob3ZlciAucG9kcy1maWVsZC0taWQsXFxuLnBvZHMtZmllbGQtLXR5cGU6aG92ZXIgLnBvZHMtZmllbGQtLWlkIHtcXG4gIG9wYWNpdHk6IDE7IH1cXG5cXG4ucG9kcy1maWVsZC0taWQge1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgY29sb3I6ICM5OTk7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogMjAwbXMgZWFzZSBvcGFjaXR5OyB9XFxuXFxuLnBvZHMtZmllbGQtLWxhYmVsLFxcbi5wb2RzLWZpZWxkLS1uYW1lIHtcXG4gIGNvbG9yOiAjMDA3M2FhOyB9XFxuICAucG9kcy1maWVsZC0tbGFiZWw6aG92ZXIsXFxuICAucG9kcy1maWVsZC0tbmFtZTpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgY29sb3I6ICMwMGEwZDI7IH1cXG5cXG4ucG9kcy1maWVsZC0tbGFiZWwge1xcbiAgZmxleDogMTsgfVxcblxcbi5wb2RzLWZpZWxkLS1uYW1lIHtcXG4gIGZsZXg6IDE7IH1cXG5cXG4ucG9kcy1maWVsZC0td3JhcHBlci1sYWJlbHMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB3aGl0ZXNtb2tlOyB9XFxuXFxuLnBvZHMtZmllbGQtLXdyYXBwZXItbGFiZWwtaXRlbXMge1xcbiAgd2lkdGg6IDE3MnB4O1xcbiAgcGFkZGluZzogMjBweCAyMHB4IDE3cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IH1cXG4gIC5wb2RzLWZpZWxkLS13cmFwcGVyLWxhYmVsLWl0ZW1zOmZpcnN0LWNoaWxkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDM2cHg7IH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59IiwiJ3VzZSBzdHJpY3QnXG5cbi8qIVxuICogaW1wb3J0cy5cbiAqL1xuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IHJlcXVpcmUoJ2Zhc3QtYmluZCcpXG5cbi8qIVxuICogZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGN1cnJ5MlxuXG4vKipcbiAqIEN1cnJ5IGEgYmluYXJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBCaW5hcnkgZnVuY3Rpb24gdG8gY3VycnkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmXVxuICogRnVuY3Rpb24gYHRoaXNgIGNvbnRleHQuXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb258Kn1cbiAqIElmIHBhcnRpYWxseSBhcHBsaWVkLCByZXR1cm4gdW5hcnkgZnVuY3Rpb24sIG90aGVyd2lzZSwgcmV0dXJuIHJlc3VsdCBvZiBmdWxsIGFwcGxpY2F0aW9uLlxuICovXG5cbmZ1bmN0aW9uIGN1cnJ5MiAoZm4sIHNlbGYpIHtcbiAgdmFyIG91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG91dFxuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cylcbiAgICAgIDogYmluZC5jYWxsKGZuLCBzZWxmLCBhcmd1bWVudHNbMF0pXG4gIH1cblxuICBvdXQudW5jdXJyeSA9IGZ1bmN0aW9uIHVuY3VycnkgKCkge1xuICAgIHJldHVybiBmblxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXMgbG9nIHRpbWVzdGFtcC5cbiAqL1xuXG52YXIgcHJldlRpbWU7XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbi8qKlxuICogVHJhbnNmb3JtIGRvdC1kZWxpbWl0ZWQgc3RyaW5ncyB0byBhcnJheSBvZiBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nXG4gKiBEb3QtZGVsaW1pdGVkIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEFycmF5IG9mIHN0cmluZ3MuXG4gKi9cblxuZnVuY3Rpb24gZG90c3BsaXQgKHN0cmluZykge1xuICB2YXIgaWR4ID0gLTFcbiAgdmFyIHN0ciA9IGNvbXBhY3Qobm9ybWFsaXplKHN0cmluZykuc3BsaXQoJy4nKSlcbiAgdmFyIGVuZCA9IHN0ci5sZW5ndGhcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKCsraWR4IDwgZW5kKSB7XG4gICAgb3V0LnB1c2godG9kb3RzKHN0cltpZHhdKSlcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuLyoqXG4gKiBSZXBsYWNlIGVzY2FwZXMgd2l0aCBhIHBsYWNlaG9sZGVyLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nXG4gKiBEb3QtZGVsaW1pdGVkIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBEb3QtZGVsaW1pdGVkIHN0cmluZyB3aXRoIHBsYWNlaG9sZGVycyBpbiBwbGFjZSBvZiBlc2NhcGVzLlxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZSAoc3RyaW5nKSB7XG4gIHJldHVybiAodG9TdHJpbmcuY2FsbChzdHJpbmcpID09PSAnW29iamVjdCBTdHJpbmddJyA/IHN0cmluZyA6ICcnKS5yZXBsYWNlKC9cXFxcXFwuL2csICdcXHVmZmZmJylcbn1cblxuLyoqXG4gKiBEcm9wIGVtcHR5IHZhbHVlcyBmcm9tIGFycmF5LlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBhcnJheVxuICogQXJyYXkgb2Ygc3RyaW5ncy5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEFycmF5IG9mIHN0cmluZ3MgKGVtcHR5IHZhbHVlcyBkcm9wcGVkKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wYWN0IChhcnIpIHtcbiAgdmFyIGlkeCA9IC0xXG4gIHZhciBlbmQgPSBhcnIubGVuZ3RoXG4gIHZhciBvdXQgPSBbXVxuXG4gIHdoaWxlICgrK2lkeCA8IGVuZCkge1xuICAgIGlmIChhcnJbaWR4XSkgb3V0LnB1c2goYXJyW2lkeF0pXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbi8qKlxuICogQ2hhbmdlIHBsYWNlaG9sZGVyIHRvIGRvdHMuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJpbmdcbiAqIERvdC1kZWxpbWl0ZWQgc3RyaW5nIHdpdGggcGxhY2Vob2xkZXJzLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIERvdC1kZWxpbWl0ZWQgc3RyaW5nIHdpdGhvdXQgcGxhY2Vob2xkZXJzLlxuICovXG5cbmZ1bmN0aW9uIHRvZG90cyAoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFx1ZmZmZi9nLCAnLicpXG59XG5cbi8qIVxuICogZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRvdHNwbGl0XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJvdW5kVGhpcykge1xuICB2YXIgZiA9IHRoaXNcbiAgICAsIHJldFxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMilcbiAgICByZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgcmV0KSB7XG4gICAgICAgIHZhciByZXRfID0gZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIHJldHVybiBPYmplY3QocmV0XykgPT09IHJldF9cbiAgICAgICAgICA/IHJldF9cbiAgICAgICAgICA6IHRoaXNcbiAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGYuYXBwbHkoYm91bmRUaGlzLCBhcmd1bWVudHMpXG4gICAgfVxuICBlbHNlIHtcbiAgICB2YXIgYm91bmRBcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKVxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYm91bmRBcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgcmV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYm91bmRMZW4gPSBib3VuZEFyZ3MubGVuZ3RoXG4gICAgICAgICwgYXJncyA9IG5ldyBBcnJheShib3VuZExlbiArIGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICwgaVxuICAgICAgZm9yIChpID0gMDsgaSA8IGJvdW5kTGVuOyBpKyspXG4gICAgICAgIGFyZ3NbaV0gPSBib3VuZEFyZ3NbaV1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICAgIGFyZ3NbYm91bmRMZW4gKyBpXSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIHJldCkge1xuICAgICAgICB2YXIgcmV0XyA9IGYuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgcmV0dXJuIE9iamVjdChyZXRfKSA9PT0gcmV0X1xuICAgICAgICAgID8gcmV0X1xuICAgICAgICAgIDogdGhpc1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gZi5hcHBseShib3VuZFRoaXMsIGFyZ3MpXG4gICAgfVxuICB9XG5cbiAgcmV0LnByb3RvdHlwZSA9IGYucHJvdG90eXBlXG4gIHJldHVybiByZXRcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3ZhbGlkYXRpb24gPSByZXF1aXJlKFwiLi92YWxpZGF0aW9uXCIpO1xuXG52YXIgX2FwcGxpY2FibGVBY3Rpb25zID0gcmVxdWlyZShcIi4vYXBwbGljYWJsZUFjdGlvbnNcIik7XG5cbnZhciBfYXBwbGljYWJsZUFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXBwbGljYWJsZUFjdGlvbnMpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHNjaGVtYSkge1xuICB2YXIgaXNTY2hlbWFEZWZpbmVkID0gc2NoZW1hICE9PSB1bmRlZmluZWQgJiYgc2NoZW1hICE9PSBudWxsO1xuICBpZiAoKDAsIF91dGlscy5pc0RldmVsb3BtZW50KSgpICYmIGlzU2NoZW1hRGVmaW5lZCkge1xuICAgIGlmICghKDAsIF91dGlscy5pc09iamVjdCkoc2NoZW1hKSkge1xuICAgICAgKDAsIF91dGlscy50b0Vycm9yKShcIkV4cGVjdGVkIHZhbGlkIHNjaGVtYSBvYmplY3QsIGJ1dCBnb3QgLSBcIiArIHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgKDAsIF92YWxpZGF0aW9uLnZhbGlkYXRlUHJlZGljYXRlcykoW3J1bGUuY29uZGl0aW9uc10sIHNjaGVtYSk7XG4gICAgICAoMCwgX3ZhbGlkYXRpb24udmFsaWRhdGVDb25kaXRpb25GaWVsZHMpKFtydWxlLmNvbmRpdGlvbnNdLCBzY2hlbWEpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICB9XG59O1xuXG52YXIgRW5naW5lID0gZnVuY3Rpb24gRW5naW5lKHJ1bGVzLCBzY2hlbWEpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW5naW5lKTtcblxuICB0aGlzLmFkZFJ1bGUgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIF90aGlzLnZhbGlkYXRlKHJ1bGUpO1xuICAgIF90aGlzLnJ1bGVzLnB1c2gocnVsZSk7XG4gIH07XG5cbiAgdGhpcy5ydW4gPSBmdW5jdGlvbiAoZm9ybURhdGEpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCgwLCBfYXBwbGljYWJsZUFjdGlvbnMyLmRlZmF1bHQpKF90aGlzLnJ1bGVzLCBmb3JtRGF0YSkpO1xuICB9O1xuXG4gIHRoaXMucnVsZXMgPSBbXTtcbiAgdGhpcy52YWxpZGF0ZSA9IHZhbGlkYXRlKHNjaGVtYSk7XG5cbiAgaWYgKHJ1bGVzKSB7XG4gICAgKDAsIF91dGlscy50b0FycmF5KShydWxlcykuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmFkZFJ1bGUocnVsZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEVuZ2luZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFwcGxpY2FibGVBY3Rpb25zO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbnZhciBfY29uZGl0aW9uc01lZXQgPSByZXF1aXJlKFwiLi9jb25kaXRpb25zTWVldFwiKTtcblxudmFyIF9jb25kaXRpb25zTWVldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25kaXRpb25zTWVldCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFwcGxpY2FibGVBY3Rpb25zKHJ1bGVzLCBmb3JtRGF0YSkge1xuICByZXR1cm4gKDAsIF91dGlscy5mbGF0TWFwKShydWxlcywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgY29uZGl0aW9ucyA9IF9yZWYuY29uZGl0aW9ucyxcbiAgICAgICAgZXZlbnQgPSBfcmVmLmV2ZW50O1xuXG4gICAgaWYgKCgwLCBfY29uZGl0aW9uc01lZXQyLmRlZmF1bHQpKGNvbmRpdGlvbnMsIGZvcm1EYXRhKSkge1xuICAgICAgcmV0dXJuICgwLCBfdXRpbHMudG9BcnJheSkoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrRmllbGQ7XG5cbnZhciBfcHJlZGljYXRlID0gcmVxdWlyZShcInByZWRpY2F0ZVwiKTtcblxudmFyIF9wcmVkaWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZGljYXRlKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGRvQ2hlY2tGaWVsZCA9IGZ1bmN0aW9uIGRvQ2hlY2tGaWVsZChmaWVsZFZhbCwgcnVsZSkge1xuICBpZiAoKDAsIF91dGlscy5pc09iamVjdCkocnVsZSkpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocnVsZSkuZXZlcnkoZnVuY3Rpb24gKHApIHtcbiAgICAgIHZhciBzdWJSdWxlID0gcnVsZVtwXTtcbiAgICAgIGlmIChwID09PSBfY29uc3RhbnRzLk9SIHx8IHAgPT09IF9jb25zdGFudHMuQU5EKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHN1YlJ1bGUpKSB7XG4gICAgICAgICAgaWYgKHAgPT09IF9jb25zdGFudHMuT1IpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJSdWxlLnNvbWUoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRvQ2hlY2tGaWVsZChmaWVsZFZhbCwgcnVsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1YlJ1bGUuZXZlcnkoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRvQ2hlY2tGaWVsZChmaWVsZFZhbCwgcnVsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHAgPT09IF9jb25zdGFudHMuTk9UKSB7XG4gICAgICAgIHJldHVybiAhZG9DaGVja0ZpZWxkKGZpZWxkVmFsLCBzdWJSdWxlKTtcbiAgICAgIH0gZWxzZSBpZiAoX3ByZWRpY2F0ZTIuZGVmYXVsdFtwXSkge1xuICAgICAgICByZXR1cm4gX3ByZWRpY2F0ZTIuZGVmYXVsdFtwXShmaWVsZFZhbCwgc3ViUnVsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIF9wcmVkaWNhdGUyLmRlZmF1bHRbcnVsZV0oZmllbGRWYWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjaGVja0ZpZWxkKGZpZWxkVmFsLCBydWxlKSB7XG4gIHJldHVybiBkb0NoZWNrRmllbGQoZmllbGRWYWwsIHJ1bGUpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b1JlbENvbmRpdGlvbiA9IHRvUmVsQ29uZGl0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29uZGl0aW9uc01lZXQ7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIF9jaGVja0ZpZWxkID0gcmVxdWlyZShcIi4vY2hlY2tGaWVsZFwiKTtcblxudmFyIF9jaGVja0ZpZWxkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoZWNrRmllbGQpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdG9SZWxDb25kaXRpb24ocmVmQ29uZGl0aW9uLCBmb3JtRGF0YSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShyZWZDb25kaXRpb24pKSB7XG4gICAgcmV0dXJuIHJlZkNvbmRpdGlvbi5tYXAoZnVuY3Rpb24gKGNvbmQpIHtcbiAgICAgIHJldHVybiB0b1JlbENvbmRpdGlvbihjb25kLCBmb3JtRGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc09iamVjdCkocmVmQ29uZGl0aW9uKSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZWZDb25kaXRpb24pLnJlZHVjZShmdW5jdGlvbiAoYWdnLCBmaWVsZCkge1xuICAgICAgYWdnW2ZpZWxkXSA9IHRvUmVsQ29uZGl0aW9uKHJlZkNvbmRpdGlvbltmaWVsZF0sIGZvcm1EYXRhKTtcbiAgICAgIHJldHVybiBhZ2c7XG4gICAgfSwge30pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZWZDb25kaXRpb24gPT09IFwic3RyaW5nXCIgJiYgcmVmQ29uZGl0aW9uLnN0YXJ0c1dpdGgoXCIkXCIpKSB7XG4gICAgcmV0dXJuICgwLCBfdXRpbHMuc2VsZWN0UmVmKShyZWZDb25kaXRpb24uc3Vic3RyKDEpLCBmb3JtRGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlZkNvbmRpdGlvbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb25kaXRpb25zTWVldChjb25kaXRpb24sIGZvcm1EYXRhKSB7XG4gIGlmICghKDAsIF91dGlscy5pc09iamVjdCkoY29uZGl0aW9uKSB8fCAhKDAsIF91dGlscy5pc09iamVjdCkoZm9ybURhdGEpKSB7XG4gICAgKDAsIF91dGlscy50b0Vycm9yKShcIlJ1bGUgXCIgKyBKU09OLnN0cmluZ2lmeShjb25kaXRpb24pICsgXCIgd2l0aCBcIiArIGZvcm1EYXRhICsgXCIgY2FuJ3QgYmUgcHJvY2Vzc2VkXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMoY29uZGl0aW9uKS5ldmVyeShmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIHJlZkNvbmRpdGlvbiA9IGNvbmRpdGlvbltyZWZdO1xuICAgIGlmIChyZWYgPT09IF9jb25zdGFudHMuT1IpIHtcbiAgICAgIHJldHVybiByZWZDb25kaXRpb24uc29tZShmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uc01lZXQocnVsZSwgZm9ybURhdGEpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZWYgPT09IF9jb25zdGFudHMuQU5EKSB7XG4gICAgICByZXR1cm4gcmVmQ29uZGl0aW9uLmV2ZXJ5KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb25zTWVldChydWxlLCBmb3JtRGF0YSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlZiA9PT0gX2NvbnN0YW50cy5OT1QpIHtcbiAgICAgIHJldHVybiAhY29uZGl0aW9uc01lZXQocmVmQ29uZGl0aW9uLCBmb3JtRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZWZWYWwgPSAoMCwgX3V0aWxzLnNlbGVjdFJlZikocmVmLCBmb3JtRGF0YSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZWYWwpKSB7XG4gICAgICAgIHZhciBjb25kTWVhdE9uY2UgPSByZWZWYWwuc29tZShmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMuaXNPYmplY3QpKHZhbCkgPyBjb25kaXRpb25zTWVldChyZWZDb25kaXRpb24sIHZhbCkgOiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEl0J3MgZWl0aGVyIHRydWUgZm9yIGFuIGVsZW1lbnQgaW4gYW4gYXJyYXkgb3IgZm9yIHRoZSB3aG9sZSBhcnJheVxuICAgICAgICByZXR1cm4gY29uZE1lYXRPbmNlIHx8ICgwLCBfY2hlY2tGaWVsZDIuZGVmYXVsdCkocmVmVmFsLCB0b1JlbENvbmRpdGlvbihyZWZDb25kaXRpb24sIGZvcm1EYXRhKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKDAsIF9jaGVja0ZpZWxkMi5kZWZhdWx0KShyZWZWYWwsIHRvUmVsQ29uZGl0aW9uKHJlZkNvbmRpdGlvbiwgZm9ybURhdGEpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIE9SID0gZXhwb3J0cy5PUiA9IFwib3JcIjtcbnZhciBBTkQgPSBleHBvcnRzLkFORCA9IFwiYW5kXCI7XG52YXIgTk9UID0gZXhwb3J0cy5OT1QgPSBcIm5vdFwiOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0VuZ2luZSA9IHJlcXVpcmUoXCIuL0VuZ2luZVwiKTtcblxudmFyIF9FbmdpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRW5naW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX0VuZ2luZTIuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmxhdE1hcCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLm5vcm1SZWYgPSBub3JtUmVmO1xuZXhwb3J0cy5zZWxlY3RSZWYgPSBzZWxlY3RSZWY7XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5leHBvcnRzLmlzRGV2ZWxvcG1lbnQgPSBpc0RldmVsb3BtZW50O1xuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcbmV4cG9ydHMudG9FcnJvciA9IHRvRXJyb3I7XG5leHBvcnRzLmlzUmVmQXJyYXkgPSBpc1JlZkFycmF5O1xuZXhwb3J0cy5leHRyYWN0UmVmU2NoZW1hID0gZXh0cmFjdFJlZlNjaGVtYTtcblxudmFyIF9zZWxlY3RuID0gcmVxdWlyZShcInNlbGVjdG5cIik7XG5cbnZhciBfc2VsZWN0bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RuKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gbm9ybVJlZihyZWYpIHtcbiAgcmV0dXJuIHJlZi5yZXBsYWNlKC9cXCQvZywgXCIuXCIpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RSZWYoZmllbGQsIGZvcm1EYXRhKSB7XG4gIHZhciByZWYgPSBub3JtUmVmKGZpZWxkKTtcbiAgcmV0dXJuICgwLCBfc2VsZWN0bjIuZGVmYXVsdCkocmVmLCBmb3JtRGF0YSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gKHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopKSA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRGV2ZWxvcG1lbnQoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoZXZlbnQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbZXZlbnRdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvRXJyb3IobWVzc2FnZSkge1xuICBpZiAoaXNEZXZlbG9wbWVudCgpKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1lc3NhZ2UpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNSZWZBcnJheShmaWVsZCwgc2NoZW1hKSB7XG4gIHJldHVybiBzY2hlbWEucHJvcGVydGllc1tmaWVsZF0gJiYgc2NoZW1hLnByb3BlcnRpZXNbZmllbGRdLnR5cGUgPT09IFwiYXJyYXlcIiAmJiBzY2hlbWEucHJvcGVydGllc1tmaWVsZF0uaXRlbXMgJiYgc2NoZW1hLnByb3BlcnRpZXNbZmllbGRdLml0ZW1zW1wiJHJlZlwiXTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hTY2hlbWEocmVmLCBzY2hlbWEpIHtcbiAgaWYgKHJlZi5zdGFydHNXaXRoKFwiIy9cIikpIHtcbiAgICByZXR1cm4gcmVmLnN1YnN0cigyKS5zcGxpdChcIi9cIikucmVkdWNlKGZ1bmN0aW9uIChzY2hlbWEsIGZpZWxkKSB7XG4gICAgICByZXR1cm4gc2NoZW1hW2ZpZWxkXTtcbiAgICB9LCBzY2hlbWEpO1xuICB9IGVsc2Uge1xuICAgIHRvRXJyb3IoXCJPbmx5IGxvY2FsIHJlZmVyZW5jZXMgc3VwcG9ydGVkIGF0IHRoaXMgcG9pbnQgdXNlIGpzb24tc2NoZW1hLWRlcmVmXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFJlZlNjaGVtYShmaWVsZCwgc2NoZW1hKSB7XG4gIHZhciBwcm9wZXJ0aWVzID0gc2NoZW1hLnByb3BlcnRpZXM7XG5cbiAgaWYgKCFwcm9wZXJ0aWVzIHx8ICFwcm9wZXJ0aWVzW2ZpZWxkXSkge1xuICAgIHRvRXJyb3IoZmllbGQgKyBcIiBub3QgZGVmaW5lZCBpbiBwcm9wZXJ0aWVzXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAocHJvcGVydGllc1tmaWVsZF0udHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgaWYgKGlzUmVmQXJyYXkoZmllbGQsIHNjaGVtYSkpIHtcbiAgICAgIHJldHVybiBmZXRjaFNjaGVtYShwcm9wZXJ0aWVzW2ZpZWxkXS5pdGVtc1tcIiRyZWZcIl0sIHNjaGVtYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzW2ZpZWxkXS5pdGVtcztcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvcGVydGllc1tmaWVsZF0gJiYgcHJvcGVydGllc1tmaWVsZF1bXCIkcmVmXCJdKSB7XG4gICAgcmV0dXJuIGZldGNoU2NoZW1hKHByb3BlcnRpZXNbZmllbGRdW1wiJHJlZlwiXSwgc2NoZW1hKTtcbiAgfSBlbHNlIGlmIChwcm9wZXJ0aWVzW2ZpZWxkXSAmJiBwcm9wZXJ0aWVzW2ZpZWxkXS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIHByb3BlcnRpZXNbZmllbGRdO1xuICB9IGVsc2Uge1xuICAgIHRvRXJyb3IoZmllbGQgKyBcIiBoYXMgbm8gJHJlZiBmaWVsZCByZWYgc2NoZW1hIGV4dHJhY3Rpb24gaXMgaW1wb3NzaWJsZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbnZhciBjb25jYXQgPSBmdW5jdGlvbiBjb25jYXQoeCwgeSkge1xuICByZXR1cm4geC5jb25jYXQoeSk7XG59O1xudmFyIGZsYXRNYXAgPSBleHBvcnRzLmZsYXRNYXAgPSBmdW5jdGlvbiBmbGF0TWFwKHhzLCBmKSB7XG4gIHJldHVybiB4cy5tYXAoZikucmVkdWNlKGNvbmNhdCwgW10pO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucHJlZGljYXRlc0Zyb21SdWxlID0gcHJlZGljYXRlc0Zyb21SdWxlO1xuZXhwb3J0cy5wcmVkaWNhdGVzRnJvbUNvbmRpdGlvbiA9IHByZWRpY2F0ZXNGcm9tQ29uZGl0aW9uO1xuZXhwb3J0cy5saXN0QWxsUHJlZGljYXRlcyA9IGxpc3RBbGxQcmVkaWNhdGVzO1xuZXhwb3J0cy5saXN0SW52YWxpZFByZWRpY2F0ZXMgPSBsaXN0SW52YWxpZFByZWRpY2F0ZXM7XG5leHBvcnRzLnZhbGlkYXRlUHJlZGljYXRlcyA9IHZhbGlkYXRlUHJlZGljYXRlcztcbmV4cG9ydHMuZmllbGRzRnJvbVByZWRpY2F0ZXMgPSBmaWVsZHNGcm9tUHJlZGljYXRlcztcbmV4cG9ydHMuZmllbGRzRnJvbUNvbmRpdGlvbiA9IGZpZWxkc0Zyb21Db25kaXRpb247XG5leHBvcnRzLmxpc3RBbGxGaWVsZHMgPSBsaXN0QWxsRmllbGRzO1xuZXhwb3J0cy5saXN0SW52YWxpZEZpZWxkcyA9IGxpc3RJbnZhbGlkRmllbGRzO1xuZXhwb3J0cy52YWxpZGF0ZUNvbmRpdGlvbkZpZWxkcyA9IHZhbGlkYXRlQ29uZGl0aW9uRmllbGRzO1xuXG52YXIgX3ByZWRpY2F0ZSA9IHJlcXVpcmUoXCJwcmVkaWNhdGVcIik7XG5cbnZhciBfcHJlZGljYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWRpY2F0ZSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBVTlNVUFBPUlRFRF9QUkVESUNBVEVTID0gW1wiYW5kXCIsIFwib3JcIiwgXCJ0ZXJuYXJ5XCIsIFwiZXZlcnlcIiwgXCJzb21lXCIsIFwiY3VycnlcIiwgXCJwYXJ0aWFsXCIsIFwiY29tcGxlbWVudFwiLCBcIm1vZFwiXTtcblxuZnVuY3Rpb24gcHJlZGljYXRlc0Zyb21SdWxlKHJ1bGUsIHNjaGVtYSkge1xuICBpZiAoKDAsIF91dGlscy5pc09iamVjdCkocnVsZSkpIHtcbiAgICByZXR1cm4gKDAsIF91dGlscy5mbGF0TWFwKShPYmplY3Qua2V5cyhydWxlKSwgZnVuY3Rpb24gKHApIHtcbiAgICAgIHZhciBjb21wYXJhYmxlID0gcnVsZVtwXTtcbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzT2JqZWN0KShjb21wYXJhYmxlKSB8fCBwID09PSBfY29uc3RhbnRzLk5PVCkge1xuICAgICAgICBpZiAocCA9PT0gX2NvbnN0YW50cy5PUiB8fCBwID09PSBfY29uc3RhbnRzLkFORCkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbXBhcmFibGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF91dGlscy5mbGF0TWFwKShjb21wYXJhYmxlLCBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVkaWNhdGVzRnJvbVJ1bGUoY29uZGl0aW9uLCBzY2hlbWEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICgwLCBfdXRpbHMudG9FcnJvcikoXCJcXFwiXCIgKyBwICsgXCJcXFwiIG11c3QgYmUgYW4gYXJyYXlcIik7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmVkaWNhdGVzID0gcHJlZGljYXRlc0Zyb21SdWxlKGNvbXBhcmFibGUsIHNjaGVtYSk7XG4gICAgICAgICAgcHJlZGljYXRlcy5wdXNoKHApO1xuICAgICAgICAgIHJldHVybiBwcmVkaWNhdGVzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlc0Zyb21SdWxlKHAsIHNjaGVtYSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtydWxlXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVkaWNhdGVzRnJvbUNvbmRpdGlvbihjb25kaXRpb24sIHNjaGVtYSkge1xuICByZXR1cm4gKDAsIF91dGlscy5mbGF0TWFwKShPYmplY3Qua2V5cyhjb25kaXRpb24pLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIHJlZlZhbCA9IGNvbmRpdGlvbltyZWZdO1xuICAgIHJlZiA9ICgwLCBfdXRpbHMubm9ybVJlZikocmVmKTtcbiAgICBpZiAocmVmID09PSBfY29uc3RhbnRzLk9SIHx8IHJlZiA9PT0gX2NvbnN0YW50cy5BTkQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlZlZhbCkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZmxhdE1hcCkocmVmVmFsLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgIHJldHVybiBwcmVkaWNhdGVzRnJvbUNvbmRpdGlvbihjLCBzY2hlbWEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfdXRpbHMudG9FcnJvcikocmVmICsgXCIgd2l0aCBcIiArIEpTT04uc3RyaW5naWZ5KHJlZlZhbCkgKyBcIiBtdXN0IGJlIGFuIEFycmF5XCIpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZWYgPT09IF9jb25zdGFudHMuTk9UKSB7XG4gICAgICByZXR1cm4gcHJlZGljYXRlc0Zyb21Db25kaXRpb24ocmVmVmFsLCBzY2hlbWEpO1xuICAgIH0gZWxzZSBpZiAocmVmLmluZGV4T2YoXCIuXCIpICE9PSAtMSkge1xuICAgICAgdmFyIHNlcGFyYXRvciA9IHJlZi5pbmRleE9mKFwiLlwiKTtcbiAgICAgIHZhciBzY2hlbWFGaWVsZCA9IHJlZi5zdWJzdHIoMCwgc2VwYXJhdG9yKTtcbiAgICAgIHZhciBzdWJTY2hlbWEgPSAoMCwgX3V0aWxzLmV4dHJhY3RSZWZTY2hlbWEpKHNjaGVtYUZpZWxkLCBzY2hlbWEpO1xuXG4gICAgICBpZiAoc3ViU2NoZW1hKSB7XG4gICAgICAgIHZhciBzdWJTY2hlbWFGaWVsZCA9IHJlZi5zdWJzdHIoc2VwYXJhdG9yICsgMSk7XG4gICAgICAgIHZhciBuZXdDb25kaXRpb24gPSBfZGVmaW5lUHJvcGVydHkoe30sIHN1YlNjaGVtYUZpZWxkLCByZWZWYWwpO1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlc0Zyb21Db25kaXRpb24obmV3Q29uZGl0aW9uLCBzdWJTY2hlbWEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF91dGlscy50b0Vycm9yKShcIkNhbid0IGZpbmQgc2NoZW1hIGZvciBcIiArIHNjaGVtYUZpZWxkKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc1JlZkFycmF5KShyZWYsIHNjaGVtYSkpIHtcbiAgICAgIHZhciByZWZTY2hlbWEgPSAoMCwgX3V0aWxzLmV4dHJhY3RSZWZTY2hlbWEpKHJlZiwgc2NoZW1hKTtcbiAgICAgIHJldHVybiByZWZTY2hlbWEgPyBwcmVkaWNhdGVzRnJvbUNvbmRpdGlvbihyZWZWYWwsIHJlZlNjaGVtYSkgOiBbXTtcbiAgICB9IGVsc2UgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzW3JlZl0pIHtcbiAgICAgIHJldHVybiBwcmVkaWNhdGVzRnJvbVJ1bGUocmVmVmFsLCBzY2hlbWEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX3V0aWxzLnRvRXJyb3IpKFwiQ2FuJ3QgdmFsaWRhdGUgXCIgKyByZWYpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RBbGxQcmVkaWNhdGVzKGNvbmRpdGlvbnMsIHNjaGVtYSkge1xuICB2YXIgYWxsUHJlZGljYXRlcyA9ICgwLCBfdXRpbHMuZmxhdE1hcCkoY29uZGl0aW9ucywgZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIHJldHVybiBwcmVkaWNhdGVzRnJvbUNvbmRpdGlvbihjb25kaXRpb24sIHNjaGVtYSk7XG4gIH0pO1xuICByZXR1cm4gYWxsUHJlZGljYXRlcy5maWx0ZXIoZnVuY3Rpb24gKHYsIGksIGEpIHtcbiAgICByZXR1cm4gYWxsUHJlZGljYXRlcy5pbmRleE9mKHYpID09PSBpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbGlzdEludmFsaWRQcmVkaWNhdGVzKGNvbmRpdGlvbnMsIHNjaGVtYSkge1xuICB2YXIgcmVmUHJlZGljYXRlcyA9IGxpc3RBbGxQcmVkaWNhdGVzKGNvbmRpdGlvbnMsIHNjaGVtYSk7XG4gIHJldHVybiByZWZQcmVkaWNhdGVzLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBVTlNVUFBPUlRFRF9QUkVESUNBVEVTLmluY2x1ZGVzKHApIHx8IF9wcmVkaWNhdGUyLmRlZmF1bHRbcF0gPT09IHVuZGVmaW5lZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJlZGljYXRlcyhjb25kaXRpb25zLCBzY2hlbWEpIHtcbiAgdmFyIGludmFsaWRQcmVkaWNhdGVzID0gbGlzdEludmFsaWRQcmVkaWNhdGVzKGNvbmRpdGlvbnMsIHNjaGVtYSk7XG4gIGlmIChpbnZhbGlkUHJlZGljYXRlcy5sZW5ndGggIT09IDApIHtcbiAgICAoMCwgX3V0aWxzLnRvRXJyb3IpKFwiUnVsZSBjb250YWlucyBpbnZhbGlkIHByZWRpY2F0ZXMgXCIgKyBpbnZhbGlkUHJlZGljYXRlcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmllbGRzRnJvbVByZWRpY2F0ZXMocHJlZGljYXRlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHByZWRpY2F0ZSkpIHtcbiAgICByZXR1cm4gKDAsIF91dGlscy5mbGF0TWFwKShwcmVkaWNhdGUsIGZpZWxkc0Zyb21QcmVkaWNhdGVzKTtcbiAgfSBlbHNlIGlmICgoMCwgX3V0aWxzLmlzT2JqZWN0KShwcmVkaWNhdGUpKSB7XG4gICAgcmV0dXJuICgwLCBfdXRpbHMuZmxhdE1hcCkoT2JqZWN0LmtleXMocHJlZGljYXRlKSwgZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgcHJlZGljYXRlVmFsdWUgPSBwcmVkaWNhdGVbZmllbGRdO1xuICAgICAgcmV0dXJuIGZpZWxkc0Zyb21QcmVkaWNhdGVzKHByZWRpY2F0ZVZhbHVlKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSBcInN0cmluZ1wiICYmIHByZWRpY2F0ZS5zdGFydHNXaXRoKFwiJFwiKSkge1xuICAgIHJldHVybiBbcHJlZGljYXRlLnN1YnN0cigxKV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpZWxkc0Zyb21Db25kaXRpb24oY29uZGl0aW9uKSB7XG4gIHJldHVybiAoMCwgX3V0aWxzLmZsYXRNYXApKE9iamVjdC5rZXlzKGNvbmRpdGlvbiksIGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIgcmVmQ29uZGl0aW9uID0gY29uZGl0aW9uW3JlZl07XG4gICAgaWYgKHJlZiA9PT0gX2NvbnN0YW50cy5PUiB8fCByZWYgPT09IF9jb25zdGFudHMuQU5EKSB7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5mbGF0TWFwKShyZWZDb25kaXRpb24sIGZpZWxkc0Zyb21Db25kaXRpb24pO1xuICAgIH0gZWxzZSBpZiAocmVmID09PSBfY29uc3RhbnRzLk5PVCkge1xuICAgICAgcmV0dXJuIGZpZWxkc0Zyb21Db25kaXRpb24ocmVmQ29uZGl0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFsoMCwgX3V0aWxzLm5vcm1SZWYpKHJlZildLmNvbmNhdChmaWVsZHNGcm9tUHJlZGljYXRlcyhyZWZDb25kaXRpb24pKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsaXN0QWxsRmllbGRzKGNvbmRpdGlvbnMpIHtcbiAgdmFyIGFsbEZpZWxkcyA9ICgwLCBfdXRpbHMuZmxhdE1hcCkoY29uZGl0aW9ucywgZmllbGRzRnJvbUNvbmRpdGlvbik7XG4gIHJldHVybiBhbGxGaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHJldHVybiBmaWVsZC5pbmRleE9mKFwiLlwiKSA9PT0gLTE7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAodiwgaSwgYSkge1xuICAgIHJldHVybiBhbGxGaWVsZHMuaW5kZXhPZih2KSA9PT0gaTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RJbnZhbGlkRmllbGRzKGNvbmRpdGlvbnMsIHNjaGVtYSkge1xuICB2YXIgYWxsRmllbGRzID0gbGlzdEFsbEZpZWxkcyhjb25kaXRpb25zKTtcbiAgcmV0dXJuIGFsbEZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5wcm9wZXJ0aWVzW2ZpZWxkXSA9PT0gdW5kZWZpbmVkO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb25kaXRpb25GaWVsZHMoY29uZGl0aW9ucywgc2NoZW1hKSB7XG4gIHZhciBpbnZhbGlkRmllbGRzID0gbGlzdEludmFsaWRGaWVsZHMoY29uZGl0aW9ucywgc2NoZW1hKTtcbiAgaWYgKGludmFsaWRGaWVsZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgKDAsIF91dGlscy50b0Vycm9yKShcIlJ1bGUgY29udGFpbnMgaW52YWxpZCBmaWVsZHMgXCIgKyBpbnZhbGlkRmllbGRzKTtcbiAgfVxufSIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi9saWIvdXRpbHMnKTtcbmNvbnN0IHByZWRpY2F0ZSA9IHt9O1xucHJlZGljYXRlLlZFUlNJT04gPSAnMS4wLjAnO1xuXG5bXG4gIHV0aWxzLFxuICByZXF1aXJlKCcuL2xpYi9wcmVkaWNhdGVzJyksXG4gIHJlcXVpcmUoJy4vbGliL2NoYWluJyksXG4gIHJlcXVpcmUoJy4vbGliL290aGVyJyksXG5dLnJlZHVjZSh1dGlscy5hc3NpZ24sIHByZWRpY2F0ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZGljYXRlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwcmVkaWNhdGVzID0gcmVxdWlyZSgnLi9wcmVkaWNhdGVzJyk7XG5jb25zdCBwcmVkaWNhdGUgPSBtb2R1bGUuZXhwb3J0cztcblxuLy8gY2hhaW5pbmcgbWl4aW5cbmNsYXNzIExhenkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxhenkgPSBbXTtcbiAgfVxuXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsKCk7XG4gIH1cblxuICB2YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubGF6eVt0aGlzLm1ldGhvZF0oZnVuY3Rpb24oYXJncykge1xuICAgICAgcmV0dXJuIGFyZ3NbMF0uYXBwbHkobnVsbCwgYXJnc1sxXSk7XG4gICAgfSk7XG4gIH1cbn1cblxuY2xhc3MgRXZlcnkgZXh0ZW5kcyBMYXp5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm1ldGhvZCA9ICdldmVyeSc7XG4gIH1cbn1cblxuY2xhc3MgU29tZSBleHRlbmRzIExhenkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWV0aG9kID0gJ3NvbWUnO1xuICB9XG59XG5cbi8vIEV4dGVuZCBjaGFpbmluZyBtZXRob2RzIG9udG8gdGhlIHByb3RvdHlwZXNcbltFdmVyeSwgU29tZV0uZm9yRWFjaChmdW5jdGlvbihjbHMpIHtcbiAgT2JqZWN0LmtleXMocHJlZGljYXRlcykucmVkdWNlKGZ1bmN0aW9uKHByb3RvLCBmbk5hbWUpIHtcbiAgICBpZiAoIXByZWRpY2F0ZXMuZm4ocHJlZGljYXRlc1tmbk5hbWVdKSkgcmV0dXJuIHByb3RvO1xuXG4gICAgcHJvdG9bZm5OYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5sYXp5LnB1c2goW3ByZWRpY2F0ZXNbZm5OYW1lXSwgYXJndW1lbnRzXSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3RvO1xuICB9LCBjbHMucHJvdG90eXBlKTtcbn0pO1xuXG5wcmVkaWNhdGUuYWxsID0gcHJlZGljYXRlLmV2ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRXZlcnkoKTtcbn07XG5cbnByZWRpY2F0ZS5hbnkgPSBwcmVkaWNhdGUuc29tZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNvbWUoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSByZXF1aXJlKCcuL3ByZWRpY2F0ZXMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3QgcHJlZGljYXRlID0gbW9kdWxlLmV4cG9ydHM7XG5cbnByZWRpY2F0ZS50ZXJuYXJ5ID0gZnVuY3Rpb24ocHJlZCwgYSwgYikge1xuICBpZiAocHJlZGljYXRlcy5ib29sKHByZWQpKSByZXR1cm4gcHJlZCA/IGEgOiBiO1xuICBpZiAocHJlZGljYXRlcy51bmRlZihhKSkgcmV0dXJuIHV0aWxzLnBhcnRpYWwocHJlZGljYXRlLnRlcm5hcnksIHByZWQpO1xuICBpZiAocHJlZGljYXRlcy51bmRlZihiKSkgcmV0dXJuIHV0aWxzLnBhcnRpYWwocHJlZGljYXRlLnRlcm5hcnksIHByZWQsIGEpO1xuICByZXR1cm4gcHJlZGljYXRlLnRlcm5hcnkocHJlZChhLCBiKSwgYSwgYik7XG59O1xuXG5jb25zdCBfZXZlcnkgPSBBcnJheS5wcm90b3R5cGUuZXZlcnk7XG5jb25zdCBfc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuXG5wcmVkaWNhdGUuYW5kID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHByZWRpY2F0ZXMgPSBhcmd1bWVudHM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIF9hbmQodmFsKSB7XG4gICAgcmV0dXJuIF9ldmVyeS5jYWxsKHByZWRpY2F0ZXMsIGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwKHZhbCk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5wcmVkaWNhdGUub3IgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgcHJlZGljYXRlcyA9IGFyZ3VtZW50cztcblxuICByZXR1cm4gZnVuY3Rpb24gX29yKHZhbCkge1xuICAgIHJldHVybiBfc29tZS5jYWxsKHByZWRpY2F0ZXMsIGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwKHZhbCk7XG4gICAgfSk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbmNvbnN0IHByZWRpY2F0ZSA9IG1vZHVsZS5leHBvcnRzO1xuXG5jb25zdCBjdXJyeSA9IHV0aWxzLmN1cnJ5O1xuXG5pZiAoT2JqZWN0LmlzKSB7XG4gIHByZWRpY2F0ZS5pcyA9IGN1cnJ5KE9iamVjdC5pcyk7XG59IGVsc2Uge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgcHJlZGljYXRlLmlzID0gY3VycnkoZnVuY3Rpb24odjEsIHYyKSB7XG4gICAgaWYgKHYxID09PSAwICYmIHYyID09PSAwKSB7XG4gICAgICByZXR1cm4gMSAvIHYxID09PSAxIC8gdjI7XG4gICAgfVxuICAgIGlmICh2MSAhPT0gdjEpIHtcbiAgICAgIHJldHVybiB2MiAhPT0gdjI7XG4gICAgfVxuICAgIHJldHVybiB2MSA9PT0gdjI7XG4gIH0pO1xufVxuXG5wcmVkaWNhdGUuZXhpc3RzID0gZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbDtcbn07XG5cbnByZWRpY2F0ZS50cnV0aHkgPSBmdW5jdGlvbih2YWwpIHtcbiAgLy8gY29lcmNlIGZvciBudWxsICE9IG51bGxcbiAgcmV0dXJuICEhKHZhbCAmJiBwcmVkaWNhdGUuZXhpc3RzKHZhbCkpO1xufTtcblxucHJlZGljYXRlLmZhbHNleSA9IHV0aWxzLmNvbXBsZW1lbnQocHJlZGljYXRlLnRydXRoeSk7XG5cbi8vLS0tLSB2YWx1ZSBjb21wYXJpc2lvbiBtZXRob2RzXG5cbnByZWRpY2F0ZS5lcXVhbCA9IGN1cnJ5KGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59KTtcblxucHJlZGljYXRlLmVxID0gY3VycnkoZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9PSBiO1xufSk7XG5cbnByZWRpY2F0ZS5udWxsID0gcHJlZGljYXRlLmVxdWFsKG51bGwpO1xucHJlZGljYXRlLnVuZGVmID0gcHJlZGljYXRlLmVxdWFsKHVuZGVmaW5lZCk7XG5cbnByZWRpY2F0ZS5sdCA9IHByZWRpY2F0ZS5sZXNzID0gY3VycnkoZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGI7XG59KTtcblxucHJlZGljYXRlLmx0RXEgPSBwcmVkaWNhdGUubGUgPSBwcmVkaWNhdGUubGVzc0VxID0gY3VycnkoZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gcHJlZGljYXRlLmVxdWFsKGEsIGIpIHx8IHByZWRpY2F0ZS5sZXNzKGEsIGIpO1xufSk7XG5cbnByZWRpY2F0ZS5ndCA9IHByZWRpY2F0ZS5ncmVhdGVyID0gY3VycnkoZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA+IGI7XG59KTtcblxucHJlZGljYXRlLmd0RXEgPSBwcmVkaWNhdGUuZ2UgPSBwcmVkaWNhdGUuZ3JlYXRlckVxID0gY3VycnkoZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gcHJlZGljYXRlLmVxdWFsKGEsIGIpIHx8IHByZWRpY2F0ZS5ncmVhdGVyKGEsIGIpO1xufSk7XG5cbi8vIC0tLSBUeXBlIGNoZWNraW5nIHByZWRpY2F0ZXNcblxuLy8gRm9yY2VzIG9iamVjdHMgdG9TdHJpbmcgY2FsbGVkIHJldHVybmVkIGFzIFtvYmplY3QgT2JqZWN0XSBmb3IgaW5zdGFuY2VcbmNvbnN0IF9fdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuY29uc3QgZXFUb1N0ciA9IGN1cnJ5KGZ1bmN0aW9uKHN0ciwgdmFsKSB7XG4gIHJldHVybiBwcmVkaWNhdGUuZXF1YWwoc3RyLCBfX3RvU3RyaW5nLmNhbGwodmFsKSk7XG59KTtcblxuLy8tLS0tIE9iamVjdCB0eXBlIGNoZWNrc1xuXG5wcmVkaWNhdGUub2JqZWN0ID0gcHJlZGljYXRlLm9iaiA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdmFsID09PSBPYmplY3QodmFsKTtcbn07XG5cbnByZWRpY2F0ZS5hcnJheSA9IHByZWRpY2F0ZS5hcnIgPSBBcnJheS5pc0FycmF5IHx8IGVxVG9TdHIoJ1tvYmplY3QgQXJyYXldJyk7XG5wcmVkaWNhdGUuZGF0ZSA9IGVxVG9TdHIoJ1tvYmplY3QgRGF0ZV0nKTtcbnByZWRpY2F0ZS5yZWdleCA9IHByZWRpY2F0ZS5yZWdleHAgPSBwcmVkaWNhdGUucmd4ID0gcHJlZGljYXRlLlJlZ0V4cCA9IGVxVG9TdHIoJ1tvYmplY3QgUmVnRXhwXScpO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvaXNGaW5pdGVcbnByZWRpY2F0ZS5maW5pdGUgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiBwcmVkaWNhdGUubnVtYmVyKHZhbCkgJiYgaXNGaW5pdGUodmFsKTtcbn07XG5cbnByZWRpY2F0ZS5uYW4gPSBwcmVkaWNhdGUuTmFOID0gcHJlZGljYXRlLmlzKE5hTik7XG5cbnByZWRpY2F0ZS5pbnN0YW5jZSA9IGN1cnJ5KGZ1bmN0aW9uKENscywgaW5zdCkge1xuICByZXR1cm4gaW5zdCBpbnN0YW5jZW9mIENscztcbn0pO1xuXG5wcmVkaWNhdGUuYXJndW1lbnRzID0gZXFUb1N0cignW29iamVjdCBBcmd1bWVudHNdJyk7XG5wcmVkaWNhdGUuZXJyb3IgPSBwcmVkaWNhdGUuaW5zdGFuY2UoRXJyb3IpO1xuXG4vLyBjcmVhdGVzIGZucyBmb3IgcHJlZGljYXRlLnN0cmluZywgZXRjXG5jb25zdCB0eXBlb2ZCdWlsZGVyID0gY3VycnkoZnVuY3Rpb24odHlwZSwgdmFsKSB7XG4gIHJldHVybiBwcmVkaWNhdGUuZXF1YWwodHlwZSwgdHlwZW9mIHZhbCk7XG59KTtcblxuLy8tLS0gQ3JlYXRlIHR5cGVvZiBtZXRob2RzXG5cbi8vIHR5cGUgb2Ygc3RyaW5nIGFuZCBhbGlhcyBuYW1lXG4vLyBwcmVkaWNhdGUuZm4sIHByZWRpY2F0ZS5udW0sIGV0Y1xuW1xuICBbJ2Z1bmN0aW9uJywgJ2ZuJ10sXG4gIFsnc3RyaW5nJywgJ3N0ciddLFxuICBbJ2Jvb2xlYW4nLCAnYm9vbCddXG5dLnJlZHVjZShmdW5jdGlvbihwcmVkaWNhdGUsIHR5cGUpIHtcbiAgcHJlZGljYXRlW3R5cGVbMF1dID0gcHJlZGljYXRlW3R5cGVbMV1dID0gdHlwZW9mQnVpbGRlcih0eXBlWzBdKTtcbiAgcmV0dXJuIHByZWRpY2F0ZTtcbn0sIHByZWRpY2F0ZSk7XG5cbnByZWRpY2F0ZS5udW1iZXIgPSBwcmVkaWNhdGUubnVtID0gZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiBwcmVkaWNhdGUubm90Lk5hTih2YWwpO1xufTtcblxucHJlZGljYXRlLmludCA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gcHJlZGljYXRlLm51bSh2YWwpICYmIHByZWRpY2F0ZS56ZXJvKHV0aWxzLm1vZCh2YWwsIDEpKTtcbn07XG5cbnByZWRpY2F0ZS5wb3MgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHByZWRpY2F0ZS5udW0odmFsKSAmJiBwcmVkaWNhdGUuZ3JlYXRlcih2YWwsIDApO1xufTtcblxucHJlZGljYXRlLm5lZyA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gcHJlZGljYXRlLm51bSh2YWwpICYmIHByZWRpY2F0ZS5sZXNzKHZhbCwgMCk7XG59O1xuXG5wcmVkaWNhdGUuemVybyA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gcHJlZGljYXRlLm51bSh2YWwpICYmIHByZWRpY2F0ZS5lcXVhbCh2YWwsIDApO1xufTtcblxucHJlZGljYXRlLmV2ZW4gPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHByZWRpY2F0ZS5udW0odmFsKSAmJlxuICAgICAgICAgIHByZWRpY2F0ZS5ub3QuemVybyh2YWwpICYmXG4gICAgICAgICAgcHJlZGljYXRlLnplcm8odXRpbHMubW9kKHZhbCwgMikpO1xufTtcblxucHJlZGljYXRlLm9kZCA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gcHJlZGljYXRlLm51bSh2YWwpICYmXG4gICAgICAgICAgcHJlZGljYXRlLm5vdC56ZXJvKHZhbCkgJiZcbiAgICAgICAgICBwcmVkaWNhdGUubm90Lnplcm8odXRpbHMubW9kKHZhbCwgMikpO1xufTtcblxucHJlZGljYXRlLmNvbnRhaW5zID0gcHJlZGljYXRlLmluY2x1ZGVzID0gY3VycnkoZnVuY3Rpb24oYXJyT3JTdHJpbmcsIHZhbCkge1xuICBpZiAoIXByZWRpY2F0ZS5hcnJheShhcnJPclN0cmluZykgJiYgIXByZWRpY2F0ZS5zdHJpbmcoYXJyT3JTdHJpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYW4gYXJyYXkgb3Igc3RyaW5nJyk7XG4gIH1cblxuICBpZiAocHJlZGljYXRlLnN0cmluZyhhcnJPclN0cmluZykgJiYgIXByZWRpY2F0ZS5zdHJpbmcodmFsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwcmVkaWNhdGUuTmFOKHZhbCkpIHtcbiAgICByZXR1cm4gYXJyT3JTdHJpbmcuc29tZShwcmVkaWNhdGUuTmFOKTtcbiAgfVxuXG4gIHJldHVybiAhIX5hcnJPclN0cmluZy5pbmRleE9mKHZhbCk7XG59KTtcblxuY29uc3QgX19oYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xucHJlZGljYXRlLmhhcyA9IGN1cnJ5KGZ1bmN0aW9uKG8sIGtleSkge1xuICByZXR1cm4gX19oYXMuY2FsbChvLCBrZXkpO1xufSk7XG5cbnByZWRpY2F0ZS5lbXB0eSA9IGZ1bmN0aW9uKG8pIHtcbiAgaWYgKHByZWRpY2F0ZS5ub3QuZXhpc3RzKG8pKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKHByZWRpY2F0ZS5hcnIobykgfHwgcHJlZGljYXRlLnN0cihvKSkgcmV0dXJuICFvLmxlbmd0aDtcbiAgaWYgKHByZWRpY2F0ZS5vYmoobykpIHtcbiAgICBmb3IgKGxldCBrIGluIG8pIGlmIChwcmVkaWNhdGUuaGFzKG8sIGspKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xufTtcblxucHJlZGljYXRlLnByaW1pdGl2ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gcHJlZGljYXRlLnN0cmluZyh2YWwpIHx8IHByZWRpY2F0ZS5udW0odmFsKSB8fCBwcmVkaWNhdGUuYm9vbCh2YWwpIHx8XG4gICAgcHJlZGljYXRlLm51bGwodmFsKSB8fCBwcmVkaWNhdGUudW5kZWYodmFsKSB8fCBwcmVkaWNhdGUuTmFOKHZhbCk7XG59O1xuXG5wcmVkaWNhdGUubWF0Y2hlcyA9IGN1cnJ5KGZ1bmN0aW9uKHJneCwgdmFsKSB7XG4gIHJldHVybiByZ3gudGVzdCh2YWwpO1xufSk7XG5cbi8vIEFzc2lnbiBpbnZlcnNlIG9mIGVhY2ggcHJlZGljYXRlXG5wcmVkaWNhdGUubm90ID0gT2JqZWN0LmtleXMocHJlZGljYXRlKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBmbk5hbWUpIHtcbiAgYWNjW2ZuTmFtZV0gPSB1dGlscy5jb21wbGVtZW50KHByZWRpY2F0ZVtmbk5hbWVdKTtcbiAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IHByZWRpY2F0ZSA9IG1vZHVsZS5leHBvcnRzO1xuY29uc3QgX3NsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyBVc2VmdWwgZm9yIGRlYnVnaW5nIGN1cnJpZWQgZnVuY3Rpb25zXG5jb25zdCBzZXRTcmMgPSBmdW5jdGlvbihjdXJyaWVkLCBzcmMpIHtcbiAgY3VycmllZC50b1N0cmluZyA9ICgpID0+IHNyYy50b1N0cmluZygpO1xuICBjdXJyaWVkLnNyYyA9IHNyYztcbiAgcmV0dXJuIGN1cnJpZWQ7XG59O1xuXG4vLyBDdXJyeSdzIGZuJ3Mgd2l0aCBhcml0eSAyXG5jb25zdCBjdXJyeSA9IHByZWRpY2F0ZS5jdXJyeSA9IGZ1bmN0aW9uKGYpIHtcbiAgcmV0dXJuIHNldFNyYyhmdW5jdGlvbiBjdXJyaWVkKGEsIGIpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzJyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBzZXRTcmMoZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gZihhLCBiKTtcbiAgICAgIH0sIGYpO1xuICAgIH1cblxuICAgIHJldHVybiBmKGEsIGIpO1xuICB9LCBmKTtcbn07XG5cbi8vIFRPRE86IGVzNmluZyB0aGlzIGJyZWFrcyFcbnByZWRpY2F0ZS5wYXJ0aWFsID0gZnVuY3Rpb24gKGZuKSB7XG4gIGNvbnN0IGFyZ3MgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KF9zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfTtcbn07XG5cbnByZWRpY2F0ZS5jb21wbGVtZW50ID0gcHJlZGljYXRlLmludmVydCA9IGZ1bmN0aW9uKHByZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXQgPSBwcmVkLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgLy8gSGFuZGxlIGN1cnJpZWQgZm5zXG4gICAgaWYgKHR5cGVvZiByZXQgPT09ICdmdW5jdGlvbicpIHJldHVybiBwcmVkaWNhdGUuY29tcGxlbWVudChyZXQpO1xuICAgIHJldHVybiAhcmV0O1xuICB9O1xufTtcblxucHJlZGljYXRlLm1vZCA9IGN1cnJ5KGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgJSBiO1xufSk7XG5cbi8vIGFzc2lnbiBiJ3MgcHJvcHMgdG8gYVxucHJlZGljYXRlLmFzc2lnbiA9IGN1cnJ5KE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24oYSwgYikge1xuICAvLyB1c2UgY3J1bW15IGZvci9pbiBmb3IgcGVyZiBwdXJwb3Nlc1xuICBmb3IgKGxldCBwcm9wIGluIGIpIHtcbiAgICBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgYVtwcm9wXSA9IGJbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGE7XG59KTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/RnVuY3Rpb259IGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZ2V0U3RhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXG4gICAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArXG4gICAgICAgICAgICAgICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbnZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cbiAgdmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICB2YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7IC8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICAgKlxuICAgKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAgICpcbiAgICogICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihteUl0ZXJhYmxlKTtcbiAgICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAgICogICAgICAgLi4uXG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbWF5YmVJdGVyYWJsZVxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gICAqL1xuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG4gICAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gICAqXG4gICAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcbiAgICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cbiAgICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAgICpcbiAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuICAgKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gICAqXG4gICAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuICAgKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gICAqICAgICB9LFxuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuICAgKlxuICAgKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAgICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG4gICAqXG4gICAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAgICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICAgKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICAgKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gICAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgKiAgICAgICAgICApO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH1cbiAgICogICAgfSxcbiAgICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gICAqICB9KTtcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuXG4gIHZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG5cbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gICAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcbiAgICBzeW1ib2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSxcblxuICAgIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG4gICAgZWxlbWVudDogY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCksXG4gICAgZWxlbWVudFR5cGU6IGNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSxcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICAgIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gICAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsXG4gICAgZXhhY3Q6IGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIsXG4gIH07XG5cbiAgLyoqXG4gICAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAqL1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSovXG4gIGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqL1xuXG4gIC8qKlxuICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG4gICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsXG4gICAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBQcm9wVHlwZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuc3RhY2sgPSAnJztcbiAgfVxuICAvLyBNYWtlIGBpbnN0YW5jZW9mIEVycm9yYCBzdGlsbCB3b3JrIGZvciByZXR1cm5lZCBlcnJvcnMuXG4gIFByb3BUeXBlRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSA9IHt9O1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAgIGlmICh0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gICAgICAgICAgLy8gTmV3IGJlaGF2aW9yIG9ubHkgZm9yIHVzZXJzIG9mIGBwcm9wLXR5cGVzYCBwYWNrYWdlXG4gICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICdVc2UgYFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpYCB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcbiAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJlxuICAgICAgICAgICAgLy8gQXZvaWQgc3BhbW1pbmcgdGhlIGNvbnNvbGUgYmVjYXVzZSB0aGV5IGFyZSBvZnRlbiBub3QgYWN0aW9uYWJsZSBleGNlcHQgZm9yIGxpYiBhdXRob3JzXG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA8IDNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICAgJ1lvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBhIFJlYWN0LlByb3BUeXBlcyB2YWxpZGF0aW9uICcgK1xuICAgICAgICAgICAgICAnZnVuY3Rpb24gZm9yIHRoZSBgJyArIHByb3BGdWxsTmFtZSArICdgIHByb3Agb24gYCcgKyBjb21wb25lbnROYW1lICArICdgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50cyBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXksIGdvdCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLiAnICtcbiAgICAgICAgICAgICdBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcywgZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgU3RyaW5nKHByb3BWYWx1ZSkgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWxsIGtleXMgaW4gY2FzZSBzb21lIGFyZSByZXF1aXJlZCBidXQgbWlzc2luZyBmcm9tXG4gICAgICAvLyBwcm9wcy5cbiAgICAgIHZhciBhbGxLZXlzID0gYXNzaWduKHt9LCBwcm9wc1twcm9wTmFtZV0sIHNoYXBlVHlwZXMpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGFsbEtleXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwocHJvcFZhbHVlKTtcbiAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gICAgLy8gTmF0aXZlIFN5bWJvbC5cbiAgICBpZiAocHJvcFR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBmYWxzeSB2YWx1ZSBjYW4ndCBiZSBhIFN5bWJvbFxuICAgIGlmICghcHJvcFZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSA9PT0gJ1N5bWJvbCdcbiAgICBpZiAocHJvcFZhbHVlWydAQHRvU3RyaW5nVGFnJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgcHJvcFZhbHVlIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG4gIGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuICAgICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgICByZXR1cm4gJ29iamVjdCc7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdzeW1ib2wnO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gIC8vIFNlZSBgY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXJgLlxuICBmdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcFZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gJycgKyBwcm9wVmFsdWU7XG4gICAgfVxuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIHN0cmluZyB0aGF0IGlzIHBvc3RmaXhlZCB0byBhIHdhcm5pbmcgYWJvdXQgYW4gaW52YWxpZCB0eXBlLlxuICAvLyBGb3IgZXhhbXBsZSwgXCJ1bmRlZmluZWRcIiBvciBcIm9mIHR5cGUgYXJyYXlcIlxuICBmdW5jdGlvbiBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiAnYW4gJyArIHR5cGU7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgY2FzZSAncmVnZXhwJzpcbiAgICAgICAgcmV0dXJuICdhICcgKyB0eXBlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICAgIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgcmV0dXJuIEFOT05ZTU9VUztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBjaGVja1Byb3BUeXBlcztcbiAgUmVhY3RQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBjaGVja1Byb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZTtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjVcbiAqIHJlYWN0LWlzLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJykgOiAweGVhY2E7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JykgOiAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJykgOiAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJykgOiAweGVhZDI7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJykgOiAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpIDogMHhlYWNlO1xudmFyIFJFQUNUX0FTWU5DX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmFzeW5jX21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbmN1cnJlbnRfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpIDogMHhlYWQwO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZScpIDogMHhlYWQxO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKSA6IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5JykgOiAweGVhZDQ7XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgLy8gTm90ZTogaXRzIHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIGlmIGl0J3MgYSBwb2x5ZmlsbC5cbiAgdHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKTtcbn1cblxuLyoqXG4gKiBGb3JrZWQgZnJvbSBmYmpzL3dhcm5pbmc6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2U2NmJhMjBhZDViZTQzM2ViNTQ0MjNmMmIwOTdkODI5MzI0ZDlkZTYvcGFja2FnZXMvZmJqcy9zcmMvX19mb3Jrc19fL3dhcm5pbmcuanNcbiAqXG4gKiBPbmx5IGNoYW5nZSBpcyB3ZSB1c2UgY29uc29sZS53YXJuIGluc3RlYWQgb2YgY29uc29sZS5lcnJvcixcbiAqIGFuZCBkbyBub3RoaW5nIHdoZW4gJ2NvbnNvbGUnIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKiBUaGlzIHJlYWxseSBzaW1wbGlmaWVzIHRoZSBjb2RlLlxuICogLS0tXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xuXG4gIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgbG93UHJpb3JpdHlXYXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkodW5kZWZpbmVkLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIGxvd1ByaW9yaXR5V2FybmluZyQxID0gbG93UHJpb3JpdHlXYXJuaW5nO1xuXG5mdW5jdGlvbiB0eXBlT2Yob2JqZWN0KSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHZhciB0eXBlID0gb2JqZWN0LnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyICQkdHlwZW9mVHlwZSA9IHR5cGUgJiYgdHlwZS4kJHR5cGVvZjtcblxuICAgICAgICAgICAgc3dpdGNoICgkJHR5cGVvZlR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZlR5cGU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8vIEFzeW5jTW9kZSBpcyBkZXByZWNhdGVkIGFsb25nIHdpdGggaXNBc3luY01vZGVcbnZhciBBc3luY01vZGUgPSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU7XG52YXIgQ29uY3VycmVudE1vZGUgPSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTtcbnZhciBDb250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG52YXIgQ29udGV4dFByb3ZpZGVyID0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbnZhciBFbGVtZW50ID0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xudmFyIEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xudmFyIEZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbnZhciBMYXp5ID0gUkVBQ1RfTEFaWV9UWVBFO1xudmFyIE1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG52YXIgUG9ydGFsID0gUkVBQ1RfUE9SVEFMX1RZUEU7XG52YXIgUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xudmFyIFN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xudmFyIFN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcblxudmFyIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gZmFsc2U7XG5cbi8vIEFzeW5jTW9kZSBzaG91bGQgYmUgZGVwcmVjYXRlZFxuZnVuY3Rpb24gaXNBc3luY01vZGUob2JqZWN0KSB7XG4gIHtcbiAgICBpZiAoIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IHRydWU7XG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ1RoZSBSZWFjdElzLmlzQXN5bmNNb2RlKCkgYWxpYXMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE3Ky4gVXBkYXRlIHlvdXIgY29kZSB0byB1c2UgJyArICdSZWFjdElzLmlzQ29uY3VycmVudE1vZGUoKSBpbnN0ZWFkLiBJdCBoYXMgdGhlIGV4YWN0IHNhbWUgQVBJLicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHx8IHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRm9yd2FyZFJlZihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTWVtbyhvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufVxuXG5leHBvcnRzLnR5cGVPZiA9IHR5cGVPZjtcbmV4cG9ydHMuQXN5bmNNb2RlID0gQXN5bmNNb2RlO1xuZXhwb3J0cy5Db25jdXJyZW50TW9kZSA9IENvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLkNvbnRleHRQcm92aWRlciA9IENvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQ7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBGb3J3YXJkUmVmO1xuZXhwb3J0cy5GcmFnbWVudCA9IEZyYWdtZW50O1xuZXhwb3J0cy5MYXp5ID0gTGF6eTtcbmV4cG9ydHMuTWVtbyA9IE1lbW87XG5leHBvcnRzLlBvcnRhbCA9IFBvcnRhbDtcbmV4cG9ydHMuUHJvZmlsZXIgPSBQcm9maWxlcjtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFN0cmljdE1vZGU7XG5leHBvcnRzLlN1c3BlbnNlID0gU3VzcGVuc2U7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZTtcbmV4cG9ydHMuaXNBc3luY01vZGUgPSBpc0FzeW5jTW9kZTtcbmV4cG9ydHMuaXNDb25jdXJyZW50TW9kZSA9IGlzQ29uY3VycmVudE1vZGU7XG5leHBvcnRzLmlzQ29udGV4dENvbnN1bWVyID0gaXNDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gaXNDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbmV4cG9ydHMuaXNGb3J3YXJkUmVmID0gaXNGb3J3YXJkUmVmO1xuZXhwb3J0cy5pc0ZyYWdtZW50ID0gaXNGcmFnbWVudDtcbmV4cG9ydHMuaXNMYXp5ID0gaXNMYXp5O1xuZXhwb3J0cy5pc01lbW8gPSBpc01lbW87XG5leHBvcnRzLmlzUG9ydGFsID0gaXNQb3J0YWw7XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBpc1Byb2ZpbGVyO1xuZXhwb3J0cy5pc1N0cmljdE1vZGUgPSBpc1N0cmljdE1vZGU7XG5leHBvcnRzLmlzU3VzcGVuc2UgPSBpc1N1c3BlbnNlO1xuICB9KSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIhZnVuY3Rpb24oZSxuKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9uKGV4cG9ydHMscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJzbW9vdGgtZG5kXCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIixcInJlYWN0XCIsXCJwcm9wLXR5cGVzXCIsXCJzbW9vdGgtZG5kXCJdLG4pOm4oKGU9ZXx8c2VsZikuUmVhY3RTbW9vdGhEbkQ9e30sZS5SZWFjdCxlLlByb3BUeXBlcyxlLlNtb290aERuRCl9KHRoaXMsZnVuY3Rpb24obixyLGUsbyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9XCJkZWZhdWx0XCJpbiByP3IuZGVmYXVsdDpyO2Z1bmN0aW9uIGEoZSxuKXtpZighKGUgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIHMoZSxuKXtmb3IodmFyIHQ9MDt0PG4ubGVuZ3RoO3QrKyl7dmFyIHI9blt0XTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIGMoZSxuLHQpe3JldHVybiBuJiZzKGUucHJvdG90eXBlLG4pLHQmJnMoZSx0KSxlfWZ1bmN0aW9uIHAoZSxuLHQpe3JldHVybiBuIGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbbl09dCxlfWZ1bmN0aW9uIHQoKXtyZXR1cm4odD1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgdD1hcmd1bWVudHNbbl07Zm9yKHZhciByIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikmJihlW3JdPXRbcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIHUoZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuJiZuLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLG4mJmYoZSxuKX1mdW5jdGlvbiBsKGUpe3JldHVybihsPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9KShlKX1mdW5jdGlvbiBmKGUsbil7cmV0dXJuKGY9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLG4pe3JldHVybiBlLl9fcHJvdG9fXz1uLGV9KShlLG4pfWZ1bmN0aW9uIGgoZSxuKXtpZihudWxsPT1lKXJldHVybnt9O3ZhciB0LHIsbz1mdW5jdGlvbihlLG4pe2lmKG51bGw9PWUpcmV0dXJue307dmFyIHQscixvPXt9LGk9T2JqZWN0LmtleXMoZSk7Zm9yKHI9MDtyPGkubGVuZ3RoO3IrKyl0PWlbcl0sMDw9bi5pbmRleE9mKHQpfHwob1t0XT1lW3RdKTtyZXR1cm4gb30oZSxuKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO2ZvcihyPTA7cjxpLmxlbmd0aDtyKyspdD1pW3JdLDA8PW4uaW5kZXhPZih0KXx8T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsdCkmJihvW3RdPWVbdF0pfXJldHVybiBvfWZ1bmN0aW9uIGQoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9ZnVuY3Rpb24geShlLG4pe3JldHVybiFufHxcIm9iamVjdFwiIT10eXBlb2YgbiYmXCJmdW5jdGlvblwiIT10eXBlb2Ygbj9kKGUpOm59ZT1lJiZlLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFwiKT9lLmRlZmF1bHQ6ZSxvLnNtb290aERuRC5kcm9wSGFuZGxlcj1vLmRyb3BIYW5kbGVycy5yZWFjdERyb3BIYW5kbGVyKCkuaGFuZGxlcixvLnNtb290aERuRC53cmFwQ2hpbGQ9ITE7dmFyIGc9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXt2YXIgbjtyZXR1cm4gYSh0aGlzLHQpLHAoZChuPXkodGhpcyxsKHQpLmNhbGwodGhpcyxlKSkpLFwicHJldkNvbnRhaW5lclwiLHZvaWQgMCkscChkKG4pLFwiY29udGFpbmVyXCIsbnVsbCkscChkKG4pLFwiY29udGFpbmVyUmVmXCIsaS5jcmVhdGVSZWYoKSksbi5nZXRDb250YWluZXJPcHRpb25zPW4uZ2V0Q29udGFpbmVyT3B0aW9ucy5iaW5kKGQobikpLG4uZ2V0Q29udGFpbmVyPW4uZ2V0Q29udGFpbmVyLmJpbmQoZChuKSksbi5pc09iamVjdFR5cGVQcm9wc0NoYW5nZWQ9bi5pc09iamVjdFR5cGVQcm9wc0NoYW5nZWQuYmluZChkKG4pKSxuLnByZXZDb250YWluZXI9bnVsbCxufXJldHVybiB1KHQsci5Db21wb25lbnQpLGModCxbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnByZXZDb250YWluZXI9dGhpcy5nZXRDb250YWluZXIoKSx0aGlzLmNvbnRhaW5lcj1vLnNtb290aERuRCh0aGlzLmdldENvbnRhaW5lcigpLHRoaXMuZ2V0Q29udGFpbmVyT3B0aW9ucygpKX19LHtrZXk6XCJjb21wb25lbnRXaWxsVW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXIuZGlzcG9zZSgpLHRoaXMuY29udGFpbmVyPW51bGx9fSx7a2V5OlwiY29tcG9uZW50RGlkVXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodGhpcy5nZXRDb250YWluZXIoKSl7aWYodGhpcy5wcmV2Q29udGFpbmVyJiZ0aGlzLnByZXZDb250YWluZXIhPT10aGlzLmdldENvbnRhaW5lcigpKXJldHVybiB0aGlzLmNvbnRhaW5lci5kaXNwb3NlKCksdGhpcy5jb250YWluZXI9by5zbW9vdGhEbkQodGhpcy5nZXRDb250YWluZXIoKSx0aGlzLmdldENvbnRhaW5lck9wdGlvbnMoKSksdm9pZCh0aGlzLnByZXZDb250YWluZXI9dGhpcy5nZXRDb250YWluZXIoKSk7dGhpcy5pc09iamVjdFR5cGVQcm9wc0NoYW5nZWQoZSkmJnRoaXMuY29udGFpbmVyLnNldE9wdGlvbnModGhpcy5nZXRDb250YWluZXJPcHRpb25zKCkpfX19LHtrZXk6XCJpc09iamVjdFR5cGVQcm9wc0NoYW5nZWRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj10aGlzLnByb3BzLHQ9KG4ucmVuZGVyLG4uY2hpbGRyZW4sbi5zdHlsZSxoKG4sW1wicmVuZGVyXCIsXCJjaGlsZHJlblwiLFwic3R5bGVcIl0pKTtmb3IodmFyIHIgaW4gdCl7dmFyIG89cjtpZih0Lmhhc093blByb3BlcnR5KG8pKXt2YXIgaT10W29dO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkmJmkhPT1lW29dKXJldHVybiEwfX1yZXR1cm4hMX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3BzLnJlbmRlcj90aGlzLnByb3BzLnJlbmRlcih0aGlzLmNvbnRhaW5lclJlZik6aS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse3N0eWxlOnRoaXMucHJvcHMuc3R5bGUscmVmOnRoaXMuY29udGFpbmVyUmVmfSx0aGlzLnByb3BzLmNoaWxkcmVuKX19LHtrZXk6XCJnZXRDb250YWluZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRhaW5lclJlZi5jdXJyZW50fX0se2tleTpcImdldENvbnRhaW5lck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBvPXRoaXM7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLnJlZHVjZShmdW5jdGlvbihlLG4pe3ZhciB0PW4scj1vLnByb3BzW3RdO3JldHVybiBlW3RdPVwiZnVuY3Rpb25cIj09dHlwZW9mIHI/ZnVuY3Rpb24oKXtyZXR1cm4gby5wcm9wc1t0XS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX06cixlfSx7fSl9fV0pLHR9KCk7cChnLFwicHJvcFR5cGVzXCIse2JlaGF2aW91cjplLm9uZU9mKFtcIm1vdmVcIixcImNvcHlcIixcImRyb3Atem9uZVwiLFwiY29udGFpblwiXSksZ3JvdXBOYW1lOmUuc3RyaW5nLG9yaWVudGF0aW9uOmUub25lT2YoW1wiaG9yaXpvbnRhbFwiLFwidmVydGljYWxcIl0pLHN0eWxlOmUub2JqZWN0LGRyYWdIYW5kbGVTZWxlY3RvcjplLnN0cmluZyxub25EcmFnQXJlYVNlbGVjdG9yOmUuc3RyaW5nLGRyYWdCZWdpbkRlbGF5OmUubnVtYmVyLGFuaW1hdGlvbkR1cmF0aW9uOmUubnVtYmVyLGF1dG9TY3JvbGxFbmFibGVkOmUuYm9vbCxsb2NrQXhpczplLnN0cmluZyxkcmFnQ2xhc3M6ZS5zdHJpbmcsZHJvcENsYXNzOmUuc3RyaW5nLG9uRHJhZ1N0YXJ0OmUuZnVuYyxvbkRyYWdFbmQ6ZS5mdW5jLG9uRHJvcDplLmZ1bmMsZ2V0Q2hpbGRQYXlsb2FkOmUuZnVuYyxzaG91bGRBbmltYXRlRHJvcDplLmZ1bmMsc2hvdWxkQWNjZXB0RHJvcDplLmZ1bmMsb25EcmFnRW50ZXI6ZS5mdW5jLG9uRHJhZ0xlYXZlOmUuZnVuYyxyZW5kZXI6ZS5mdW5jLGdldEdob3N0UGFyZW50OmUuZnVuYyxyZW1vdmVPbkRyb3BPdXQ6ZS5ib29sLGRyb3BQbGFjZWhvbGRlcjplLm9uZU9mVHlwZShbZS5zaGFwZSh7Y2xhc3NOYW1lOmUuc3RyaW5nLGFuaW1hdGlvbkR1cmF0aW9uOmUubnVtYmVyLHNob3dPblRvcDplLmJvb2x9KSxlLmJvb2xdKX0pLHAoZyxcImRlZmF1bHRQcm9wc1wiLHtiZWhhdmlvdXI6XCJtb3ZlXCIsb3JpZW50YXRpb246XCJ2ZXJ0aWNhbFwifSk7dmFyIGI9by5jb25zdGFudHMud3JhcHBlckNsYXNzLHY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3JldHVybiBhKHRoaXMsbikseSh0aGlzLGwobikuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gdShuLHIuQ29tcG9uZW50KSxjKG4sW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMucHJvcHMucmVuZGVyKXJldHVybiBpLmNsb25lRWxlbWVudCh0aGlzLnByb3BzLnJlbmRlcigpLHtjbGFzc05hbWU6Yn0pO3ZhciBlPVwiXCIuY29uY2F0KHRoaXMucHJvcHMuY2xhc3NOYW1lP3RoaXMucHJvcHMuY2xhc3NOYW1lK1wiIFwiOlwiXCIpO3JldHVybiBpLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix0KHt9LHRoaXMucHJvcHMse2NsYXNzTmFtZTpcIlwiLmNvbmNhdChlKS5jb25jYXQoYil9KSx0aGlzLnByb3BzLmNoaWxkcmVuKX19XSksbn0oKTtwKHYsXCJwcm9wc1R5cGVzXCIse3JlbmRlcjplLmZ1bmMsY2xhc3NOYW1lOmUuc3RyaW5nfSksT2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbihlKXtuW2VdPW9bZV19KSxuLkNvbnRhaW5lcj1nLG4uRHJhZ2dhYmxlPXYsT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgY3VycnkyID0gcmVxdWlyZSgnY3VycnkyJylcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NlbGVjdG4nKVxudmFyIGRvdHRlZCA9IHJlcXVpcmUoJ2JyYWNrZXRzMmRvdHMnKVxudmFyIHNwbGl0cyA9IHJlcXVpcmUoJ2RvdHNwbGl0LmpzJylcbnZhciBzdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gY3VycnkyKHNlbGVjdG4pXG5cbi8qKlxuICogQ3VycmllZCBwcm9wZXJ0eSBhY2Nlc3NvciBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIGRlZXBseS1uZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMgdmlhIGRvdC9icmFja2V0LW5vdGF0aW9uXG4gKiBzdHJpbmcgcGF0aCB3aGlsZSBtaXRpZ2F0aW5nIGBUeXBlRXJyb3JzYCB2aWEgZnJpZW5kbHkgYW5kIGNvbXBvc2FibGUgQVBJLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwYXRoXG4gKiBEb3QvYnJhY2tldC1ub3RhdGlvbiBzdHJpbmcgcGF0aCBvciBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBPYmplY3QgdG8gYWNjZXNzLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufCp8dW5kZWZpbmVkfVxuICogKDEpIHJldHVybnMgYHNlbGVjdG4vMWAgd2hlbiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAqICgyKSByZXR1cm5zIHZhbHVlIGF0IHBhdGggaWYgcGF0aCBleGlzdHMuXG4gKiAoMykgcmV0dXJucyB1bmRlZmluZWQgaWYgcGF0aCBkb2VzIG5vdCBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2VsZWN0biAocGF0aCwgb2JqZWN0KSB7XG4gIGRlYnVnKCdhcmd1bWVudHM6Jywge1xuICAgIHBhdGg6IHBhdGgsXG4gICAgb2JqZWN0OiBvYmplY3RcbiAgfSlcblxuICB2YXIgaWR4ID0gLTFcbiAgdmFyIHNlZyA9IHN0cmluZy5jYWxsKHBhdGgpID09PSAnW29iamVjdCBBcnJheV0nID8gcGF0aCA6IHNwbGl0cyhkb3R0ZWQocGF0aCkpXG4gIHZhciBlbmQgPSBzZWcubGVuZ3RoXG4gIHZhciByZWYgPSBlbmQgPyBvYmplY3QgOiB2b2lkIDBcblxuICB3aGlsZSAoKytpZHggPCBlbmQpIHtcbiAgICBpZiAoT2JqZWN0KHJlZikgIT09IHJlZikgcmV0dXJuIHZvaWQgMFxuICAgIHJlZiA9IHJlZltzZWdbaWR4XV1cbiAgfVxuXG4gIGRlYnVnKCdyZWY6JywgcmVmKVxuICByZXR1cm4gdHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJyA/IHJlZigpIDogcmVmXG59XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSx0KTp0KChlPWV8fHNlbGYpLlNtb290aERuRD17fSl9KHRoaXMsZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGwsdCxyPVwic21vb3RoLWRuZC1jb250YWluZXItaW5zdGFuY2VcIixiPVwic21vb3RoLWRuZC1kcmFnZ2FibGUtd3JhcHBlclwiLG89XCJhbmltYXRlZFwiLHA9XCJfX3Ntb290aF9kbmRfZHJhZ2dhYmxlX3RyYW5zbGF0aW9uX3ZhbHVlXCIsdT1cIl9fc21vb3RoX2RuZF9kcmFnZ2FibGVfdmlzaWJpbGl0eV92YWx1ZVwiLEM9XCJzbW9vdGgtZG5kLWdob3N0XCIsdz1cInNtb290aC1kbmQtY29udGFpbmVyXCIsZD1cInNtb290aC1kbmQtZXh0cmEtc2l6ZS1mb3ItaW5zZXJ0aW9uXCIsdj1cInNtb290aC1kbmQtc3RyZXRjaGVyLWVsZW1lbnRcIixoPVwic21vb3RoLWRuZC1zdHJldGNoZXItaW5zdGFuY2VcIixzPVwic21vb3RoLWRuZC1kaXNhYmxlLXRvdWNoLWFjdGlvblwiLGM9XCJzbW9vdGgtZG5kLW5vLXVzZXItc2VsZWN0XCIsaT1cInNtb290aC1kbmQtcHJldmVudC1hdXRvLXNjcm9sbC1jbGFzc1wiLHk9XCJzbW9vdGgtZG5kLWRyb3AtcHJldmlldy1kZWZhdWx0LWNsYXNzXCIseD1cInNtb290aC1kbmQtZHJvcC1wcmV2aWV3LWlubmVyLWNsYXNzXCIsRT1cInNtb290aC1kbmQtZHJvcC1wcmV2aWV3LWNvbnN0YW50LWNsYXNzXCIsRD1cInNtb290aC1kbmQtZHJvcC1wcmV2aWV3LWZsZXgtY29udGFpbmVyLWNsYXNzXCIsbj1PYmplY3QuZnJlZXplKHtjb250YWluZXJJbnN0YW5jZTpyLGRlZmF1bHRHcm91cE5hbWU6XCJAQHNtb290aC1kbmQtZGVmYXVsdC1ncm91cEBAXCIsd3JhcHBlckNsYXNzOmIsZGVmYXVsdEdyYWJIYW5kbGVDbGFzczpcInNtb290aC1kbmQtZGVmYXVsdC1ncmFwLWhhbmRsZVwiLGFuaW1hdGlvbkNsYXNzOm8sdHJhbnNsYXRpb25WYWx1ZTpwLHZpc2liaWxpdHlWYWx1ZTp1LGdob3N0Q2xhc3M6Qyxjb250YWluZXJDbGFzczp3LGV4dHJhU2l6ZUZvckluc2VydGlvbjpkLHN0cmV0Y2hlckVsZW1lbnRDbGFzczp2LHN0cmV0Y2hlckVsZW1lbnRJbnN0YW5jZTpoLGlzRHJhZ2dhYmxlRGV0YWNoZWQ6XCJzbW90aC1kbmQtaXMtZHJhZ2dhYmxlLWRldGFjaGVkXCIsZGlzYmFsZVRvdWNoQWN0aW9uczpzLG5vVXNlclNlbGVjdENsYXNzOmMscHJldmVudEF1dG9TY3JvbGxDbGFzczppLGRyb3BQbGFjZWhvbGRlckRlZmF1bHRDbGFzczp5LGRyb3BQbGFjZWhvbGRlcklubmVyQ2xhc3M6eCxkcm9wUGxhY2Vob2xkZXJXcmFwcGVyQ2xhc3M6RSxkcm9wUGxhY2Vob2xkZXJGbGV4Q29udGFpbmVyQ2xhc3M6RH0pLFM9e2dyb3VwTmFtZTp2b2lkIDAsYmVoYXZpb3VyOlwibW92ZVwiLG9yaWVudGF0aW9uOlwidmVydGljYWxcIixnZXRDaGlsZFBheWxvYWQ6dm9pZCAwLGFuaW1hdGlvbkR1cmF0aW9uOjI1MCxhdXRvU2Nyb2xsRW5hYmxlZDohMCxzaG91bGRBY2NlcHREcm9wOnZvaWQgMCxzaG91bGRBbmltYXRlRHJvcDp2b2lkIDB9O2Z1bmN0aW9uIGEoZSl7cmV0dXJuKGE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0pKGUpfWZ1bmN0aW9uIGYoZSx0LG4pe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfWZ1bmN0aW9uIGcoZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLG49bmV3IEFycmF5KGUubGVuZ3RoKTt0PGUubGVuZ3RoO3QrKyluW3RdPWVbdF07cmV0dXJuIG59fShlKXx8ZnVuY3Rpb24oZSl7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKXx8XCJbb2JqZWN0IEFyZ3VtZW50c11cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlyZXR1cm4gQXJyYXkuZnJvbShlKX0oZSl8fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfSgpfSh0PWx8fChsPXt9KSkueD1cInhcIix0Lnk9XCJ5XCIsdC54eT1cInh5XCI7dmFyIE89ZnVuY3Rpb24oZSx0KXtyZXR1cm57bGVmdDpNYXRoLm1heChlLmxlZnQsdC5sZWZ0KSx0b3A6TWF0aC5tYXgoZS50b3AsdC50b3ApLHJpZ2h0Ok1hdGgubWluKGUucmlnaHQsdC5yaWdodCksYm90dG9tOk1hdGgubWluKGUuYm90dG9tLHQuYm90dG9tKX19LG09ZnVuY3Rpb24oZSx0LG4pe3JldHVyblwieFwiPT09bj97bGVmdDpNYXRoLm1heChlLmxlZnQsdC5sZWZ0KSx0b3A6ZS50b3AscmlnaHQ6TWF0aC5taW4oZS5yaWdodCx0LnJpZ2h0KSxib3R0b206ZS5ib3R0b219OntsZWZ0OmUubGVmdCx0b3A6TWF0aC5tYXgoZS50b3AsdC50b3ApLHJpZ2h0OmUucmlnaHQsYm90dG9tOk1hdGgubWluKGUuYm90dG9tLHQuYm90dG9tKX19LFI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXtsZWZ0OnQubGVmdCxyaWdodDp0LnJpZ2h0LHRvcDp0LnRvcCxib3R0b206dC5ib3R0b219O2lmKFAoZSxcInhcIikmJiFCKGUsXCJ4XCIpKXt2YXIgbz1uLnJpZ2h0LW4ubGVmdDtuLnJpZ2h0PW4ucmlnaHQrZS5zY3JvbGxXaWR0aC1vfWlmKFAoZSxcInlcIikmJiFCKGUsXCJ5XCIpKXt2YXIgcj1uLmJvdHRvbS1uLnRvcDtuLmJvdHRvbT1uLmJvdHRvbStlLnNjcm9sbEhlaWdodC1yfXJldHVybiBufSxBPWZ1bmN0aW9uKGUpe3ZhciB0PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUpLG49dC5vdmVyZmxvdztpZihcImF1dG9cIj09PW58fFwic2Nyb2xsXCI9PT1uKXJldHVybiBsLnh5O3ZhciBvPXRbXCJvdmVyZmxvdy14XCJdLHI9XCJhdXRvXCI9PT1vfHxcInNjcm9sbFwiPT09byxpPXRbXCJvdmVyZmxvdy15XCJdLGE9XCJhdXRvXCI9PT1pfHxcInNjcm9sbFwiPT09aTtyZXR1cm4gciYmYT9sLnh5OnI/bC54OmE/bC55Om51bGx9LEk9ZnVuY3Rpb24oZSx0KXt2YXIgbj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKSxvPW4ub3ZlcmZsb3cscj1uW1wib3ZlcmZsb3ctXCIuY29uY2F0KHQpXTtyZXR1cm5cImF1dG9cIj09PW98fFwic2Nyb2xsXCI9PT1vfHwoXCJhdXRvXCI9PT1yfHxcInNjcm9sbFwiPT09cil9LEI9ZnVuY3Rpb24oZSx0KXt2YXIgbj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKSxvPW4ub3ZlcmZsb3cscj1uW1wib3ZlcmZsb3ctXCIuY29uY2F0KHQpXTtyZXR1cm5cImF1dG9cIj09PW98fFwic2Nyb2xsXCI9PT1vfHxcImhpZGRlblwiPT09b3x8KFwiYXV0b1wiPT09cnx8XCJzY3JvbGxcIj09PXJ8fFwiaGlkZGVuXCI9PT1yKX0sUD1mdW5jdGlvbihlLHQpe3JldHVyblwieFwiPT09dD9lLnNjcm9sbFdpZHRoPmUuY2xpZW50V2lkdGg6ZS5zY3JvbGxIZWlnaHQ+ZS5jbGllbnRIZWlnaHR9LFQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLG89dHx8UihlKTtmb3Iobj1lLnBhcmVudEVsZW1lbnQ7bjspUChuLFwieFwiKSYmQihuLFwieFwiKSYmKG89bShvLG4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXCJ4XCIpKSxQKG4sXCJ5XCIpJiZCKG4sXCJ5XCIpJiYobz1tKG8sbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcInlcIikpLG49bi5wYXJlbnRFbGVtZW50O3JldHVybiBvfSx6PWZ1bmN0aW9uKGUsbil7Zm9yKHZhciBvPWU7bzspe2lmKG9bcl0pe3ZhciB0PWZ1bmN0aW9uKCl7dmFyIHQ9b1tyXTtpZihuLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSkpcmV0dXJue3Y6dH19KCk7aWYoXCJvYmplY3RcIj09PWEodCkpcmV0dXJuIHQudn1vPW8ucGFyZW50RWxlbWVudH1yZXR1cm4gbnVsbH0sTj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lO247KXtpZihuLm1hdGNoZXModCkpcmV0dXJuIG47bj1uLnBhcmVudEVsZW1lbnR9cmV0dXJuIG51bGx9LEw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4tMTxlLmNsYXNzTmFtZS5zcGxpdChcIiBcIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlfSkuaW5kZXhPZih0KX0sTT1mdW5jdGlvbihlLHQpe2lmKGUpe3ZhciBuPWUuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KTstMT09PW4uaW5kZXhPZih0KSYmKG4udW5zaGlmdCh0KSxlLmNsYXNzTmFtZT1uLmpvaW4oXCIgXCIpKX19LGo9ZnVuY3Rpb24oZSx0KXtpZihlKXt2YXIgbj1lLmNsYXNzTmFtZS5zcGxpdChcIiBcIikuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlIT09dH0pO2UuY2xhc3NOYW1lPW4uam9pbihcIiBcIil9fSxfPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUucmVtb3ZlQ2hpbGQoZS5jaGlsZHJlblt0XSl9LEY9ZnVuY3Rpb24oZSx0LG4pe24+PWUuY2hpbGRyZW4ubGVuZ3RoP2UuYXBwZW5kQ2hpbGQodCk6ZS5pbnNlcnRCZWZvcmUodCxlLmNoaWxkcmVuW25dKX0sVj1mdW5jdGlvbigpe3dpbmRvdy5nZXRTZWxlY3Rpb24/d2luZG93LmdldFNlbGVjdGlvbigpLmVtcHR5P3dpbmRvdy5nZXRTZWxlY3Rpb24oKS5lbXB0eSgpOndpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMmJndpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTp3aW5kb3cuZG9jdW1lbnQuc2VsZWN0aW9uJiZ3aW5kb3cuZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCl9LFg9ZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHQ9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSk7aWYodClyZXR1cm4gdC5jdXJzb3J9cmV0dXJuIG51bGx9O2Z1bmN0aW9uIEgoZSl7cmV0dXJuIShlLmJvdHRvbTw9ZS50b3B8fGUucmlnaHQ8PWUubGVmdCl9ZnVuY3Rpb24gWShlKXt2YXIgcz1lLmVsZW1lbnQsYz1lLmRyYWdnYWJsZXM7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49ZSxvPW4ucmVtb3ZlZEluZGV4LHI9bi5hZGRlZEluZGV4LGk9bi5kcm9wcGVkRWxlbWVudCxhPW51bGw7aWYobnVsbCE9PW8mJihhPV8ocyxvKSxjLnNwbGljZShvLDEpKSxudWxsIT09cil7dmFyIGw9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bC5jbGFzc05hbWU9XCJcIi5jb25jYXQoYiksbC5hcHBlbmRDaGlsZChhJiZhLmZpcnN0RWxlbWVudENoaWxkP2EuZmlyc3RFbGVtZW50Q2hpbGQ6aSksRihzLGwscikscj49Yy5sZW5ndGg/Yy5wdXNoKGwpOmMuc3BsaWNlKHIsMCxsKX10JiZ0KGUpfX12YXIgaz1PYmplY3QuZnJlZXplKHtkb21Ecm9wSGFuZGxlcjpZLHJlYWN0RHJvcEhhbmRsZXI6ZnVuY3Rpb24oKXtyZXR1cm57aGFuZGxlcjpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe3QmJnQoZSl9fX19fSksRz17c2l6ZTpcIm9mZnNldFdpZHRoXCIsZGlzdGFuY2VUb1BhcmVudDpcIm9mZnNldExlZnRcIix0cmFuc2xhdGU6XCJ0cmFuc2Zvcm1cIixiZWdpbjpcImxlZnRcIixlbmQ6XCJyaWdodFwiLGRyYWdQb3NpdGlvbjpcInhcIixzY3JvbGxTaXplOlwic2Nyb2xsV2lkdGhcIixvZmZzZXRTaXplOlwib2Zmc2V0V2lkdGhcIixzY3JvbGxWYWx1ZTpcInNjcm9sbExlZnRcIixzY2FsZTpcInNjYWxlWFwiLHNldFNpemU6XCJ3aWR0aFwiLHNldHRlcnM6e3RyYW5zbGF0ZTpmdW5jdGlvbihlKXtyZXR1cm5cInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChlLFwicHgsIDAsIDApXCIpfX19LFc9e3NpemU6XCJvZmZzZXRIZWlnaHRcIixkaXN0YW5jZVRvUGFyZW50Olwib2Zmc2V0VG9wXCIsdHJhbnNsYXRlOlwidHJhbnNmb3JtXCIsYmVnaW46XCJ0b3BcIixlbmQ6XCJib3R0b21cIixkcmFnUG9zaXRpb246XCJ5XCIsc2Nyb2xsU2l6ZTpcInNjcm9sbEhlaWdodFwiLG9mZnNldFNpemU6XCJvZmZzZXRIZWlnaHRcIixzY3JvbGxWYWx1ZTpcInNjcm9sbFRvcFwiLHNjYWxlOlwic2NhbGVZXCIsc2V0U2l6ZTpcImhlaWdodFwiLHNldHRlcnM6e3RyYW5zbGF0ZTpmdW5jdGlvbihlKXtyZXR1cm5cInRyYW5zbGF0ZTNkKDAsXCIuY29uY2F0KGUsXCJweCwgMClcIil9fX07ZnVuY3Rpb24gcShvLHMsZSl7b1tkXT0wO3ZhciByLGk9KHI9XCJob3Jpem9udGFsXCI9PT1zP0c6Vyx7Z2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGVbclt0XXx8dF19LHNldDpmdW5jdGlvbihlLHQsbil7ZVtyW3RdXT1yLnNldHRlcnNbdF0/ci5zZXR0ZXJzW3RdKG4pOm59fSksYz17dHJhbnNsYXRpb246MH07ZnVuY3Rpb24gdCgpe3ZhciBlLHQ7bihvKSx0PShlPW8pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGMuc2NhbGVYPWUub2Zmc2V0V2lkdGg/KHQucmlnaHQtdC5sZWZ0KS9lLm9mZnNldFdpZHRoOjEsYy5zY2FsZVk9ZS5vZmZzZXRIZWlnaHQ/KHQuYm90dG9tLXQudG9wKS9lLm9mZnNldEhlaWdodDoxfWZ1bmN0aW9uIG4oZSl7Yy5yZWN0PVIoZSk7dmFyIHQ9VChlLGMucmVjdCk7SCh0KSYmKGMubGFzdFZpc2libGVSZWN0PWMudmlzaWJsZVJlY3QpLGMudmlzaWJsZVJlY3Q9dH1mdW5jdGlvbiBhKGUpe3ZhciB0PWU7aWYodC50YWdOYW1lKXt2YXIgbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3JldHVyblwidmVydGljYWxcIj09PXM/bi5ib3R0b20tbi50b3A6bi5yaWdodC1uLmxlZnR9cmV0dXJuIGkuZ2V0KGUsXCJzaXplXCIpKmkuZ2V0KGMsXCJzY2FsZVwiKX1mdW5jdGlvbiBsKGUpe3JldHVybiBpLmdldChlLFwiZHJhZ1Bvc2l0aW9uXCIpfXJldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGZ1bmN0aW9uKCl7bihvKX0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0KCl9LDEwKSx7Z2V0U2l6ZTphLGdldENvbnRhaW5lclJlY3RhbmdsZXM6ZnVuY3Rpb24oKXtyZXR1cm57cmVjdDpjLnJlY3QsdmlzaWJsZVJlY3Q6Yy52aXNpYmxlUmVjdCxsYXN0VmlzaWJsZVJlY3Q6Yy5sYXN0VmlzaWJsZVJlY3R9fSxnZXRCZWdpbkVuZE9mRE9NUmVjdDpmdW5jdGlvbihlKXtyZXR1cm57YmVnaW46aS5nZXQoZSxcImJlZ2luXCIpLGVuZDppLmdldChlLFwiZW5kXCIpfX0sZ2V0QmVnaW5FbmRPZkNvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybntiZWdpbjppLmdldChjLnJlY3QsXCJiZWdpblwiKStjLnRyYW5zbGF0aW9uLGVuZDppLmdldChjLnJlY3QsXCJlbmRcIikrYy50cmFuc2xhdGlvbn19LGdldEJlZ2luRW5kT2ZDb250YWluZXJWaXNpYmxlUmVjdDpmdW5jdGlvbigpe3JldHVybntiZWdpbjppLmdldChjLnZpc2libGVSZWN0LFwiYmVnaW5cIikrYy50cmFuc2xhdGlvbixlbmQ6aS5nZXQoYy52aXNpYmxlUmVjdCxcImVuZFwiKStjLnRyYW5zbGF0aW9ufX0sZ2V0QmVnaW5FbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsbj0odD1lLChpLmdldCh0LFwiZGlzdGFuY2VUb1BhcmVudFwiKSsodFtwXXx8MCkpKmkuZ2V0KGMsXCJzY2FsZVwiKSsoaS5nZXQoYy5yZWN0LFwiYmVnaW5cIikrYy50cmFuc2xhdGlvbiktaS5nZXQobyxcInNjcm9sbFZhbHVlXCIpKTtyZXR1cm57YmVnaW46bixlbmQ6bithKGUpKmkuZ2V0KGMsXCJzY2FsZVwiKX19LGdldEF4aXNWYWx1ZTpsLHNldFRyYW5zbGF0aW9uOmZ1bmN0aW9uKGUsdCl7dD9pLnNldChlLnN0eWxlLFwidHJhbnNsYXRlXCIsdCk6ZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zZm9ybVwiKSxlW3BdPXR9LGdldFRyYW5zbGF0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiBlW3BdfSxzZXRWaXNpYmlsaXR5OmZ1bmN0aW9uKGUsdCl7dm9pZCAwIT09ZVt1XSYmZVt1XT09PXR8fCh0P2Uuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ2aXNpYmlsaXR5XCIpOmUuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiLGVbdV09dCl9LGlzVmlzaWJsZTpmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZVt1XXx8ZVt1XX0saXNJblZpc2libGVSZWN0OmZ1bmN0aW9uKGUsdCl7dmFyIG49Yy52aXNpYmxlUmVjdCxvPW4ubGVmdCxyPW4udG9wLGk9bi5yaWdodCxhPW4uYm90dG9tO2EtcjwyJiYoYT1yKzMwKTt2YXIgbD1jLnJlY3Q7cmV0dXJuXCJ2ZXJ0aWNhbFwiPT09cz9lPmwubGVmdCYmZTxsLnJpZ2h0JiZyPHQmJnQ8YTpvPGUmJmU8aSYmdD5sLnRvcCYmdDxsLmJvdHRvbX0sc2V0U2l6ZTpmdW5jdGlvbihlLHQpe2kuc2V0KGUsXCJzZXRTaXplXCIsdCl9LGdldFRvcExlZnRPZkVsZW1lbnRCZWdpbjpmdW5jdGlvbihlKXt2YXIgdD0wO3JldHVybnt0b3A6XCJob3Jpem9udGFsXCI9PT1zPyh0PWUsYy5yZWN0LnRvcCk6KHQ9Yy5yZWN0LmxlZnQsZSksbGVmdDp0fX0sZ2V0U2Nyb2xsU2l6ZTpmdW5jdGlvbihlKXtyZXR1cm4gaS5nZXQoZSxcInNjcm9sbFNpemVcIil9LGdldFNjcm9sbFZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBpLmdldChlLFwic2Nyb2xsVmFsdWVcIil9LHNldFNjcm9sbFZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkuc2V0KGUsXCJzY3JvbGxWYWx1ZVwiLHQpfSxpbnZhbGlkYXRlOnQsaW52YWxpZGF0ZVJlY3RzOmZ1bmN0aW9uKCl7bihvKX0sZ2V0UG9zaXRpb246ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSl9LHNldEJlZ2luOmZ1bmN0aW9uKGUsdCl7aS5zZXQoZSxcImJlZ2luXCIsdCl9fX1mdW5jdGlvbiBVKGUsdCxuKXt2YXIgbyxyLGksYT1uLmxlZnQsbD1uLnJpZ2h0LHM9bi50b3AsYz1uLmJvdHRvbSx1PWUueCxkPWUueTtpZih1PGF8fGw8dXx8ZDxzfHxjPGQpcmV0dXJuIG51bGw7aT1cInhcIj09PXQ/KG89YSxyPWwsdSk6KG89cyxyPWMsZCk7dmFyIGY9ci1vLGc9NDAwPGY/MTAwOmYvNDtyZXR1cm4gci1pPGc/e2RpcmVjdGlvbjpcImVuZFwiLHNwZWVkRmFjdG9yOihnLShyLWkpKS9nfTppLW88Zz97ZGlyZWN0aW9uOlwiYmVnaW5cIixzcGVlZEZhY3RvcjooZy0oaS1vKSkvZ306bnVsbH12YXIgSj1mdW5jdGlvbihsKXt2YXIgcz0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJ5XCIsYz1udWxsLHU9bnVsbCxkPW51bGwsZj1udWxsO3JldHVybnthbmltYXRlOmZ1bmN0aW9uKGUsdCl7ZD1lLGY9dCxmdW5jdGlvbiBhKCl7bnVsbD09PWMmJihjPXJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbihlKXtudWxsPT09dSYmKHU9ZSk7dmFyIHQ9ZS11O3U9ZTt2YXIgbixvLHIsaT10LzFlMypmO289cyxyPWk9XCJiZWdpblwiPT09ZD8wLWk6aSwobj1sKSYmKG4hPT13aW5kb3c/XCJ4XCI9PT1vP24uc2Nyb2xsTGVmdCs9cjpuLnNjcm9sbFRvcCs9cjpcInhcIj09PW8/bi5zY3JvbGxCeShyLDApOm4uc2Nyb2xsQnkoMCxyKSksYz1udWxsLGEoKX0pKX0oKX0sc3RvcDpmdW5jdGlvbigpe251bGwhPT1jJiYoY2FuY2VsQW5pbWF0aW9uRnJhbWUoYyksYz1udWxsKSx1PW51bGx9fX07ZnVuY3Rpb24gSyhlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gVChlLGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpfX12YXIgUSxaLCQsZWU9ZnVuY3Rpb24oZSl7dmFyIHU9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjE1MDAsYT1lLnJlZHVjZShmdW5jdGlvbihlLHQpe3ZhciBuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPWUuZWxlbWVudDtuOyl7dmFyIG89QShuKTtpZihvJiYhTChuLGkpKXt2YXIgcj17fTtzd2l0Y2gobyl7Y2FzZSBsLnh5OnIueD17YW5pbWF0b3I6SihuLFwieFwiKX0sci55PXthbmltYXRvcjpKKG4sXCJ5XCIpfTticmVhaztjYXNlIGwueDpyLng9e2FuaW1hdG9yOkoobixcInhcIil9O2JyZWFrO2Nhc2UgbC55OnIueT17YW5pbWF0b3I6SihuLFwieVwiKX19dC5wdXNoKHtheGlzQW5pbWF0aW9uczpyLGdldFJlY3Q6SyhuKSxzY3JvbGxlckVsZW1lbnQ6bn0pfW49bi5wYXJlbnRFbGVtZW50fXJldHVybiB0fSh0KS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIWUuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5zY3JvbGxlckVsZW1lbnQ9PT10LnNjcm9sbGVyRWxlbWVudH0pfSk7cmV0dXJuW10uY29uY2F0KGcoZSksZyhuKSl9LFtdKTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQsbyxuPWUuZHJhZ2dhYmxlSW5mbztpZihlLnJlc2V0KWEuZm9yRWFjaChmdW5jdGlvbihlKXtlLmF4aXNBbmltYXRpb25zLngmJmUuYXhpc0FuaW1hdGlvbnMueC5hbmltYXRvci5zdG9wKCksZS5heGlzQW5pbWF0aW9ucy55JiZlLmF4aXNBbmltYXRpb25zLnkuYW5pbWF0b3Iuc3RvcCgpfSk7ZWxzZSBpZihuKXt0PWEsbz1uLm1vdXNlUG9zaXRpb24sdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuYXhpc0FuaW1hdGlvbnMsbj0oMCxlLmdldFJlY3QpKCk7dC54JiYodC54LnNjcm9sbFBhcmFtcz1VKG8sXCJ4XCIsbiksZS5jYWNoZWRSZWN0PW4pLHQueSYmKHQueS5zY3JvbGxQYXJhbXM9VShvLFwieVwiLG4pLGUuY2FjaGVkUmVjdD1uKX0pLGEuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmF4aXNBbmltYXRpb25zLG49dC54LG89dC55O2lmKG4paWYobi5zY3JvbGxQYXJhbXMpe3ZhciByPW4uc2Nyb2xsUGFyYW1zLGk9ci5kaXJlY3Rpb24sYT1yLnNwZWVkRmFjdG9yO24uYW5pbWF0b3IuYW5pbWF0ZShpLGEqdSl9ZWxzZSBuLmFuaW1hdG9yLnN0b3AoKTtpZihvKWlmKG8uc2Nyb2xsUGFyYW1zKXt2YXIgbD1vLnNjcm9sbFBhcmFtcyxzPWwuZGlyZWN0aW9uLGM9bC5zcGVlZEZhY3RvcjtvLmFuaW1hdG9yLmFuaW1hdGUocyxjKnUpfWVsc2Ugby5hbmltYXRvci5zdG9wKCl9KTt2YXIgcj1hLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5jYWNoZWRSZWN0fSk7aWYoci5sZW5ndGgmJjE8ci5sZW5ndGgpe3ZhciBpPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPWRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodC54LHQueSk7bjspe3ZhciBvPWUuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5zY3JvbGxlckVsZW1lbnQ9PT1ufSk7aWYobylyZXR1cm4gbztuPW4ucGFyZW50RWxlbWVudH1yZXR1cm4gbnVsbH0ocixuLm1vdXNlUG9zaXRpb24pO2kmJnIuZm9yRWFjaChmdW5jdGlvbihlKXtlIT09aSYmKGUuYXhpc0FuaW1hdGlvbnMueCYmZS5heGlzQW5pbWF0aW9ucy54LmFuaW1hdG9yLnN0b3AoKSxlLmF4aXNBbmltYXRpb25zLnkmJmUuYXhpc0FuaW1hdGlvbnMueS5hbmltYXRvci5zdG9wKCkpfSl9fX19O1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJigoUT1Ob2RlfHxFbGVtZW50KSYmUS5wcm90b3R5cGUmJiFRLnByb3RvdHlwZS5tYXRjaGVzJiYoUS5wcm90b3R5cGUubWF0Y2hlcz1RLnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3J8fFEucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3Rvcnx8US5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3J8fFEucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3J8fFEucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PSh0aGlzLmRvY3VtZW50fHx0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoZSksbj10Lmxlbmd0aDswPD0tLW4mJnQuaXRlbShuKSE9PXRoaXM7KTtyZXR1cm4tMTxufSksKFo9Tm9kZXx8RWxlbWVudCkmJloucHJvdG90eXBlJiZudWxsPT1aLnByb3RvdHlwZS5maXJzdEVsZW1lbnRDaGlsZCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KFoucHJvdG90eXBlLFwiZmlyc3RFbGVtZW50Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9dGhpcy5jaGlsZE5vZGVzLG49MDtlPXRbbisrXTspaWYoMT09PWUubm9kZVR5cGUpcmV0dXJuIGU7cmV0dXJuIG51bGx9fSksQXJyYXkucHJvdG90eXBlLnNvbWV8fChBcnJheS5wcm90b3R5cGUuc29tZT1mdW5jdGlvbihlKXtpZihudWxsPT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5wcm90b3R5cGUuc29tZSBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWRcIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yO2Zvcih2YXIgdD1PYmplY3QodGhpcyksbj10Lmxlbmd0aD4+PjAsbz0yPD1hcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDAscj0wO3I8bjtyKyspaWYociBpbiB0JiZlLmNhbGwobyx0W3JdLHIsdCkpcmV0dXJuITA7cmV0dXJuITF9KSk7dmFyIHRlPXtvdmVyZmxvdzpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxuZT17aGVpZ2h0OlwiMTAwJVwiLGRpc3BsYXk6XCJ0YWJsZS1jZWxsXCIsXCJ2ZXJ0aWNhbC1hbGlnblwiOlwidG9wXCJ9LG9lPShmKCQ9e30sXCIuXCIuY29uY2F0KHcpLHtwb3NpdGlvbjpcInJlbGF0aXZlXCIsXCJtaW4taGVpZ2h0XCI6XCIzMHB4XCIsXCJtaW4td2lkdGhcIjpcIjMwcHhcIn0pLGYoJCxcIi5cIi5jb25jYXQodyxcIi5ob3Jpem9udGFsXCIpLHtkaXNwbGF5OlwidGFibGVcIn0pLGYoJCxcIi5cIi5jb25jYXQodyxcIi5ob3Jpem9udGFsID4gLlwiKS5jb25jYXQodikse2Rpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIn0pLGYoJCxcIi5cIi5jb25jYXQodyxcIi5ob3Jpem9udGFsID4gLlwiKS5jb25jYXQoYiksbmUpLGYoJCxcIi5cIi5jb25jYXQodyxcIi52ZXJ0aWNhbCA+IC5cIikuY29uY2F0KGIpLHRlKSxmKCQsXCIuXCIuY29uY2F0KGIpLHtcImJveC1zaXppbmdcIjpcImJvcmRlci1ib3hcIn0pLGYoJCxcIi5cIi5jb25jYXQoYixcIi5ob3Jpem9udGFsXCIpLG5lKSxmKCQsXCIuXCIuY29uY2F0KGIsXCIudmVydGljYWxcIiksdGUpLGYoJCxcIi5cIi5jb25jYXQoYixcIi5hbmltYXRlZFwiKSx7dHJhbnNpdGlvbjpcInRyYW5zZm9ybSBlYXNlXCJ9KSxmKCQsXCIuXCIuY29uY2F0KEMpLHtcImJveC1zaXppbmdcIjpcImJvcmRlci1ib3hcIn0pLGYoJCxcIi5cIi5jb25jYXQoQyxcIi5hbmltYXRlZFwiKSx7dHJhbnNpdGlvbjpcImFsbCBlYXNlLWluLW91dFwifSksZigkLFwiLlwiLmNvbmNhdChDLFwiICpcIikse1wicG9pbnRlci1ldmVudHNcIjpcIm5vbmVcIn0pLGYoJCxcIi5cIi5jb25jYXQocyxcIiAqXCIpLHtcInRvdWNoLWFjdGlvbnNcIjpcIm5vbmVcIixcIi1tcy10b3VjaC1hY3Rpb25zXCI6XCJub25lXCJ9KSxmKCQsXCIuXCIuY29uY2F0KGMpLHtcIi13ZWJraXQtdG91Y2gtY2FsbG91dFwiOlwibm9uZVwiLFwiLXdlYmtpdC11c2VyLXNlbGVjdFwiOlwibm9uZVwiLFwiLWtodG1sLXVzZXItc2VsZWN0XCI6XCJub25lXCIsXCItbW96LXVzZXItc2VsZWN0XCI6XCJub25lXCIsXCItbXMtdXNlci1zZWxlY3RcIjpcIm5vbmVcIixcInVzZXItc2VsZWN0XCI6XCJub25lXCJ9KSxmKCQsXCIuXCIuY29uY2F0KHgpLHtmbGV4OlwiMVwifSksZigkLFwiLlwiLmNvbmNhdCh3LFwiLmhvcml6b250YWwgPiAuXCIpLmNvbmNhdChFKSx7aGVpZ2h0OlwiMTAwJVwiLG92ZXJmbG93OlwiaGlkZGVuXCIsZGlzcGxheTpcInRhYmxlLWNlbGxcIixcInZlcnRpY2FsLWFsaWduXCI6XCJ0b3BcIn0pLGYoJCxcIi5cIi5jb25jYXQodyxcIi52ZXJ0aWNhbCA+IC5cIikuY29uY2F0KEUpLHtvdmVyZmxvdzpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wiLHdpZHRoOlwiMTAwJVwifSksZigkLFwiLlwiLmNvbmNhdChEKSx7d2lkdGg6XCIxMDAlXCIsaGVpZ2h0OlwiMTAwJVwiLGRpc3BsYXk6XCJmbGV4XCIsXCJqdXN0aWZ5LWNvbnRlbnRcIjpcInN0cmV0Y2hcIixcImFsaWduLWl0ZW1zXCI6XCJzdHJldGNoXCJ9KSxmKCQsXCIuXCIuY29uY2F0KHkpLHtcImJhY2tncm91bmQtY29sb3JcIjpcInJnYmEoMTUwLCAxNTAsIDE1MCwgMC4xKVwiLGJvcmRlcjpcIjFweCBzb2xpZCAjY2NjXCJ9KSwkKTtmdW5jdGlvbiByZShvKXtyZXR1cm4gT2JqZWN0LmtleXMobykucmVkdWNlKGZ1bmN0aW9uKGUsdCl7dmFyIG49b1t0XTtyZXR1cm5cIm9iamVjdFwiPT09YShuKT9cIlwiLmNvbmNhdChlKS5jb25jYXQodCxcIntcIikuY29uY2F0KHJlKG4pLFwifVwiKTpcIlwiLmNvbmNhdChlKS5jb25jYXQodCxcIjpcIikuY29uY2F0KG4sXCI7XCIpfSxcIlwiKX1mdW5jdGlvbiBpZShlKXtpZihlJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXt2YXIgdD13aW5kb3cuZG9jdW1lbnQuaGVhZHx8d2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXSxuPXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbz1yZSh7XCJib2R5ICpcIjp7Y3Vyc29yOlwiXCIuY29uY2F0KGUsXCIgIWltcG9ydGFudFwiKX19KTtyZXR1cm4gbi50eXBlPVwidGV4dC9jc3NcIixuLnN0eWxlU2hlZXQ/bi5zdHlsZVNoZWV0LmNzc1RleHQ9bzpuLmFwcGVuZENoaWxkKHdpbmRvdy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSksdC5hcHBlbmRDaGlsZChuKSxufXJldHVybiBudWxsfXZhciBhZSxsZSxzZT1bXCJtb3VzZWRvd25cIixcInRvdWNoc3RhcnRcIl0sY2U9W1wibW91c2Vtb3ZlXCIsXCJ0b3VjaG1vdmVcIl0sdWU9W1wibW91c2V1cFwiLFwidG91Y2hlbmRcIl0sZGU9bnVsbCxmZT1udWxsLGdlPW51bGwsbWU9bnVsbCxwZT1bXSx2ZT0hMSxoZT0hMSx5ZT0hMSxiZT0hMSx3ZT1udWxsLHhlPW51bGwsRWU9bnVsbCxDZT1udWxsLERlPShhZT1udWxsLGxlPSExLHtzdGFydDpmdW5jdGlvbigpe2xlfHwobGU9ITAsZnVuY3Rpb24gZSgpe2FlPXJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe2RlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUubGF5b3V0LmludmFsaWRhdGVSZWN0cygpfSksc2V0VGltZW91dChmdW5jdGlvbigpe251bGwhPT1hZSYmZSgpfSw1MCl9KX0oKSl9LHN0b3A6ZnVuY3Rpb24oKXtudWxsIT09YWUmJihjYW5jZWxBbmltYXRpb25GcmFtZShhZSksYWU9bnVsbCksbGU9ITF9fSksU2U9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmISEod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSl8fHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC93ZWJPUy9pKXx8d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKXx8d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQYWQvaSl8fHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUG9kL2kpfHx3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKXx8d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1dpbmRvd3MgUGhvbmUvaSkpO2Z1bmN0aW9uIE9lKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmc2UuZm9yRWFjaChmdW5jdGlvbihlKXt3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlLEllLHtwYXNzaXZlOiExfSl9KX1mdW5jdGlvbiBSZSgpe3JldHVybiBtZSYmbWUuZ2hvc3RQYXJlbnQ/bWUuZ2hvc3RQYXJlbnQ6ZmUmJmZlLnBhcmVudEVsZW1lbnR8fHdpbmRvdy5kb2N1bWVudC5ib2R5fXZhciBBZT1mdW5jdGlvbigpe3ZhciByLGksbyxhPW51bGwsbD0xLHM9NTtmdW5jdGlvbiBjKGUpe3ZhciB0PV9lKGUpLG49dC5jbGllbnRYLG89dC5jbGllbnRZO2lmKGkpKE1hdGguYWJzKHIuY2xpZW50WC1uKT5zfHxNYXRoLmFicyhyLmNsaWVudFktbyk+cykmJmYoKTtlbHNlIGlmKE1hdGguYWJzKHIuY2xpZW50WC1uKT5sfHxNYXRoLmFicyhyLmNsaWVudFktbyk+bClyZXR1cm4gZygpfWZ1bmN0aW9uIHUoKXtmKCl9ZnVuY3Rpb24gZCgpe2YoKX1mdW5jdGlvbiBmKCl7Y2xlYXJUaW1lb3V0KGEpLGNlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGUsYyl9LHtwYXNzaXZlOiExfSksdWUuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx1KX0se3Bhc3NpdmU6ITF9KSx3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRyYWdcIixkLHtwYXNzaXZlOiExfSl9ZnVuY3Rpb24gZygpe2NsZWFyVGltZW91dChhKSxmKCksbygpfXJldHVybiBmdW5jdGlvbihlLHQsbil7cj1fZShlKSxvPW4sKGk9XCJudW1iZXJcIj09dHlwZW9mIHQ/dDpTZT8yMDA6MCkmJihhPXNldFRpbWVvdXQoZyxpKSksY2UuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZSxjKX0se3Bhc3NpdmU6ITF9KSx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlLHUpfSx7cGFzc2l2ZTohMX0pLHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ1wiLGQse3Bhc3NpdmU6ITF9KX19KCk7ZnVuY3Rpb24gSWUoZSl7dmFyIHQ9X2UoZSk7aWYoIXZlJiYodm9pZCAwPT09dC5idXR0b258fDA9PT10LmJ1dHRvbikmJihmZT1OKHQudGFyZ2V0LFwiLlwiK2IpKSl7dmFyIG49TihmZSxcIi5cIit3KSxvPXBlLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5lbGVtZW50PT09bn0pWzBdLHI9by5nZXRPcHRpb25zKCkuZHJhZ0hhbmRsZVNlbGVjdG9yLGk9by5nZXRPcHRpb25zKCkubm9uRHJhZ0FyZWFTZWxlY3RvcixhPSEwO2lmKHImJiFOKHQudGFyZ2V0LHIpJiYoYT0hMSksaSYmTih0LnRhcmdldCxpKSYmKGE9ITEpLGEpe00od2luZG93LmRvY3VtZW50LmJvZHkscyksTSh3aW5kb3cuZG9jdW1lbnQuYm9keSxjKTt3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixmdW5jdGlvbiBlKCl7aih3aW5kb3cuZG9jdW1lbnQuYm9keSxzKSxqKHdpbmRvdy5kb2N1bWVudC5ib2R5LGMpLHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLGUpfSl9YSYmQWUodCxvLmdldE9wdGlvbnMoKS5kcmFnQmVnaW5EZWxheSxmdW5jdGlvbigpe1YoKSxZZSh0LFgoZS50YXJnZXQpKSxjZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3dpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGUsQmUse3Bhc3NpdmU6ITF9KX0pLHVlLmZvckVhY2goZnVuY3Rpb24oZSl7d2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZSxqZSx7cGFzc2l2ZTohMX0pfSl9KX19ZnVuY3Rpb24gQmUoZSl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PV9lKGUpO2lmKG1lKXt2YXIgbj1tZS5jb250YWluZXIuZ2V0T3B0aW9ucygpO1wiY29udGFpblwiPT09bi5iZWhhdmlvdXI/ZnVuY3Rpb24oZSl7dmFyIHQsbixvLHIsaT1lLmNsaWVudFgsYT1lLmNsaWVudFksbD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJ2ZXJ0aWNhbFwiLHM9bWUuY29udGFpbmVyLmxheW91dC5nZXRCZWdpbkVuZE9mQ29udGFpbmVyVmlzaWJsZVJlY3QoKTtyPVwidmVydGljYWxcIj09PWw/KHQ9YSxuPVwieVwiLG89XCJ0b3BcIixtZS5zaXplLm9mZnNldEhlaWdodCk6KHQ9aSxuPVwieFwiLG89XCJsZWZ0XCIsbWUuc2l6ZS5vZmZzZXRXaWR0aCk7dmFyIGM9cy5iZWdpbix1PXMuZW5kLXIsZD1NYXRoLm1heChjLE1hdGgubWluKHUsdCtnZS5wb3NpdGlvbkRlbHRhW29dKSk7Z2UudG9wTGVmdFtuXT1kLG1lLnBvc2l0aW9uW25dPU1hdGgubWF4KHMuYmVnaW4sTWF0aC5taW4ocy5lbmQsdCtnZS5jZW50ZXJEZWx0YVtuXSkpLG1lLm1vdXNlUG9zaXRpb25bbl09TWF0aC5tYXgocy5iZWdpbixNYXRoLm1pbihzLmVuZCx0KSksbWUucG9zaXRpb25bbl08cy5iZWdpbityLzImJihtZS5wb3NpdGlvbltuXT1zLmJlZ2luKzIpLG1lLnBvc2l0aW9uW25dPnMuZW5kLXIvMiYmKG1lLnBvc2l0aW9uW25dPXMuZW5kLTIpfSh0LG4ub3JpZW50YXRpb24pOkVlP1wieVwiPT09RWU/KGdlLnRvcExlZnQueT10LmNsaWVudFkrZ2UucG9zaXRpb25EZWx0YS50b3AsbWUucG9zaXRpb24ueT10LmNsaWVudFkrZ2UuY2VudGVyRGVsdGEueSxtZS5tb3VzZVBvc2l0aW9uLnk9dC5jbGllbnRZKTpcInhcIj09PUVlJiYoZ2UudG9wTGVmdC54PXQuY2xpZW50WCtnZS5wb3NpdGlvbkRlbHRhLmxlZnQsbWUucG9zaXRpb24ueD10LmNsaWVudFgrZ2UuY2VudGVyRGVsdGEueCxtZS5tb3VzZVBvc2l0aW9uLng9dC5jbGllbnRYKTooZ2UudG9wTGVmdC54PXQuY2xpZW50WCtnZS5wb3NpdGlvbkRlbHRhLmxlZnQsZ2UudG9wTGVmdC55PXQuY2xpZW50WStnZS5wb3NpdGlvbkRlbHRhLnRvcCxtZS5wb3NpdGlvbi54PXQuY2xpZW50WCtnZS5jZW50ZXJEZWx0YS54LG1lLnBvc2l0aW9uLnk9dC5jbGllbnRZK2dlLmNlbnRlckRlbHRhLnksbWUubW91c2VQb3NpdGlvbi54PXQuY2xpZW50WCxtZS5tb3VzZVBvc2l0aW9uLnk9dC5jbGllbnRZKSxHZSgpLChiZT0hd2UobWUpKSYmTGUoKX1lbHNlIFllKHQsWChlLnRhcmdldCkpfXZhciBQZSxUZSx6ZSxOZSxMZT0oUGU9TWUsemU9IShUZT0yMCksTmU9bnVsbCxmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO05lJiZjbGVhclRpbWVvdXQoTmUpLHplJiYhTmU/UGUuY2FsbC5hcHBseShQZSxbbnVsbF0uY29uY2F0KHQpKTpOZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7TmU9bnVsbCxQZS5jYWxsLmFwcGx5KFBlLFtudWxsXS5jb25jYXQodCkpfSxUZSl9KTtmdW5jdGlvbiBNZSgpe2JlJiYoYmU9ITEsRmUobWUsZGUpKX1mdW5jdGlvbiBqZSgpe3ZhciBlO2NlLmZvckVhY2goZnVuY3Rpb24oZSl7d2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxCZSx7cGFzc2l2ZTohMX0pfSksdWUuZm9yRWFjaChmdW5jdGlvbihlKXt3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLGplLHtwYXNzaXZlOiExfSl9KSx4ZSh7cmVzZXQ6ITB9KSxDZSYmKChlPUNlKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvdy5kb2N1bWVudC5oZWFkfHx3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdKS5yZW1vdmVDaGlsZChlKSxDZT1udWxsKSxtZSYmKERlLnN0b3AoKSxNZSgpLHllPSEwLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGkoKXtqKGdlLmdob3N0LFwiYW5pbWF0ZWRcIiksZ2UuZ2hvc3Quc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uPW51bGwsUmUoKS5yZW1vdmVDaGlsZChnZS5naG9zdCksZSgpfWZ1bmN0aW9uIHQoZSx0LG4pe3ZhciBvPWUudG9wLHI9ZS5sZWZ0O00oZ2UuZ2hvc3QsXCJhbmltYXRlZFwiKSxuJiZNKGdlLmdob3N0LmZpcnN0RWxlbWVudENoaWxkLG4pLGdlLnRvcExlZnQueD1yLGdlLnRvcExlZnQueT1vLEdlKHQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpKCl9LHQrMjApfWZ1bmN0aW9uIG4oZSx0KXtNKGdlLmdob3N0LFwiYW5pbWF0ZWRcIiksR2UoZSwuOSwhMCksc2V0VGltZW91dChmdW5jdGlvbigpe3QoKX0sZSsyMCl9aWYobWUudGFyZ2V0RWxlbWVudCl7dmFyIG89cGUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVsZW1lbnQ9PT1tZS50YXJnZXRFbGVtZW50fSlbMF07IShwPW8uZ2V0T3B0aW9ucygpKS5zaG91bGRBbmltYXRlRHJvcHx8cC5zaG91bGRBbmltYXRlRHJvcChtZS5jb250YWluZXIuZ2V0T3B0aW9ucygpLG1lLnBheWxvYWQpP3Qoby5nZXREcmFnUmVzdWx0KCkuc2hhZG93QmVnaW5FbmQucmVjdCxNYXRoLm1heCgxNTAsby5nZXRPcHRpb25zKCkuYW5pbWF0aW9uRHVyYXRpb24vMiksby5nZXRPcHRpb25zKCkuZHJvcENsYXNzKTppKCl9ZWxzZXt2YXIgcj1wZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1tZS5jb250YWluZXJ9KVswXTtpZihyKXt2YXIgYT1yLmdldE9wdGlvbnMoKSxsPWEuYmVoYXZpb3VyLHM9YS5yZW1vdmVPbkRyb3BPdXQ7aWYoXCJtb3ZlXCIhPT1sJiZcImNvbnRhaW5cIiE9PWx8fCFoZSYmc3x8IXIuZ2V0RHJhZ1Jlc3VsdCgpKW4oci5nZXRPcHRpb25zKCkuYW5pbWF0aW9uRHVyYXRpb24saSk7ZWxzZXt2YXIgYz1yLmxheW91dC5nZXRDb250YWluZXJSZWN0YW5nbGVzKCk7aWYoIUgoYy52aXNpYmxlUmVjdCkmJkgoYy5sYXN0VmlzaWJsZVJlY3QpKXQoe3RvcDpjLmxhc3RWaXNpYmxlUmVjdC50b3AsbGVmdDpjLmxhc3RWaXNpYmxlUmVjdC5sZWZ0fSxyLmdldE9wdGlvbnMoKS5hbmltYXRpb25EdXJhdGlvbixyLmdldE9wdGlvbnMoKS5kcm9wQ2xhc3MpO2Vsc2V7dmFyIHU9ci5nZXREcmFnUmVzdWx0KCksZD11LnJlbW92ZWRJbmRleCxmPXUuZWxlbWVudFNpemUsZz1yLmxheW91dDtyLmdldFRyYW5zbGF0ZUNhbGN1bGF0b3Ioe2RyYWdSZXN1bHQ6e3JlbW92ZWRJbmRleDpkLGFkZGVkSW5kZXg6ZCxlbGVtZW50U2l6ZTpmLHBvczp2b2lkIDAsc2hhZG93QmVnaW5FbmQ6dm9pZCAwfX0pO3ZhciBtPTA8ZD9nLmdldEJlZ2luRW5kKHIuZHJhZ2dhYmxlc1tkLTFdKS5lbmQ6Zy5nZXRCZWdpbkVuZE9mQ29udGFpbmVyKCkuYmVnaW47dChnLmdldFRvcExlZnRPZkVsZW1lbnRCZWdpbihtKSxyLmdldE9wdGlvbnMoKS5hbmltYXRpb25EdXJhdGlvbixyLmdldE9wdGlvbnMoKS5kcm9wQ2xhc3MpfX19ZWxzZSBuKFMuYW5pbWF0aW9uRHVyYXRpb24saSl9dmFyIHB9KGZ1bmN0aW9uKCl7SGUodmU9ITEpO2Zvcih2YXIgZT1kZXx8W10sdD1lLnNoaWZ0KCk7dm9pZCAwIT09dDspdC5oYW5kbGVEcm9wKG1lKSx0PWUuc2hpZnQoKTt3ZT1FZT1tZT1nZT1mZT1kZT1udWxsLHllPSExfSkpfWZ1bmN0aW9uIF9lKGUpe3JldHVybiBlLnRvdWNoZXM/ZS50b3VjaGVzWzBdOmV9ZnVuY3Rpb24gRmUobixlKXt2YXIgbz0hMTtlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5oYW5kbGVEcmFnKG4pO289ISF0LmNvbnRhaW5lckJveENoYW5nZWR8fCExLHQuY29udGFpbmVyQm94Q2hhbmdlZD0hMX0pLG8mJihvPSExLHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe3BlLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5sYXlvdXQuaW52YWxpZGF0ZVJlY3RzKCksZS5vblRyYW5zbGF0ZWQoKX0pfSkpfWZ1bmN0aW9uIFZlKGUpe3ZhciB0PWUsbj1udWxsO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4hKG51bGwhPT1ufHwhdmV8fHllKSYmKG49cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7dmUmJiF5ZSYmKEZlKGUsdCkseGUoe2RyYWdnYWJsZUluZm86ZX0pKSxuPW51bGx9KSwhMCl9fWZ1bmN0aW9uIFhlKGUsdCl7cmV0dXJuIGUuZ2V0T3B0aW9ucygpLmF1dG9TY3JvbGxFbmFibGVkP2VlKHQsZS5nZXRTY3JvbGxNYXhTcGVlZCgpKTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbH19ZnVuY3Rpb24gSGUobyl7cGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1vP2UuZ2V0T3B0aW9ucygpLm9uRHJhZ1N0YXJ0OmUuZ2V0T3B0aW9ucygpLm9uRHJhZ0VuZDtpZih0KXt2YXIgbj17aXNTb3VyY2U6ZT09PW1lLmNvbnRhaW5lcixwYXlsb2FkOm1lLnBheWxvYWR9O2UuaXNEcmFnUmVsZXZhbnQobWUuY29udGFpbmVyLG1lLnBheWxvYWQpP24ud2lsbEFjY2VwdERyb3A9ITA6bi53aWxsQWNjZXB0RHJvcD0hMSx0KG4pfX0pfWZ1bmN0aW9uIFllKGUsdCl7aWYobnVsbCE9PWZlKXt2ZT0hMDt2YXIgbj1wZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGZlLnBhcmVudEVsZW1lbnQ9PT1lLmVsZW1lbnR9KVswXTtuLnNldERyYWdnYWJsZXMoKSxFZT1uLmdldE9wdGlvbnMoKS5sb2NrQXhpcz9uLmdldE9wdGlvbnMoKS5sb2NrQXhpcy50b0xvd2VyQ2FzZSgpOm51bGwseT1mZSxiPXBlLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4geS5wYXJlbnRFbGVtZW50PT09ZS5lbGVtZW50fSlbMF0sdz1iLmRyYWdnYWJsZXMuaW5kZXhPZih5KSx4PWIuZ2V0T3B0aW9ucygpLmdldEdob3N0UGFyZW50LEU9eS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxtZT17Y29udGFpbmVyOmIsZWxlbWVudDp5LHNpemU6e29mZnNldEhlaWdodDpFLmJvdHRvbS1FLnRvcCxvZmZzZXRXaWR0aDpFLnJpZ2h0LUUubGVmdH0sZWxlbWVudEluZGV4OncscGF5bG9hZDpiLmdldE9wdGlvbnMoKS5nZXRDaGlsZFBheWxvYWQ/Yi5nZXRPcHRpb25zKCkuZ2V0Q2hpbGRQYXlsb2FkKHcpOnZvaWQgMCx0YXJnZXRFbGVtZW50Om51bGwscG9zaXRpb246e3g6MCx5OjB9LGdyb3VwTmFtZTpiLmdldE9wdGlvbnMoKS5ncm91cE5hbWUsZ2hvc3RQYXJlbnQ6eD94KCk6bnVsbCxpbnZhbGlkYXRlU2hhZG93Om51bGwsbW91c2VQb3NpdGlvbjpudWxsLHJlbGV2YW50Q29udGFpbmVyczpudWxsfSxvPWZlLHI9e3g6ZS5jbGllbnRYLHk6ZS5jbGllbnRZfSxpPW1lLmNvbnRhaW5lcixhPXQsbD1yLngscz1yLnksYz1vLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHU9Yy5sZWZ0LGQ9Yy50b3AsZj1jLnJpZ2h0LGc9Yy5ib3R0b20sbT1PKGkubGF5b3V0LmdldENvbnRhaW5lclJlY3RhbmdsZXMoKS52aXNpYmxlUmVjdCxjKSxwPW0ubGVmdCsobS5yaWdodC1tLmxlZnQpLzIsdj1tLnRvcCsobS5ib3R0b20tbS50b3ApLzIsKGg9by5jbG9uZU5vZGUoITApKS5zdHlsZS56SW5kZXg9XCIxMDAwXCIsaC5zdHlsZS5ib3hTaXppbmc9XCJib3JkZXItYm94XCIsaC5zdHlsZS5wb3NpdGlvbj1cImZpeGVkXCIsaC5zdHlsZS50b3A9XCIwcHhcIixoLnN0eWxlLmxlZnQ9XCIwcHhcIixoLnN0eWxlLnRyYW5zZm9ybT1udWxsLGguc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2Zvcm1cIiksaS5zaG91bGRVc2VUcmFuc2Zvcm1Gb3JHaG9zdCgpP2guc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlM2QoXCIuY29uY2F0KHUsXCJweCwgXCIpLmNvbmNhdChkLFwicHgsIDApXCIpOihoLnN0eWxlLnRvcD1cIlwiLmNvbmNhdChkLFwicHhcIiksaC5zdHlsZS5sZWZ0PVwiXCIuY29uY2F0KHUsXCJweFwiKSksaC5zdHlsZS53aWR0aD1mLXUrXCJweFwiLGguc3R5bGUuaGVpZ2h0PWctZCtcInB4XCIsaC5zdHlsZS5vdmVyZmxvdz1cInZpc2libGVcIixoLnN0eWxlLnRyYW5zaXRpb249bnVsbCxoLnN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNpdGlvblwiKSxoLnN0eWxlLnBvaW50ZXJFdmVudHM9XCJub25lXCIsaC5zdHlsZS51c2VyU2VsZWN0PVwibm9uZVwiLGkuZ2V0T3B0aW9ucygpLmRyYWdDbGFzcz9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7TShoLmZpcnN0RWxlbWVudENoaWxkLGkuZ2V0T3B0aW9ucygpLmRyYWdDbGFzcyk7dmFyIGU9d2luZG93LmdldENvbXB1dGVkU3R5bGUoaC5maXJzdEVsZW1lbnRDaGlsZCkuY3Vyc29yO0NlPWllKGUpfSk6Q2U9aWUoYSksTShoLGkuZ2V0T3B0aW9ucygpLm9yaWVudGF0aW9ufHxcInZlcnRpY2FsXCIpLE0oaCxDKSxnZT17Z2hvc3Q6aCxjZW50ZXJEZWx0YTp7eDpwLWwseTp2LXN9LHBvc2l0aW9uRGVsdGE6e2xlZnQ6dS1sLHRvcDpkLXN9LHRvcExlZnQ6e3g6dSx5OmR9fSxtZS5wb3NpdGlvbj17eDplLmNsaWVudFgrZ2UuY2VudGVyRGVsdGEueCx5OmUuY2xpZW50WStnZS5jZW50ZXJEZWx0YS55fSxtZS5tb3VzZVBvc2l0aW9uPXt4OmUuY2xpZW50WCx5OmUuY2xpZW50WX0sZGU9cGUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlzRHJhZ1JlbGV2YW50KG4sbWUucGF5bG9hZCl9KSxtZS5yZWxldmFudENvbnRhaW5lcnM9ZGUsd2U9VmUoZGUpLHhlJiZ4ZSh7cmVzZXQ6ITAsZHJhZ2dhYmxlSW5mbzp2b2lkIDB9KSx4ZT1YZShuLGRlKSxkZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnByZXBhcmVEcmFnKGUsZGUpfSksSGUoITApLHdlKG1lKSxSZSgpLmFwcGVuZENoaWxkKGdlLmdob3N0KSxEZS5zdGFydCgpfXZhciBvLHIsaSxhLGwscyxjLHUsZCxmLGcsbSxwLHYsaCx5LGIsdyx4LEV9dmFyIGtlPW51bGw7ZnVuY3Rpb24gR2UoKXt2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MCx0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToxLG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxvPWdlLHI9by5naG9zdCxpPW8udG9wTGVmdCxhPWkueCxsPWkueSxzPSFtZS5jb250YWluZXJ8fG1lLmNvbnRhaW5lci5zaG91bGRVc2VUcmFuc2Zvcm1Gb3JHaG9zdCgpLGM9cz9cInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChhLFwicHgsXCIpLmNvbmNhdChsLFwicHgsIDApXCIpOm51bGw7aWYoMSE9PXQmJihjPWM/XCJcIi5jb25jYXQoYyxcIiBzY2FsZShcIikuY29uY2F0KHQsXCIpXCIpOlwic2NhbGUoXCIuY29uY2F0KHQsXCIpXCIpKSwwPGUpcmV0dXJuIGdlLmdob3N0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbj1lK1wibXNcIix2b2lkIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe2MmJihyLnN0eWxlLnRyYW5zZm9ybT1jKSxzfHwoci5zdHlsZS5sZWZ0PWErXCJweFwiLHIuc3R5bGUudG9wPWwrXCJweFwiKSxrZT1udWxsLG4mJihyLnN0eWxlLm9wYWNpdHk9XCIwXCIpfSk7bnVsbD09PWtlJiYoa2U9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7YyYmKHIuc3R5bGUudHJhbnNmb3JtPWMpLHN8fChyLnN0eWxlLmxlZnQ9YStcInB4XCIsci5zdHlsZS50b3A9bCtcInB4XCIpLGtlPW51bGwsbiYmKHIuc3R5bGUub3BhY2l0eT1cIjBcIil9KSl9ZnVuY3Rpb24gV2UoKXtpZih2ZSYmIWhlJiYheWUpe2JlPSEoaGU9ITApO3ZhciB0PU9iamVjdC5hc3NpZ24oe30sbWUse3RhcmdldEVsZW1lbnQ6bnVsbCxwb3NpdGlvbjp7eDpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUix5Ok51bWJlci5NQVhfU0FGRV9JTlRFR0VSfSxtb3VzZVBvc2l0aW9uOnt4Ok51bWJlci5NQVhfU0FGRV9JTlRFR0VSLHk6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJ9fSk7ZGUuZm9yRWFjaChmdW5jdGlvbihlKXtlLmhhbmRsZURyYWcodCl9KSxtZS50YXJnZXRFbGVtZW50PW51bGwsbWUuY2FuY2VsRHJvcD0hMCxqZSgpLGhlPSExfX1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe3ZhciBlPXdpbmRvdy5kb2N1bWVudC5oZWFkfHx3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLHQ9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTt0LmlkPVwic21vb3RoLWRuZC1zdHlsZS1kZWZpbml0aW9uc1wiO3ZhciBuPXJlKG9lKTt0LnR5cGU9XCJ0ZXh0L2Nzc1wiLHQuc3R5bGVTaGVldD90LnN0eWxlU2hlZXQuY3NzVGV4dD1uOnQuYXBwZW5kQ2hpbGQod2luZG93LmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKSxlLmFwcGVuZENoaWxkKHQpfX0oKTt2YXIgcWU9KE9lKCkse3JlZ2lzdGVyOmZ1bmN0aW9uKGUpe3ZhciB0O3Q9ZSxwZS5wdXNoKHQpLHZlJiZtZSYmdC5pc0RyYWdSZWxldmFudChtZS5jb250YWluZXIsbWUucGF5bG9hZCkmJihkZS5wdXNoKHQpLHQucHJlcGFyZURyYWcodCxkZSkseGUmJnhlKHtyZXNldDohMCxkcmFnZ2FibGVJbmZvOnZvaWQgMH0pLHhlPVhlKHQsZGUpLHdlPVZlKGRlKSx0LmhhbmRsZURyYWcobWUpKX0sdW5yZWdpc3RlcjpmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7aWYocGUuc3BsaWNlKHBlLmluZGV4T2YoZSksMSksdmUmJm1lKXttZS5jb250YWluZXI9PT1lJiZlLmZpcmVSZW1vdmVFbGVtZW50KCksbWUudGFyZ2V0RWxlbWVudD09PWUuZWxlbWVudCYmKG1lLnRhcmdldEVsZW1lbnQ9bnVsbCk7dmFyIHQ9ZGUuaW5kZXhPZihlKTstMTx0JiYoZGUuc3BsaWNlKHQsMSkseGUmJnhlKHtyZXNldDohMCxkcmFnZ2FibGVJbmZvOnZvaWQgMH0pLHhlPVhlKGUsZGUpLHdlPVZlKGRlKSl9fShlKX0saXNEcmFnZ2luZzpmdW5jdGlvbigpe3JldHVybiB2ZX0sY2FuY2VsRHJhZzpXZX0pO2Z1bmN0aW9uIFVlKGUsdCl7dmFyIG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlMuYW5pbWF0aW9uRHVyYXRpb247dD8oTShlLG8pLGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uPW4rXCJtc1wiKTooaihlLG8pLGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIpKX1mdW5jdGlvbiBKZShuKXt2YXIgbz1bXTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChuLmNoaWxkcmVuLGZ1bmN0aW9uKGUpe2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSl7dmFyIHQ9ZTtMKGUsYil8fCh0PWZ1bmN0aW9uKGUpe2lmKHl0LndyYXBDaGlsZCl7dmFyIHQ9d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIHQuY2xhc3NOYW1lPVwiXCIuY29uY2F0KGIpLGUucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUodCxlKSx0LmFwcGVuZENoaWxkKGUpLHR9cmV0dXJuIGV9KGUpKSx0W3BdPTAsby5wdXNoKHQpfWVsc2Ugbi5yZW1vdmVDaGlsZChlKX0pLG99ZnVuY3Rpb24gS2UoZSl7dmFyIGc9ZS5sYXlvdXQ7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtyZXR1cm4gZnVuY3Rpb24gZSh0LG4sbyxyKXt2YXIgaT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSYmYXJndW1lbnRzWzRdO2lmKHI8bylyZXR1cm4gbztpZihvPT09cil7dmFyIGE9Zy5nZXRCZWdpbkVuZCh0W29dKSxsPWEuYmVnaW4scz1hLmVuZDtyZXR1cm4gaT9uPChzK2wpLzI/bzpvKzE6b312YXIgYz1NYXRoLmZsb29yKChyK28pLzIpLHU9Zy5nZXRCZWdpbkVuZCh0W2NdKSxkPXUuYmVnaW4sZj11LmVuZDtyZXR1cm4gbjxkP2UodCxuLG8sYy0xLGkpOmY8bj9lKHQsbixjKzEscixpKTppP248KGYrZCkvMj9jOmMrMTpjfShlLHQsMCxlLmxlbmd0aC0xLG4pfX1mdW5jdGlvbiBRZShlKXt2YXIgdCxuLG8scixpPWUuZWxlbWVudCxhPWUuZHJhZ2dhYmxlcyxsPWUubGF5b3V0LHM9ZS5nZXRPcHRpb25zLGM9KG49KHQ9e2VsZW1lbnQ6aSxkcmFnZ2FibGVzOmEsbGF5b3V0OmwsZ2V0T3B0aW9uczpzfSkuZWxlbWVudCxvPXQuZHJhZ2dhYmxlcyxyPXQubGF5b3V0LGZ1bmN0aW9uKCl7by5mb3JFYWNoKGZ1bmN0aW9uKGUpe1VlKGUsITEpLHIuc2V0VHJhbnNsYXRpb24oZSwwKSxyLnNldFZpc2liaWxpdHkoZSwhMCl9KSxuW2hdJiYobltoXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5baF0pLG5baF09bnVsbCl9KSx1PSh5dC5kcm9wSGFuZGxlcnx8WSkoe2VsZW1lbnQ6aSxkcmFnZ2FibGVzOmEsbGF5b3V0OmwsZ2V0T3B0aW9uczpzfSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49dC5hZGRlZEluZGV4LG89dC5yZW1vdmVkSW5kZXgscj0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO2lmKGMoKSwhZS5jYW5jZWxEcm9wJiYoZS50YXJnZXRFbGVtZW50fHxzKCkucmVtb3ZlT25Ecm9wT3V0fHxyKSl7dmFyIGk9e3JlbW92ZWRJbmRleDpvLGFkZGVkSW5kZXg6bnVsbCE9PW4/bnVsbCE9PW8mJm88bj9uLTE6bjpudWxsLHBheWxvYWQ6ZS5wYXlsb2FkfTt1KGkscygpLm9uRHJvcCl9fX1mdW5jdGlvbiBaZShlKXt2YXIgbz1lLmVsZW1lbnQscj1lLmdldE9wdGlvbnMsaT1udWxsO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdnYWJsZUluZm8sbj1pO3JldHVybiBudWxsPT1pJiZ0LmNvbnRhaW5lci5lbGVtZW50PT09byYmXCJjb3B5XCIhPT1yKCkuYmVoYXZpb3VyJiYobj1pPXQuZWxlbWVudEluZGV4KSx7cmVtb3ZlZEluZGV4Om59fX1mdW5jdGlvbiAkZShlKXt2YXIgbj1lLmRyYWdnYWJsZXMsbz1lLmxheW91dDtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kcmFnUmVzdWx0O251bGwhPT10LnJlbW92ZWRJbmRleCYmby5zZXRWaXNpYmlsaXR5KG5bdC5yZW1vdmVkSW5kZXhdLCExKX19ZnVuY3Rpb24gZXQoZSl7dmFyIHI9ZS5lbGVtZW50LGk9ZS5sYXlvdXQ7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUuZHJhZ2dhYmxlSW5mbyxuPWRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodC5wb3NpdGlvbi54LHQucG9zaXRpb24ueSk7aWYobil7dmFyIG89eihuLHQucmVsZXZhbnRDb250YWluZXJzKTtpZihvJiZvLmVsZW1lbnQ9PT1yKXJldHVybntwb3M6aS5nZXRQb3NpdGlvbih0LnBvc2l0aW9uKX19cmV0dXJue3BvczpudWxsfX19ZnVuY3Rpb24gdHQoZSl7dmFyIG49ZS5sYXlvdXQsbz1udWxsO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdnYWJsZUluZm87cmV0dXJuIG51bGw9PT1lLmRyYWdSZXN1bHQucG9zP289bnVsbDp7ZWxlbWVudFNpemU6bz1vfHxuLmdldFNpemUodC5zaXplKX19fWZ1bmN0aW9uIG50KGUpe3ZhciBvPWUuZWxlbWVudDtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kcmFnZ2FibGVJbmZvLG49ZS5kcmFnUmVzdWx0OyFmdW5jdGlvbihlLHQpe3ZhciBuPSEoMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0pfHxhcmd1bWVudHNbMl07dCYmbj9lLnRhcmdldEVsZW1lbnQ9dDplLnRhcmdldEVsZW1lbnQ9PT10JiYoZS50YXJnZXRFbGVtZW50PW51bGwpfSh0LG8sISFuLnBvcyl9fWZ1bmN0aW9uIG90KCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZS5kcmFnUmVzdWx0LnBvcz97YWRkZWRJbmRleDowfTp7YWRkZWRJbmRleDpudWxsfX19ZnVuY3Rpb24gcnQoZSl7dmFyIHI9ZS5sYXlvdXQsaT1udWxsO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdSZXN1bHQuYWRkZWRJbmRleDtpZih0PT09aSlyZXR1cm4gbnVsbDtpPXQ7dmFyIG49ci5nZXRCZWdpbkVuZE9mQ29udGFpbmVyKCksbz1uLmJlZ2luO24uZW5kO3JldHVybntzaGFkb3dCZWdpbkVuZDp7cmVjdDpyLmdldFRvcExlZnRPZkVsZW1lbnRCZWdpbihvKX19fX1mdW5jdGlvbiBpdChlKXt2YXIgZz1lLmxheW91dCxtPWUuZWxlbWVudCxwPWUuZ2V0T3B0aW9ucyx2PW51bGw7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUuZHJhZ1Jlc3VsdCxuPXQuZWxlbWVudFNpemUsbz10LnNoYWRvd0JlZ2luRW5kLHI9dC5hZGRlZEluZGV4LGk9dC5kcm9wUGxhY2Vob2xkZXJDb250YWluZXIsYT1wKCk7aWYoYS5kcm9wUGxhY2Vob2xkZXIpe3ZhciBsPVwiYm9vbGVhblwiPT10eXBlb2YgYS5kcm9wUGxhY2Vob2xkZXI/e306YS5kcm9wUGxhY2Vob2xkZXIscz1sLmFuaW1hdGlvbkR1cmF0aW9uLGM9bC5jbGFzc05hbWUsdT1sLnNob3dPblRvcDtpZihudWxsPT09cilyZXR1cm4gaSYmbnVsbCE9PXYmJm0ucmVtb3ZlQ2hpbGQoaSksdj1udWxsLHtkcm9wUGxhY2Vob2xkZXJDb250YWluZXI6dm9pZCAwfTtpZighaSl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zi5jbGFzc05hbWU9RCxkLmNsYXNzTmFtZT1cIlwiLmNvbmNhdCh4LFwiIFwiKS5jb25jYXQoY3x8eSksKGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuY2xhc3NOYW1lPVwiXCIuY29uY2F0KEUpLGkuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLHZvaWQgMCE9PXMmJihpLnN0eWxlLnRyYW5zaXRpb249XCJhbGwgXCIuY29uY2F0KHMsXCJtcyBlYXNlXCIpKSxpLmFwcGVuZENoaWxkKGYpLGYuYXBwZW5kQ2hpbGQoZCksZy5zZXRTaXplKGkuc3R5bGUsbitcInB4XCIpLGkuc3R5bGUucG9pbnRlckV2ZW50cz1cIm5vbmVcIix1P20uYXBwZW5kQ2hpbGQoaSk6bS5pbnNlcnRCZWZvcmUoaSxtLmZpcnN0RWxlbWVudENoaWxkKX1yZXR1cm4gdiE9PXImJm8uZHJvcEFyZWEmJmcuc2V0QmVnaW4oaS5zdHlsZSxvLmRyb3BBcmVhLmJlZ2luLWcuZ2V0QmVnaW5FbmRPZkNvbnRhaW5lcigpLmJlZ2luK1wicHhcIiksdj1yLHtkcm9wUGxhY2Vob2xkZXJDb250YWluZXI6aX19cmV0dXJuIG51bGx9fWZ1bmN0aW9uIGF0KGUpe3ZhciBvPWR0KGUpO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdnYWJsZUluZm8sbj1lLmRyYWdSZXN1bHQ7cmV0dXJuIHQuaW52YWxpZGF0ZVNoYWRvdz9vKHtkcmFnZ2FibGVJbmZvOnQsZHJhZ1Jlc3VsdDpufSk6bnVsbH19ZnVuY3Rpb24gbHQoZSl7dmFyIHQsaSxhLG89KGk9KHQ9ZSkuZHJhZ2dhYmxlcyxhPUtlKHtsYXlvdXQ6dC5sYXlvdXR9KSxmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdSZXN1bHQsbj10LnNoYWRvd0JlZ2luRW5kLG89dC5wb3M7aWYobilyZXR1cm4gbi5iZWdpbituLmJlZ2luQWRqdXN0bWVudDw9byYmbi5lbmQ+PW8/bnVsbDpvPG4uYmVnaW4rbi5iZWdpbkFkanVzdG1lbnQ/YShpLG8pOm8+bi5lbmQ/YShpLG8pKzE6aS5sZW5ndGg7dmFyIHI9YShpLG8sITApO3JldHVybiBudWxsIT09cj9yOmkubGVuZ3RofSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUuZHJhZ1Jlc3VsdCxuPW51bGw7cmV0dXJuIG51bGwhPT10LnBvcyYmbnVsbD09PShuPW8oe2RyYWdSZXN1bHQ6dH0pKSYmKG49dC5hZGRlZEluZGV4KSx7YWRkZWRJbmRleDpufX19ZnVuY3Rpb24gc3QoKXt2YXIgcj1udWxsO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdSZXN1bHQsbj10LmFkZGVkSW5kZXgsbz10LnNoYWRvd0JlZ2luRW5kO24hPT1yJiZudWxsIT09ciYmbyYmKG8uYmVnaW5BZGp1c3RtZW50PTApLHI9bn19ZnVuY3Rpb24gY3QoZSl7dmFyIHU9ZS5lbGVtZW50LGQ9ZS5kcmFnZ2FibGVzLGY9ZS5sYXlvdXQsZz1lLmdldE9wdGlvbnMsbT1udWxsO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdSZXN1bHQsbj10LmFkZGVkSW5kZXgsbz10LnJlbW92ZWRJbmRleCxyPXQuZWxlbWVudFNpemU7aWYobnVsbD09PW8paWYobnVsbCE9PW4pe2lmKCFtKXt2YXIgaT1mLmdldEJlZ2luRW5kT2ZDb250YWluZXIoKTtpLmVuZD1pLmJlZ2luK2YuZ2V0U2l6ZSh1KTt2YXIgYT1mLmdldFNjcm9sbFNpemUodSk+Zi5nZXRTaXplKHUpP2kuYmVnaW4rZi5nZXRTY3JvbGxTaXplKHUpLWYuZ2V0U2Nyb2xsVmFsdWUodSk6aS5lbmQsbD0wPGQubGVuZ3RoP2YuZ2V0QmVnaW5FbmQoZFtkLmxlbmd0aC0xXSkuZW5kLWRbZC5sZW5ndGgtMV1bcF06aS5iZWdpbjtpZihhPGwrcil7KG09d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLmNsYXNzTmFtZT12K1wiIFwiK2coKS5vcmllbnRhdGlvbjt2YXIgcz0wPGQubGVuZ3RoP3IrbC1hOnI7cmV0dXJuIGYuc2V0U2l6ZShtLnN0eWxlLFwiXCIuY29uY2F0KHMsXCJweFwiKSksdS5hcHBlbmRDaGlsZChtKSx1W2hdPW0se2NvbnRhaW5lckJveENoYW5nZWQ6ITB9fX19ZWxzZSBpZihtKXtmLnNldFRyYW5zbGF0aW9uKG0sMCk7dmFyIGM9bTtyZXR1cm4gbT1udWxsLHUucmVtb3ZlQ2hpbGQoYykse2NvbnRhaW5lckJveENoYW5nZWQ6ISh1W2hdPW51bGwpfX19fWZ1bmN0aW9uIHV0KGUpe3ZhciBzPWUuZHJhZ2dhYmxlcyxjPWUubGF5b3V0LHU9bnVsbCxkPW51bGw7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUuZHJhZ1Jlc3VsdCxuPXQuYWRkZWRJbmRleCxvPXQucmVtb3ZlZEluZGV4LHI9dC5lbGVtZW50U2l6ZTtpZihuIT09dXx8byE9PWQpe2Zvcih2YXIgaT0wO2k8cy5sZW5ndGg7aSsrKWlmKGkhPT1vKXt2YXIgYT1zW2ldLGw9MDtudWxsIT09byYmbzxpJiYobC09ciksbnVsbCE9PW4mJm48PWkmJihsKz1yKSxjLnNldFRyYW5zbGF0aW9uKGEsbCl9cmV0dXJue2FkZGVkSW5kZXg6dT1uLHJlbW92ZWRJbmRleDpkPW99fX19ZnVuY3Rpb24gZHQoZSl7dmFyIHg9ZS5kcmFnZ2FibGVzLEU9ZS5sYXlvdXQsQz1udWxsO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmRyYWdnYWJsZUluZm8sbj1lLmRyYWdSZXN1bHQsbz1uLmFkZGVkSW5kZXgscj1uLnJlbW92ZWRJbmRleCxpPW4uZWxlbWVudFNpemUsYT1uLnBvcyxsPW4uc2hhZG93QmVnaW5FbmQ7aWYobnVsbD09PWEpcmV0dXJue3NoYWRvd0JlZ2luRW5kOkM9bnVsbH07aWYobnVsbD09PW98fCF0LmludmFsaWRhdGVTaGFkb3cmJm89PT1DKXJldHVybiBudWxsO3ZhciBzPW8tMSxjPU51bWJlci5NSU5fU0FGRV9JTlRFR0VSLHU9MCxkPTAsZj1udWxsLGc9bnVsbDtpZihzPT09ciYmcy0tLC0xPHMpe3ZhciBtPUUuZ2V0U2l6ZSh4W3NdKTtpZihnPUUuZ2V0QmVnaW5FbmQoeFtzXSksaTxtKXt2YXIgcD0obS1pKS8yO2M9Zy5lbmQtcH1lbHNlIGM9Zy5lbmQ7dT1nLmVuZH1lbHNlIGc9e2VuZDpFLmdldEJlZ2luRW5kT2ZDb250YWluZXIoKS5iZWdpbn0sdT1FLmdldEJlZ2luRW5kT2ZDb250YWluZXIoKS5iZWdpbjt2YXIgdj1OdW1iZXIuTUFYX1NBRkVfSU5URUdFUixoPW87aWYoaD09PXImJmgrKyxoPHgubGVuZ3RoKXt2YXIgeT1FLmdldFNpemUoeFtoXSk7aWYoZj1FLmdldEJlZ2luRW5kKHhbaF0pLGk8eSl7dmFyIGI9KHktaSkvMjt2PWYuYmVnaW4rYn1lbHNlIHY9Zi5iZWdpbjtkPWYuYmVnaW59ZWxzZSBmPXtiZWdpbjpFLmdldENvbnRhaW5lclJlY3RhbmdsZXMoKS5yZWN0LmVuZH0sZD1FLmdldENvbnRhaW5lclJlY3RhbmdsZXMoKS5yZWN0LmVuZC1FLmdldENvbnRhaW5lclJlY3RhbmdsZXMoKS5yZWN0LmJlZ2luO3ZhciB3PWcmJmY/RS5nZXRUb3BMZWZ0T2ZFbGVtZW50QmVnaW4oZy5lbmQpOm51bGw7cmV0dXJuIEM9byx7c2hhZG93QmVnaW5FbmQ6e2Ryb3BBcmVhOntiZWdpbjp1LGVuZDpkfSxiZWdpbjpjLGVuZDp2LHJlY3Q6dyxiZWdpbkFkanVzdG1lbnQ6bD9sLmJlZ2luQWRqdXN0bWVudDowfX19fWZ1bmN0aW9uIGZ0KCl7dmFyIGE9bnVsbDtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kcmFnUmVzdWx0LG49dC5wb3Msbz10LmFkZGVkSW5kZXgscj10LnNoYWRvd0JlZ2luRW5kO2lmKG51bGwhPT1uKXtpZihudWxsIT1vJiZudWxsPT09YSl7aWYobjxyLmJlZ2luKXt2YXIgaT1uLXIuYmVnaW4tNTtyLmJlZ2luQWRqdXN0bWVudD1pfWE9b319ZWxzZSBhPW51bGx9fWZ1bmN0aW9uIGd0KGUpe3ZhciB0PWUuZ2V0T3B0aW9ucyxuPSExLG89dCgpO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD0hIWUuZHJhZ1Jlc3VsdC5wb3M7dCE9PW4mJigobj10KT9vLm9uRHJhZ0VudGVyJiZvLm9uRHJhZ0VudGVyKCk6by5vbkRyYWdMZWF2ZSYmby5vbkRyYWdMZWF2ZSgpKX19ZnVuY3Rpb24gbXQoZSl7dmFyIHQ9ZS5nZXRPcHRpb25zLHM9bnVsbCxjPXQoKTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kcmFnUmVzdWx0LG49dC5hZGRlZEluZGV4LG89dC5yZW1vdmVkSW5kZXgscj1lLmRyYWdnYWJsZUluZm8saT1yLnBheWxvYWQsYT1yLmVsZW1lbnQ7aWYoYy5vbkRyb3BSZWFkeSYmbnVsbCE9PW4mJnMhPT1uKXt2YXIgbD1zPW47bnVsbCE9PW8mJm88biYmbC0tLGMub25Ecm9wUmVhZHkoe2FkZGVkSW5kZXg6bCxyZW1vdmVkSW5kZXg6byxwYXlsb2FkOmksZWxlbWVudDphP2EuZmlyc3RFbGVtZW50Q2hpbGQ6dm9pZCAwfSl9fX1mdW5jdGlvbiBwdChlKXtyZXR1cm5cImRyb3Atem9uZVwiPT09ZS5nZXRPcHRpb25zKCkuYmVoYXZpb3VyP3Z0KGUpKFplLCRlLGV0LHR0LG50LG90LHJ0LGd0LG10KTp2dChlKShaZSwkZSxldCx0dCxudCxhdCxsdCxzdCxjdCx1dCxkdCxpdCxmdCxndCxtdCl9ZnVuY3Rpb24gdnQoaSl7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07dmFyIG89dC5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUoaSl9KSxyPW51bGw7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiByPW8ucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx0KHtkcmFnZ2FibGVJbmZvOm4sZHJhZ1Jlc3VsdDplfSkpfSxyfHx7YWRkZWRJbmRleDpudWxsLHJlbW92ZWRJbmRleDpudWxsLGVsZW1lbnRTaXplOm51bGwscG9zOm51bGwsc2hhZG93QmVnaW5FbmQ6bnVsbH0pfX19ZnVuY3Rpb24gaHQoeSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0LG4sbyxyLGksYSxsLHM9T2JqZWN0LmFzc2lnbih7fSxTLGUpLGM9bnVsbCx1PW51bGwsZD0obj1oLG89SmUodD15KSxyPW4oKSxNKHQsXCJcIi5jb25jYXQodyxcIiBcIikuY29uY2F0KHIub3JpZW50YXRpb24pKSx7ZWxlbWVudDp0LGRyYWdnYWJsZXM6byxnZXRPcHRpb25zOm4sbGF5b3V0OnEodCxyLm9yaWVudGF0aW9uLHIuYW5pbWF0aW9uRHVyYXRpb24pfSksZj1wdChkKSxnPVFlKGQpLG09ZnVuY3Rpb24odCxuKXt2YXIgbz1bXTtmdW5jdGlvbiBlKCl7byYmKG8uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbil9KSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLG4pKX1yZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGU9dDtlOykoSShlLFwieFwiKXx8SShlLFwieVwiKSkmJm8ucHVzaChlKSxlPWUucGFyZW50RWxlbWVudH0oKSx7ZGlzcG9zZTpmdW5jdGlvbigpe2UoKSxvPW51bGx9LHN0YXJ0OmZ1bmN0aW9uKCl7byYmKG8uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbil9KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLG4pKX0sc3RvcDplfX0oeSxmdW5jdGlvbigpe2QubGF5b3V0LmludmFsaWRhdGVSZWN0cygpLHAoKX0pO2Z1bmN0aW9uIHAoKXtudWxsIT09dSYmKHUuaW52YWxpZGF0ZVNoYWRvdz0hMCxjPWYodSksdS5pbnZhbGlkYXRlU2hhZG93PSExKX1mdW5jdGlvbiB2KGUsdCl7Zm9yKHZhciBuPUplKHQpLG89MDtvPG4ubGVuZ3RoO28rKyllW29dPW5bb107Zm9yKHZhciByPTA7cjxlLmxlbmd0aC1uLmxlbmd0aDtyKyspZS5wb3AoKX1mdW5jdGlvbiBoKCl7cmV0dXJuIHN9cmV0dXJue2VsZW1lbnQ6eSxkcmFnZ2FibGVzOmQuZHJhZ2dhYmxlcyxpc0RyYWdSZWxldmFudDooaT1kLGE9aS5lbGVtZW50LGw9aS5nZXRPcHRpb25zLGZ1bmN0aW9uKGUsdCl7dmFyIG49bCgpO2lmKG4uc2hvdWxkQWNjZXB0RHJvcClyZXR1cm4gbi5zaG91bGRBY2NlcHREcm9wKGUuZ2V0T3B0aW9ucygpLHQpO3ZhciBvPWUuZ2V0T3B0aW9ucygpO3JldHVyblwiY29weVwiIT09bi5iZWhhdmlvdXImJk4oYSxcIi5cIitiKSE9PWUuZWxlbWVudCYmKGUuZWxlbWVudD09PWF8fCEoIW8uZ3JvdXBOYW1lfHxvLmdyb3VwTmFtZSE9PW4uZ3JvdXBOYW1lKSl9KSxsYXlvdXQ6ZC5sYXlvdXQsZGlzcG9zZTpmdW5jdGlvbihlKXt2YXIgdDttLmRpc3Bvc2UoKSx0PWUuZWxlbWVudCx5dC53cmFwQ2hpbGQmJkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodC5jaGlsZHJlbixmdW5jdGlvbihlKXtlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUmJkwoZSxiKSYmKHQuaW5zZXJ0QmVmb3JlKGUuZmlyc3RFbGVtZW50Q2hpbGQsZSksdC5yZW1vdmVDaGlsZChlKSl9KX0scHJlcGFyZURyYWc6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmVsZW1lbnQsbz1kLmRyYWdnYWJsZXM7dihvLG4pLGUubGF5b3V0LmludmFsaWRhdGVSZWN0cygpLG8uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gVWUoZSwhMCxoKCkuYW5pbWF0aW9uRHVyYXRpb24pfSksbS5zdGFydCgpfSxoYW5kbGVEcmFnOmZ1bmN0aW9uKGUpe3JldHVybiBjPWYodT1lKX0saGFuZGxlRHJvcDpmdW5jdGlvbihlKXttLnN0b3AoKSxjJiZjLmRyb3BQbGFjZWhvbGRlckNvbnRhaW5lciYmeS5yZW1vdmVDaGlsZChjLmRyb3BQbGFjZWhvbGRlckNvbnRhaW5lciksdT1udWxsLGY9cHQoZCksZyhlLGMpLGM9bnVsbH0sZmlyZVJlbW92ZUVsZW1lbnQ6ZnVuY3Rpb24oKXtnKHUsT2JqZWN0LmFzc2lnbih7fSxjLHthZGRlZEluZGV4Om51bGx9KSwhMCksYz1udWxsfSxnZXREcmFnUmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGdldFRyYW5zbGF0ZUNhbGN1bGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIHV0KGQpKGUpfSxvblRyYW5zbGF0ZWQ6ZnVuY3Rpb24oKXtwKCl9LHNldERyYWdnYWJsZXM6ZnVuY3Rpb24oKXt2KGQuZHJhZ2dhYmxlcyx5KX0sZ2V0U2Nyb2xsTWF4U3BlZWQ6ZnVuY3Rpb24oKXtyZXR1cm4geXQubWF4U2Nyb2xsU3BlZWR9LHNob3VsZFVzZVRyYW5zZm9ybUZvckdob3N0OmZ1bmN0aW9uKCl7cmV0dXJuITA9PT15dC51c2VUcmFuc2Zvcm1Gb3JHaG9zdH0sZ2V0T3B0aW9uczpoLHNldE9wdGlvbnM6ZnVuY3Rpb24oZSl7dmFyIHQ9ISgxPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtzPSExPT09dD9PYmplY3QuYXNzaWduKHt9LFMsZSk6T2JqZWN0LmFzc2lnbih7fSxTLHMsZSl9fX19dmFyIHl0PWZ1bmN0aW9uKGUsdCl7dmFyIG49aHQoZSkodCk7cmV0dXJuIGVbcl09bixxZS5yZWdpc3RlcihuKSx7ZGlzcG9zZTpmdW5jdGlvbigpe3FlLnVucmVnaXN0ZXIobiksbi5kaXNwb3NlKG4pfSxzZXRPcHRpb25zOmZ1bmN0aW9uKGUsdCl7bi5zZXRPcHRpb25zKGUsdCl9fX07ZnVuY3Rpb24gYnQoZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se3NldDpmdW5jdGlvbihlKXt0W25dPWV9LGdldDpmdW5jdGlvbigpe3JldHVybiB0W25dfX0pfXl0LndyYXBDaGlsZD0hMCx5dC5jYW5jZWxEcmFnPWZ1bmN0aW9uKCl7cWUuY2FuY2VsRHJhZygpfSx5dC5pc0RyYWdnaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHFlLmlzRHJhZ2dpbmcoKX07dmFyIHd0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGNvbnNvbGUud2FybignZGVmYXVsdCBleHBvcnQgaXMgZGVwcmVjYXRlZC4gcGxlYXNlIHVzZSBuYW1lZCBleHBvcnQgXCJzbW9vdGhEbkRcIicpLHl0KGUsdCl9O3d0LmNhbmNlbERyYWc9ZnVuY3Rpb24oKXt5dC5jYW5jZWxEcmFnKCl9LHd0LmlzRHJhZ2dpbmc9ZnVuY3Rpb24oKXtyZXR1cm4geXQuaXNEcmFnZ2luZygpfSxidCh3dCx5dCxcInVzZVRyYW5zZm9ybUZvckdob3N0XCIpLGJ0KHd0LHl0LFwibWF4U2Nyb2xsU3BlZWRcIiksYnQod3QseXQsXCJ3cmFwQ2hpbGRcIiksYnQod3QseXQsXCJkcm9wSGFuZGxlclwiKSxlLnNtb290aERuRD15dCxlLmNvbnN0YW50cz1uLGUuZHJvcEhhbmRsZXJzPWssZS5kZWZhdWx0PXd0LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBQb2RzIGRlcGVuZGVuY2llc1xuaW1wb3J0IHsgU1RPUkVfS0VZX0VESVRfUE9EIH0gZnJvbSAncG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3N0b3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBQb2RzREZWU2x1Z2dhYmxlIH0gZnJvbSAncG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3NsdWdnYWJsZSc7XG5cbi8vIFdvcmRQcmVzcyBkZXBlbmRlbmNpZXNcbi8vIG5vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuY29uc3QgeyBfXyB9ID0gd3AuaTE4bjtcbmNvbnN0IHsgd2l0aFNlbGVjdCwgd2l0aERpc3BhdGNoIH0gPSB3cC5kYXRhO1xuY29uc3QgeyBjb21wb3NlIH0gPSB3cC5jb21wb3NlO1xuXG5leHBvcnQgY29uc3QgRWRpdFBvZE5hbWUgPSBjb21wb3NlICggW1xuXHR3aXRoU2VsZWN0KCAoIHNlbGVjdCApID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cG9kTmFtZTogc2VsZWN0KCBTVE9SRV9LRVlfRURJVF9QT0QgKS5nZXRQb2ROYW1lKClcblx0XHR9O1xuXHR9ICksXG5cdHdpdGhEaXNwYXRjaCggKCBkaXNwYXRjaCApID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2V0UG9kTmFtZTogZGlzcGF0Y2goIFNUT1JFX0tFWV9FRElUX1BPRCApLnNldFBvZE5hbWVcblx0XHR9O1xuXHR9IClcbl0gKVxuKCAoIHByb3BzICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdDxoMj5cblx0XHRcdHtfXyggJ0VkaXQgUG9kOiAnLCAncG9kcycgKX1cblx0XHRcdHsnXFx1MDBBMCcgLyogJm5ic3A7ICovfVxuXHRcdFx0PFBvZHNERlZTbHVnZ2FibGVcblx0XHRcdFx0dmFsdWU9e3Byb3BzLnBvZE5hbWV9XG5cdFx0XHRcdHVwZGF0ZVZhbHVlPXtwcm9wcy5zZXRQb2ROYW1lfVxuXHRcdFx0Lz5cblx0XHQ8L2gyPlxuXHQpO1xufSApO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLy8gV29yZFByZXNzIGRlcGVuZGVuY2llc1xuY29uc3QgeyB3aXRoU2VsZWN0LCB3aXRoRGlzcGF0Y2ggfSA9IHdwLmRhdGE7XG5jb25zdCB7IGNvbXBvc2UgfSA9IHdwLmNvbXBvc2U7XG5cbi8vIFBvZHMgZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBTVE9SRV9LRVlfRURJVF9QT0QgfSBmcm9tICcuL3N0b3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBoYW5kbGVTdWJtaXQgfSBmcm9tICcuL2hhbmRsZS1zdWJtaXQnO1xuaW1wb3J0IHsgU2F2ZVN0YXR1c01lc3NhZ2UgfSBmcm9tICcuL3NhdmUtc3RhdHVzLW1lc3NhZ2UnO1xuaW1wb3J0IHsgRWRpdFBvZE5hbWUgfSBmcm9tICcuL2VkaXQtcG9kLW5hbWUnO1xuaW1wb3J0IHsgUG9kc05hdlRhYiB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb21wb25lbnRzL3RhYnMvcG9kcy1uYXYtdGFiJztcbmltcG9ydCB7IEFjdGl2ZVRhYkNvbnRlbnQgfSBmcm9tICcuL21haW4tdGFicy9hY3RpdmUtdGFiLWNvbnRlbnQnO1xuaW1wb3J0IHsgUG9zdGJveCB9IGZyb20gJy4vcG9zdGJveCc7XG5cbmNvbnN0IFN0b3JlU3Vic2NyaWJlID0gY29tcG9zZSggW1xuXHR3aXRoU2VsZWN0KCAoIHNlbGVjdCApID0+IHtcblx0XHRjb25zdCBzdG9yZVNlbGVjdCA9IHNlbGVjdCggU1RPUkVfS0VZX0VESVRfUE9EICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRhYnM6IHN0b3JlU2VsZWN0LmdldFRhYnMoKSxcblx0XHRcdGFjdGl2ZVRhYjogc3RvcmVTZWxlY3QuZ2V0QWN0aXZlVGFiKCksXG5cdFx0XHR0YWJPcHRpb25zOiBzdG9yZVNlbGVjdC5nZXRUYWJPcHRpb25zKCBzdG9yZVNlbGVjdC5nZXRBY3RpdmVUYWIoKSApLFxuXHRcdFx0Z3JvdXBzOiBzdG9yZVNlbGVjdC5nZXRHcm91cHMoKSxcblx0XHRcdGdldE9wdGlvblZhbHVlOiBzdG9yZVNlbGVjdC5nZXRPcHRpb25WYWx1ZSxcblx0XHRcdGdldEdyb3VwRmllbGRzOiBzdG9yZVNlbGVjdC5nZXRHcm91cEZpZWxkcyxcblx0XHR9O1xuXHR9ICksXG5cdHdpdGhEaXNwYXRjaCggKCBkaXNwYXRjaCApID0+IHtcblx0XHRjb25zdCBzdG9yZURpc3BhdGNoID0gZGlzcGF0Y2goIFNUT1JFX0tFWV9FRElUX1BPRCApO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZXRBY3RpdmVUYWI6IHN0b3JlRGlzcGF0Y2guc2V0QWN0aXZlVGFiLFxuXHRcdFx0c2V0T3B0aW9uVmFsdWU6IHN0b3JlRGlzcGF0Y2guc2V0T3B0aW9uVmFsdWUsXG5cdFx0XHRyZW9yZGVyR3JvdXBJdGVtOiBzdG9yZURpc3BhdGNoLnJlb3JkZXJHcm91cEl0ZW0sXG5cdFx0fTtcblx0fSApXG5dICk7XG5cbmV4cG9ydCBjb25zdCBQb2RzREZWRWRpdFBvZCA9IFN0b3JlU3Vic2NyaWJlKCAoIHByb3BzICkgPT4ge1xuXG4vLy0tISBUb2RvOiBkZWJ1Z2dpbmcgb25seVxuXHR3aW5kb3cuc2VsZWN0ID0gd3AuZGF0YS5zZWxlY3QoICdwb2RzL2VkaXQtcG9kJyApO1xuXHR3aW5kb3cuZGlzcGF0Y2ggPSB3cC5kYXRhLmRpc3BhdGNoKCAncG9kcy9lZGl0LXBvZCcgKTtcbi8vLS0hIFRvZG86IGRlYnVnZ2luZyBvbmx5XG5cblx0cmV0dXJuIChcblx0XHQ8Zm9ybVxuXHRcdFx0b25TdWJtaXQ9eyggZSApID0+IGhhbmRsZVN1Ym1pdCggZSwgcHJvcHMgKX0+XG5cdFx0XHQ8ZGl2PlxuXHRcdFx0XHQ8RWRpdFBvZE5hbWUgLz5cblx0XHRcdFx0PFNhdmVTdGF0dXNNZXNzYWdlIC8+XG5cdFx0XHRcdDxQb2RzTmF2VGFiXG5cdFx0XHRcdFx0dGFicz17cHJvcHMudGFic31cblx0XHRcdFx0XHRhY3RpdmVUYWI9e3Byb3BzLmFjdGl2ZVRhYn1cblx0XHRcdFx0XHRzZXRBY3RpdmVUYWI9e3Byb3BzLnNldEFjdGl2ZVRhYn1cblx0XHRcdFx0Lz5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBpZD0ncG9zdHN0dWZmJz5cblx0XHRcdFx0PGRpdiBpZD0ncG9zdC1ib2R5JyBjbGFzc05hbWU9J2NvbHVtbnMtMic+XG5cdFx0XHRcdFx0PEFjdGl2ZVRhYkNvbnRlbnRcblx0XHRcdFx0XHRcdGdyb3Vwcz17cHJvcHMuZ3JvdXBzfVxuXHRcdFx0XHRcdFx0Z2V0R3JvdXBGaWVsZHM9e3Byb3BzLmdldEdyb3VwRmllbGRzfVxuXHRcdFx0XHRcdFx0cmVvcmRlckdyb3VwSXRlbT17cHJvcHMucmVvcmRlckdyb3VwSXRlbX1cblx0XHRcdFx0XHRcdGFjdGl2ZVRhYj17cHJvcHMuYWN0aXZlVGFifVxuXHRcdFx0XHRcdFx0dGFiT3B0aW9ucz17cHJvcHMudGFiT3B0aW9uc31cblx0XHRcdFx0XHRcdGdldE9wdGlvblZhbHVlPXtwcm9wcy5nZXRPcHRpb25WYWx1ZX1cblx0XHRcdFx0XHRcdHNldE9wdGlvblZhbHVlPXtwcm9wcy5zZXRPcHRpb25WYWx1ZX1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDxQb3N0Ym94IC8+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9mb3JtPlxuXHQpO1xufSApO1xuIiwiY29uc3QgQUpBWF9BQ1RJT04gPSAncG9kc19hZG1pbl9wcm90byc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVTdWJtaXQgPSAoIGUsIHByb3BzICkgPT4ge1xuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0Y29uc3QgcmVxdWVzdERhdGEgPSB7XG5cdFx0J2lkJzogcHJvcHMucG9kTWV0YS5pZCxcblx0XHQnbmFtZSc6IHByb3BzLnBvZE1ldGEubmFtZSxcblx0XHQnb2xkX25hbWUnOiBwcm9wcy5wb2RNZXRhLm5hbWUsXG5cdFx0J193cG5vbmNlJzogcHJvcHMubm9uY2UsXG5cdFx0J2ZpZWxkcyc6IHByb3BzLmZpZWxkc1xuXHR9O1xuXG5cdC8qXG5cdHByb3BzLnNldFNhdmVTdGF0dXMoIHNhdmVTdGF0dXNlcy5TQVZJTkcgKTtcblx0ZmV0Y2goIGAke2FqYXh1cmx9P3BvZHNfYWpheD0xJmFjdGlvbj0ke0FKQVhfQUNUSU9OfWAsIHtcblx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRoZWFkZXJzOiB7XG5cdFx0XHQnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdH0sXG5cdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoIHJlcXVlc3REYXRhIClcblx0fSApXG5cdC50aGVuKFxuXHRcdCggcmVzdWx0ICkgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coIHJlc3VsdCApO1xuXHRcdFx0cHJvcHMuc2V0U2F2ZVN0YXR1cyggc2F2ZVN0YXR1c2VzLlNBVkVfU1VDQ0VTUyApO1xuXHRcdH0sXG5cdFx0KCBlcnJvciApID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKCBlcnJvciApO1xuXHRcdFx0cHJvcHMuc2V0U2F2ZVN0YXR1cyggc2F2ZVN0YXR1c2VzLlNBVkVfRVJST1IgKTtcblx0XHR9XG5cdCk7XG5cdCAqL1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vLyBQb2RzIGRlcGVuZGVuY2llc1xuaW1wb3J0IHsgRHluYW1pY1RhYkNvbnRlbnQgfSBmcm9tICcuL2R5bmFtaWMtdGFiLWNvbnRlbnQnO1xuaW1wb3J0IHsgRmllbGRHcm91cHMgfSBmcm9tICdwb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2QvbWFpbi10YWJzL2ZpZWxkLWdyb3Vwcyc7XG5cbi8qKlxuICogQWN0aXZlVGFiQ29udGVudFxuICpcbiAqIERpc3BsYXkgdGhlIGNvbnRlbnQgZm9yIHRoZSBhY3RpdmUgdGFiLCBtYW5hZ2UtZmllbGRzIGlzIHRyZWF0ZWQgc3BlY2lhbFxuICovXG5leHBvcnQgY29uc3QgQWN0aXZlVGFiQ29udGVudCA9ICggcHJvcHMgKSA9PiB7XG5cdGxldCBDb21wb25lbnQ7XG5cblx0aWYgKCAnbWFuYWdlLWZpZWxkcycgPT09IHByb3BzLmFjdGl2ZVRhYiApIHtcblx0XHRDb21wb25lbnQgPSAoXG5cdFx0XHQ8RmllbGRHcm91cHNcblx0XHRcdFx0Z3JvdXBzPXtwcm9wcy5ncm91cHN9XG5cdFx0XHRcdGdldEdyb3VwRmllbGRzPXtwcm9wcy5nZXRHcm91cEZpZWxkc31cblx0XHRcdFx0cmVvcmRlckdyb3VwSXRlbT17cHJvcHMucmVvcmRlckdyb3VwSXRlbX1cblx0XHRcdC8+XG5cdFx0KTtcblx0fSBlbHNlIHtcblx0XHRDb21wb25lbnQgPSAoXG5cdFx0XHQ8RHluYW1pY1RhYkNvbnRlbnRcblx0XHRcdFx0dGFiT3B0aW9ucz17cHJvcHMudGFiT3B0aW9uc31cblx0XHRcdFx0Z2V0T3B0aW9uVmFsdWU9e3Byb3BzLmdldE9wdGlvblZhbHVlfVxuXHRcdFx0XHRzZXRPcHRpb25WYWx1ZT17cHJvcHMuc2V0T3B0aW9uVmFsdWV9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgaWQ9J3Bvc3QtYm9keS1jb250ZW50JyBjbGFzc05hbWU9J3BvZHMtbmF2LXRhYi1ncm91cCBwb2RzLW1hbmFnZS1maWVsZCc+XG5cdFx0XHR7Q29tcG9uZW50fVxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuQWN0aXZlVGFiQ29udGVudC5wcm9wVHlwZXMgPSB7XG5cdGdyb3VwczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG5cdGdldEdyb3VwRmllbGRzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRyZW9yZGVyR3JvdXBJdGVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRhY3RpdmVUYWI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0dGFiT3B0aW9uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG5cdGdldE9wdGlvblZhbHVlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRzZXRPcHRpb25WYWx1ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGVhY2gsIGlzT2JqZWN0IH0gZnJvbSAnbG9kYXNoJztcblxuLy8gV29yZFByZXNzIERlcGVuZGVuY2llc1xuLy8gbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG5jb25zdCB7IHNwcmludGYsIF9fIH0gPSB3cC5pMThuO1xuXG4vLyBQb2QgZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBQb2RzRmllbGRPcHRpb24gfSBmcm9tICdwb2RzLWRmdi9zcmMvY29tcG9uZW50cy9maWVsZC1vcHRpb24nO1xuXG5jb25zdCBNSVNTSU5HID0gX18oICdbTUlTU0lORyBERUZBVUxUXScsICdwb2RzJyApO1xuXG4vKipcbiAqIG9wdGlvbiBkYXRhIGZvcm1hdFxuICoge1xuICogICAgIG9wdGlvbk5hbWU6IHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBtYXkgZ2V0IHJlbW92ZWQuLi4gbWVyZ2UgaXQgaW50byB2YWx1ZSBvbiB0aGUgc2VydmVyIHNpZGUsXG4gKiAgICAgICAgIC8vIGl0J3MgYSBvbmUtdGltZSB0aGluZ1xuICogICAgICAgICBkZWZhdWx0OiAnJyxcbiAqICAgICAgICAgZGVwZW5kcy1vbjogeyBvcHRpb25OYW1lOiBkZXBlbmRlbnRWYWx1ZSB9LFxuICogICAgICAgICBoZWxwOiAnaGVscCcsXG4gKiAgICAgICAgIGxhYmVsOiAnWFhYICVzJyxcbiAqICAgICAgICAgbGFiZWxfcGFyYW06ICdvcHRpb25OYW1lJyxcbiAqICAgICAgICAgcGFyYW1fZGVmYXVsdDogJ0l0ZW0nLFxuICogICAgICAgICB0eXBlOiAndGV4dCwgYm9vbGVhbiwgbnVtYmVyLCBwaWNrLCBmaWxlJ1xuICogICAgICAgICB2YWx1ZTogJydcbiAqICAgICB9XG4gKiB9XG4gKi9cblxuLyoqXG4gKiBEeW5hbWljVGFiQ29udGVudFxuICovXG5leHBvcnQgY29uc3QgRHluYW1pY1RhYkNvbnRlbnQgPSAoIHByb3BzICkgPT4ge1xuXHRjb25zdCB7IHRhYk9wdGlvbnMsIGdldE9wdGlvblZhbHVlLCBzZXRPcHRpb25WYWx1ZSB9ID0gcHJvcHM7XG5cblx0Y29uc3QgZ2V0TGFiZWxWYWx1ZSA9ICggbGFiZWxGb3JtYXQsIHBhcmFtT3B0aW9uLCBwYXJhbURlZmF1bHQgKSA9PiB7XG5cdFx0aWYgKCAhcGFyYW1PcHRpb24gKSB7XG5cdFx0XHRyZXR1cm4gbGFiZWxGb3JtYXQ7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcGFyYW0gPSBnZXRPcHRpb25WYWx1ZSggcGFyYW1PcHRpb24gKSB8fCBwYXJhbURlZmF1bHQgfHwgTUlTU0lORztcblx0XHRyZXR1cm4gc3ByaW50ZiggbGFiZWxGb3JtYXQsIHBhcmFtICk7XG5cdH07XG5cblx0cmV0dXJuIHRhYk9wdGlvbnMubWFwKCBvcHRpb24gPT4gKFxuXHRcdDxEZXBlbmRlbnRGaWVsZE9wdGlvblxuXHRcdFx0a2V5PXtvcHRpb24ubmFtZX1cblx0XHRcdGZpZWxkVHlwZT17b3B0aW9uLnR5cGV9XG5cdFx0XHRuYW1lPXtvcHRpb24ubmFtZX1cblx0XHRcdGxhYmVsPXtnZXRMYWJlbFZhbHVlKCBvcHRpb24ubGFiZWwsIG9wdGlvbi5sYWJlbF9wYXJhbSwgb3B0aW9uLnBhcmFtX2RlZmF1bHQgKX1cblx0XHRcdHZhbHVlPXtvcHRpb24udmFsdWUgfHwgJyd9XG5cdFx0XHRkZXBlbmRlbnRzPXtvcHRpb25bICdkZXBlbmRzLW9uJyBdfVxuXHRcdFx0aGVscFRleHQ9e29wdGlvbi5oZWxwfVxuXHRcdFx0Z2V0T3B0aW9uVmFsdWU9e2dldE9wdGlvblZhbHVlfVxuXHRcdFx0c2V0T3B0aW9uVmFsdWU9e3NldE9wdGlvblZhbHVlfVxuXHRcdC8+XG5cdCkgKTtcbn07XG5EeW5hbWljVGFiQ29udGVudC5wcm9wVHlwZXMgPSB7XG5cdHRhYk9wdGlvbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRnZXRPcHRpb25WYWx1ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0c2V0T3B0aW9uVmFsdWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG4vKipcbiAqIERlcGVuZGVudEZpZWxkT3B0aW9uXG4gKlxuICogQ29uZGl0aW9uYWxseSBkaXNwbGF5IGEgRmllbGRPcHRpb24gKGRlcGVuZHMtb24gc3VwcG9ydClcbiAqL1xuY29uc3QgRGVwZW5kZW50RmllbGRPcHRpb24gPSAoIHByb3BzICkgPT4ge1xuXHRjb25zdCB7IGZpZWxkVHlwZSwgbmFtZSwgbGFiZWwsIHZhbHVlLCBkZXBlbmRlbnRzIH0gPSBwcm9wcztcblx0Y29uc3QgeyBnZXRPcHRpb25WYWx1ZSwgc2V0T3B0aW9uVmFsdWUgfSA9IHByb3BzO1xuXG5cdGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKCBlICkgPT4ge1xuXHRcdGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuXHRcdGNvbnN0IHZhbHVlID0gJ2NoZWNrYm94JyA9PT0gdGFyZ2V0LnR5cGUgPyB0YXJnZXQuY2hlY2tlZCA6IHRhcmdldC52YWx1ZTtcblxuXHRcdHNldE9wdGlvblZhbHVlKCBuYW1lLCB2YWx1ZSApO1xuXHR9O1xuXG5cdGlmICggIW1lZXRzRGVwZW5kZW5jaWVzKCBkZXBlbmRlbnRzLCBnZXRPcHRpb25WYWx1ZSApICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8UG9kc0ZpZWxkT3B0aW9uXG5cdFx0XHRmaWVsZFR5cGU9e2ZpZWxkVHlwZX1cblx0XHRcdG5hbWU9e25hbWV9XG5cdFx0XHR2YWx1ZT17dmFsdWV9XG5cdFx0XHRsYWJlbD17bGFiZWx9XG5cdFx0XHRvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG5cdFx0XHRoZWxwVGV4dD17cHJvcHMuaGVscFRleHR9XG5cdFx0Lz5cblx0KTtcbn07XG5EZXBlbmRlbnRGaWVsZE9wdGlvbi5wcm9wVHlwZXMgPSB7XG5cdGZpZWxkVHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdHZhbHVlOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG5cdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdGRlcGVuZGVudHM6IFByb3BUeXBlcy5vYmplY3QsXG5cdGhlbHBUZXh0OiBQcm9wVHlwZXMuYW55LFxuXHRnZXRPcHRpb25WYWx1ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0c2V0T3B0aW9uVmFsdWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge29iamVjdHxvYmplY3RbXX0gZGVwZW5kZW5jaWVzIERpY3Rpb25hcnkgaW4gdGhlIGZvcm0gb3B0aW9uTmFtZTogcmVxdWlyZWRWYWxcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldE9wdGlvblZhbHVlIFNlbGVjdG9yIHRvIGxvb2t1cCBvcHRpb24gdmFsdWVzIGJ5IG5hbWVcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgc3BlY2lmaWVkIGRlcGVuZGVuY2llcyBhcmUgbWV0XG4gKi9cbmNvbnN0IG1lZXRzRGVwZW5kZW5jaWVzID0gKCBkZXBlbmRlbmNpZXMsIGdldE9wdGlvblZhbHVlICkgPT4ge1xuXHRsZXQgcmV0VmFsID0gdHJ1ZTtcblxuXHRpZiAoIGRlcGVuZGVuY2llcyAmJiBpc09iamVjdCggZGVwZW5kZW5jaWVzICkgKSB7XG5cdFx0ZWFjaCggZGVwZW5kZW5jaWVzLCAoIGRlcGVuZGVudFZhbHVlLCBkZXBlbmRlbnRPcHRpb25OYW1lICkgPT4ge1xuXHRcdFx0Ly8gTG9vc2UgY29tcGFyaXNvbiByZXF1aXJlZCwgdmFsdWVzIG1heSBiZSAxLzAgZXhwZWN0aW5nIHRydWUvZmFsc2Vcblx0XHRcdC8vIG5vaW5zcGVjdGlvbiBFcXVhbGl0eUNvbXBhcmlzb25XaXRoQ29lcmNpb25KU1xuXHRcdFx0aWYgKCBnZXRPcHRpb25WYWx1ZSggZGVwZW5kZW50T3B0aW9uTmFtZSApICE9IGRlcGVuZGVudFZhbHVlICkge1xuXHRcdFx0XHRyZXRWYWwgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBFYXJseS1leGl0cyB0aGUgbG9vcCBvbmx5LCBub3QgdGhlIGZ1bmN0aW9uXG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHJldFZhbDtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IENvbnRhaW5lciwgRHJhZ2dhYmxlIH0gZnJvbSAncmVhY3Qtc21vb3RoLWRuZCc7XG5pbXBvcnQgeyBGaWVsZExpc3QgfSBmcm9tICdwb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2QvbWFpbi10YWJzL2ZpZWxkLWxpc3QnO1xuaW1wb3J0ICcuL2ZpZWxkLWdyb3Vwcy5zY3NzJztcblxuY29uc3QgeyB1c2VTdGF0ZSB9ID0gUmVhY3Q7XG5jb25zdCB7IERhc2hpY29uIH0gPSB3cC5jb21wb25lbnRzO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBGaWVsZEdyb3VwcyA9ICggcHJvcHMgKSA9PiB7XG5cdGNvbnN0IGhhbmRsZUdyb3VwRHJvcCA9ICggZHJhZ1Jlc3VsdCApID0+IHtcblx0XHRjb25zdCB7IHJlbW92ZWRJbmRleCwgYWRkZWRJbmRleCwgcGF5bG9hZCB9ID0gZHJhZ1Jlc3VsdDtcblx0XHRwcm9wcy5yZW9yZGVyR3JvdXBJdGVtKCByZW1vdmVkSW5kZXgsIGFkZGVkSW5kZXggKTtcblx0fTtcblxuXHRjb25zdCBjb250YWluZXJQcm9wcyA9IHtcblx0XHRncm91cE5hbWU6ICdncm91cHMnLFxuXHRcdGxvY2tBeGlzOiAneScsXG5cdFx0ZHJhZ0hhbmRsZVNlbGVjdG9yOiAnLnBvZHMtZmllbGQtZ3JvdXAtLWhhbmRsZScsXG5cdFx0ZHJhZ0NsYXNzOiAnb3BhY2l0eS1naG9zdCcsXG5cdFx0b25Ecm9wOiBoYW5kbGVHcm91cERyb3AsXG5cdH07XG5cblx0Ly8gbm9pbnNwZWN0aW9uIFJlcXVpcmVkQXR0cmlidXRlc1xuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiZmllbGQtZ3JvdXBzXCI+XG5cdFx0XHQ8Q29udGFpbmVyIHsuLi5jb250YWluZXJQcm9wc30+XG5cdFx0XHRcdHtwcm9wcy5ncm91cHMubWFwKCB0aGlzR3JvdXAgPT4gKFxuXHRcdFx0XHRcdDxEcmFnZ2FibGUga2V5PXt0aGlzR3JvdXAubmFtZX0+XG5cdFx0XHRcdFx0XHQ8RmllbGRHcm91cFxuXHRcdFx0XHRcdFx0XHRncm91cE5hbWU9e3RoaXNHcm91cC5uYW1lfVxuXHRcdFx0XHRcdFx0XHRnZXRHcm91cEZpZWxkcz17cHJvcHMuZ2V0R3JvdXBGaWVsZHN9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDwvRHJhZ2dhYmxlPlxuXHRcdFx0XHQpICl9XG5cdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1idXR0b24tZ3JvdXAtLWNvbnRhaW5lclwiPlxuXHRcdFx0XHQ8YSBocmVmPVwiI1wiPkFkZCBHcm91cDwvYT4gPGEgaHJlZj1cIiNcIj5BZGQgRmllbGQ8L2E+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbkZpZWxkR3JvdXBzLnByb3BUeXBlcyA9IHtcblx0Z3JvdXBzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcblx0Z2V0R3JvdXBGaWVsZHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdHJlb3JkZXJHcm91cEl0ZW06IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG4vKipcbiAqXG4gKi9cbmNvbnN0IEZpZWxkR3JvdXAgPSAoIHByb3BzICkgPT4ge1xuXHRsZXQgVG9nZ2xlO1xuXHRjb25zdCB7IGdyb3VwTmFtZSwgZ2V0R3JvdXBGaWVsZHMgfSA9IHByb3BzO1xuXHRjb25zdCBbIGV4cGFuZGVkLCBzZXRFeHBhbmRlZCBdID0gdXNlU3RhdGUoIGZhbHNlICk7XG5cblx0Y29uc3QgdG9nZ2xlRXhwYW5kZWQgPSAoKSA9PiB7XG5cdFx0c2V0RXhwYW5kZWQoICFleHBhbmRlZCApO1xuXHR9O1xuXG5cdGlmICggZXhwYW5kZWQgKSB7XG5cdFx0VG9nZ2xlID0gKCA8RGFzaGljb24gaWNvbj0nYXJyb3ctdXAnIC8+ICk7XG5cdH0gZWxzZSB7XG5cdFx0VG9nZ2xlID0gKCA8RGFzaGljb24gaWNvbj0nYXJyb3ctZG93bicgLz4gKTtcblx0fVxuXG5cdC8vIG5vaW5zcGVjdGlvbiBSZXF1aXJlZEF0dHJpYnV0ZXNcblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cInBvZHMtZmllbGQtZ3JvdXAtd3JhcHBlclwiPlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWZpZWxkLWdyb3VwLS10aXRsZVwiIG9uQ2xpY2s9e3RvZ2dsZUV4cGFuZGVkfT5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWZpZWxkLWdyb3VwLS1oYW5kbGVcIj5cblx0XHRcdFx0XHQ8RGFzaGljb24gaWNvbj0nbWVudScgLz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZC1ncm91cC0tbmFtZVwiPntncm91cE5hbWV9PC9kaXY+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZC1ncm91cC0tbWFuYWdlXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWZpZWxkLWdyb3VwLS10b2dnbGVcIj5cblx0XHRcdFx0XHRcdHtUb2dnbGV9XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHR7ZXhwYW5kZWQgJiYgPEZpZWxkTGlzdCBmaWVsZHM9e2dldEdyb3VwRmllbGRzKCBncm91cE5hbWUgKX0gLz59XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5GaWVsZEdyb3VwLnByb3BUeXBlcyA9IHtcblx0Z3JvdXBOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdGdldEdyb3VwRmllbGRzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZmllbGQtZ3JvdXBzLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZmllbGQtZ3JvdXBzLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2ZpZWxkLWdyb3Vwcy5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBDb250YWluZXIsIERyYWdnYWJsZSB9IGZyb20gJ3JlYWN0LXNtb290aC1kbmQnO1xuXG5pbXBvcnQgJy4vbWFuYWdlLWZpZWxkcy5zY3NzJztcblxuLy8gV29yZFByZXNzIGRlcGVuZGVuY2llc1xuLy8gbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG5jb25zdCB7IF9fIH0gPSB3cC5pMThuO1xuY29uc3QgeyBEYXNoaWNvbiB9ID0gd3AuY29tcG9uZW50cztcblxuZXhwb3J0IGNvbnN0IEZpZWxkTGlzdCA9ICggcHJvcHMgKSA9PiB7XG5cdGNvbnN0IGNvbnRhaW5lclByb3BzID0ge1xuXHRcdGdyb3VwTmFtZTogJ2ZpZWxkcycsXG5cdFx0bG9ja0F4aXM6ICd5Jyxcblx0XHRkcmFnSGFuZGxlU2VsZWN0b3I6ICcucG9kcy1maWVsZC0taGFuZGxlJyxcblx0fTtcblxuXHRjb25zdCBoYW5kbGVGaWVsZERyb3AgPSAoIGUgKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coIGUgKTtcblx0fTtcblxuXHRpZiAoIDAgPT09IHByb3BzLmZpZWxkcy5sZW5ndGggKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxDb250YWluZXIgey4uLmNvbnRhaW5lclByb3BzfSBvbkRyb3A9e2hhbmRsZUZpZWxkRHJvcH0+XG5cdFx0XHRcdDxEcmFnZ2FibGU+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9J3BvZHMtbWFuYWdlLWZpZWxkcyBuby1maWVsZHMnPlxuXHRcdFx0XHRcdFx0e19fKCAnVGhlcmUgYXJlIG5vIGZpZWxkcyBpbiB0aGlzIGdyb3VwJywgJ3BvZHMnICl9XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvRHJhZ2dhYmxlPlxuXHRcdFx0PC9Db250YWluZXI+XG5cdFx0KTtcblx0fVxuXG5cdC8vIG5vaW5zcGVjdGlvbiBSZXF1aXJlZEF0dHJpYnV0ZXNcblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT0ncG9kcy1tYW5hZ2UtZmllbGRzJz5cblx0XHRcdDxGaWVsZEhlYWRlciAvPlxuXHRcdFx0PENvbnRhaW5lciB7Li4uY29udGFpbmVyUHJvcHN9IG9uRHJvcD17aGFuZGxlRmllbGREcm9wfT5cblx0XHRcdFx0e3Byb3BzLmZpZWxkcy5tYXAoIHRoaXNGaWVsZCA9PiAoXG5cdFx0XHRcdFx0PERyYWdnYWJsZSBrZXk9e3RoaXNGaWVsZC5pZH0+XG5cdFx0XHRcdFx0XHQ8RmllbGRMaXN0SXRlbVxuXHRcdFx0XHRcdFx0XHRpZD17dGhpc0ZpZWxkLmlkfVxuXHRcdFx0XHRcdFx0XHRmaWVsZExhYmVsPXt0aGlzRmllbGQubGFiZWx9XG5cdFx0XHRcdFx0XHRcdGZpZWxkTmFtZT17dGhpc0ZpZWxkLm5hbWV9XG5cdFx0XHRcdFx0XHRcdHJlcXVpcmVkPXt0aGlzRmllbGQucmVxdWlyZWR9XG5cdFx0XHRcdFx0XHRcdHR5cGU9e3RoaXNGaWVsZC50eXBlfVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8L0RyYWdnYWJsZT5cblx0XHRcdFx0KSApfVxuXHRcdFx0PC9Db250YWluZXI+XG5cdFx0XHQ8RmllbGRIZWFkZXIgLz5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbkZpZWxkTGlzdC5wcm9wVHlwZXMgPSB7XG5cdGZpZWxkczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG59O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBGaWVsZExpc3RJdGVtID0gKCBwcm9wcyApID0+IHtcblx0Y29uc3QgeyBpZCwgZmllbGROYW1lLCBmaWVsZExhYmVsLCByZXF1aXJlZCwgdHlwZSB9ID0gcHJvcHM7XG5cblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cInBvZHMtZmllbGQtLXdyYXBwZXJcIj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZCBwb2RzLWZpZWxkLS1oYW5kbGVcIj5cblx0XHRcdFx0PERhc2hpY29uIGljb249J21lbnUnIC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZCBwb2RzLWZpZWxkLS1sYWJlbFwiPlxuXHRcdFx0XHR7ZmllbGRMYWJlbH08c3BhbiBjbGFzc05hbWU9e3JlcXVpcmVkICYmICdwb2RzLWZpZWxkLS1yZXF1aXJlZCd9Pio8L3NwYW4+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZC0taWRcIj5baWQgPSB7aWR9XTwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInBvZHMtZmllbGQgcG9kcy1maWVsZC0tbmFtZVwiPlxuXHRcdFx0XHR7ZmllbGROYW1lfVxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInBvZHMtZmllbGQgcG9kcy1maWVsZC0tdHlwZVwiPlxuXHRcdFx0XHR7dHlwZX1cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWZpZWxkLS1pZFwiPlt0eXBlID0gW1NUSUxMIE5FRUQgVEhJU11dPC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZCBwb2RzLWZpZWxkLS1hY3Rpb25zXCI+XG5cdFx0XHRcdDxEYXNoaWNvbiBpY29uPSdlZGl0JyAvPiA8RGFzaGljb24gaWNvbj0nYWRtaW4tcGFnZScgLz5cblx0XHRcdFx0PERhc2hpY29uIGljb249J3RyYXNoJyAvPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5GaWVsZExpc3RJdGVtLnByb3BUeXBlcyA9IHtcblx0aWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblx0ZmllbGROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdGZpZWxkTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0cmVxdWlyZWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0dHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgRmllbGRIZWFkZXIgPSAoKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWZpZWxkLS13cmFwcGVyLWxhYmVsc1wiPlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWZpZWxkLS13cmFwcGVyLWxhYmVsLWl0ZW1zXCI+TGFiZWw8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZC0td3JhcHBlci1sYWJlbC1pdGVtc1wiPk5hbWU8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9kcy1maWVsZC0td3JhcHBlci1sYWJlbC1pdGVtc1wiPkZpZWxkIFR5cGU8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9tYW5hZ2UtZmllbGRzLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFuYWdlLWZpZWxkcy5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9tYW5hZ2UtZmllbGRzLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU1RPUkVfS0VZX0VESVRfUE9EIH0gZnJvbSAncG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3N0b3JlL2NvbnN0YW50cyc7XG5cbmNvbnN0IHsgX18gfSA9IHdwLmkxOG47XG5jb25zdCB7IHdpdGhTZWxlY3QgfSA9IHdwLmRhdGE7XG5cbmV4cG9ydCBjb25zdCBQb3N0Ym94ID0gd2l0aFNlbGVjdCggKCBzZWxlY3QgKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0aXNTYXZpbmc6IHNlbGVjdCggU1RPUkVfS0VZX0VESVRfUE9EICkuaXNTYXZpbmcoKVxuXHR9O1xufSApXG4oICggcHJvcHMgKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0PGRpdiBpZD0ncG9zdGJveC1jb250YWluZXItMScgY2xhc3NOYW1lPSdwb3N0Ym94LWNvbnRhaW5lciBwb2RzX2Zsb2F0bWVudSc+XG5cdFx0XHQ8ZGl2IGlkPSdzaWRlLWluZm8tZmllbGQnIGNsYXNzTmFtZT0naW5uZXItc2lkZWJhcic+XG5cdFx0XHRcdDxkaXYgaWQ9J3NpZGUtc29ydGFibGVzJz5cblx0XHRcdFx0XHQ8ZGl2IGlkPSdzdWJtaXRkaXYnIGNsYXNzTmFtZT0ncG9zdGJveCBwb2RzLW5vLXRvZ2dsZSc+XG5cdFx0XHRcdFx0XHQ8aDM+XG5cdFx0XHRcdFx0XHRcdDxzcGFuPlxuXHRcdFx0XHRcdFx0XHRcdHtfXyggJ01hbmFnZScsICdwb2RzJyApfVxuXHRcdFx0XHRcdFx0XHRcdHsnXFx1MDBBMCcgLyogJm5ic3A7ICovfVxuXHRcdFx0XHRcdFx0XHRcdDxzbWFsbD5cblx0XHRcdFx0XHRcdFx0XHRcdCg8YSBocmVmPScvd3AtYWRtaW4vYWRtaW4ucGhwP3BhZ2U9cG9kcyZhbXA7YWN0aW9uPW1hbmFnZSc+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHtfXyggJ8KrIEJhY2sgdG8gTWFuYWdlJywgJ3BvZHMnICl9XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2E+KVxuXHRcdFx0XHRcdFx0XHRcdDwvc21hbGw+XG5cdFx0XHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHRcdDwvaDM+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT0naW5zaWRlJz5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9J3N1Ym1pdGJveCcgaWQ9J3N1Ym1pdHBvc3QnPlxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgaWQ9J21ham9yLXB1Ymxpc2hpbmctYWN0aW9ucyc+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGlkPSdkZWxldGUtYWN0aW9uJz5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGEgaHJlZj0nI25vdC1pbXBsZW1lbnRlZCcgY2xhc3NOYW1lPSdzdWJtaXRkZWxldGUgZGVsZXRpb24gcG9kcy1jb25maXJtJz5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7X18oICdEZWxldGUgUG9kJywgJ3BvZHMnICl9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBpZD0ncHVibGlzaGluZy1hY3Rpb24nPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8U3Bpbm5lciBpc1NhdmluZz17IHByb3BzLmlzU2F2aW5nIH0gLz5cblx0XHRcdFx0XHRcdFx0XHRcdFx0eydcXHUwMEEwJyAvKiAmbmJzcDsgKi99XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxidXR0b24gY2xhc3NOYW1lPSdidXR0b24tcHJpbWFyeScgdHlwZT0nc3VibWl0Jz5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7X18oICdTYXZlIFBvZCcsICdwb2RzJyApfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9J2NsZWFyJz48L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT0ncG9kcy1zdWJtaXR0YWJsZS1maWVsZHMnPlxuXHRcdFx0XHRcdFx0PGRpdiBpZD0nc2lkZS1zb3J0YWJsZXMnIGNsYXNzTmFtZT0nbWV0YS1ib3gtc29ydGFibGVzJz48L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn0gKTtcblxuY29uc3QgU3Bpbm5lciA9ICggcHJvcHMgKSA9PiB7XG5cdGlmICggcHJvcHMuaXNTYXZpbmcgKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxpbWcgc3JjPScvd3AtYWRtaW4vaW1hZ2VzL3dwc3Bpbl9saWdodC5naWYnIGFsdD0nJyAvPlxuXHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU1RPUkVfS0VZX0VESVRfUE9ELCB1aUNvbnN0YW50cyB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9hZG1pbi9lZGl0LXBvZC9zdG9yZS9jb25zdGFudHMnO1xuXG4vKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzICovXG4vLyBub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbmNvbnN0IHsgX18gfSA9IHdwLmkxOG47XG5jb25zdCB7IHdpdGhTZWxlY3QgfSA9IHdwLmRhdGE7XG5cbmV4cG9ydCBjb25zdCBTYXZlU3RhdHVzTWVzc2FnZSA9IHdpdGhTZWxlY3QoICggc2VsZWN0ICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHNhdmVTdGF0dXM6IHNlbGVjdCggU1RPUkVfS0VZX0VESVRfUE9EICkuZ2V0U2F2ZVN0YXR1cygpXG5cdH07XG59IClcbiggKCBwcm9wcyApID0+IHtcblx0c3dpdGNoICggcHJvcHMuc2F2ZVN0YXR1cyApIHtcblx0XHRjYXNlIHVpQ29uc3RhbnRzLnNhdmVTdGF0dXNlcy5TQVZJTkc6XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGlkPVwibWVzc2FnZVwiIGNsYXNzTmFtZT1cIm5vdGljZSBub3RpY2Utd2FybmluZ1wiPlxuXHRcdFx0XHRcdDxwPjxiPntfXyggJ1NhdmluZyBQb2QuLi4nLCAncG9kcycgKX08L2I+PC9wPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCk7XG5cblx0XHRjYXNlIHVpQ29uc3RhbnRzLnNhdmVTdGF0dXNlcy5TQVZFX1NVQ0NFU1M6XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGlkPVwibWVzc2FnZVwiIGNsYXNzTmFtZT1cInVwZGF0ZWQgZmFkZVwiPlxuXHRcdFx0XHRcdDxwPlxuXHRcdFx0XHRcdFx0PHN0cm9uZz57X18oICdTdWNjZXNzIScsICdwb2RzJyApfTwvc3Ryb25nPlxuXHRcdFx0XHRcdFx0eydcXHUwMEEwJyAvKiAmbmJzcDsgKi99XG5cdFx0XHRcdFx0XHR7X18oICdQb2Qgc2F2ZWQgc3VjY2Vzc2Z1bGx5LicsICdwb2RzJyApfVxuXHRcdFx0XHRcdDwvcD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQpO1xuXG5cdFx0Y2FzZSB1aUNvbnN0YW50cy5zYXZlU3RhdHVzZXMuU0FWRV9FUlJPUjpcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxkaXYgaWQ9XCJtZXNzYWdlXCIgY2xhc3NOYW1lPVwibm90aWNlIGVycm9yXCI+XG5cdFx0XHRcdFx0PHA+PGI+e19fKCAnU2F2ZSBFcnJvcicsICdwb2RzJyApfTwvYj48L3A+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0fVxufSApO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5jb25zdCB7IHVzZVN0YXRlIH0gPSBSZWFjdDtcblxuLyogV29yZFByZXNzIGRlcGVuZGVuY2llcyAqL1xuLy8gbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG5jb25zdCB7IF9fIH0gPSB3cC5pMThuO1xuXG5leHBvcnQgY29uc3QgUG9kc0RGVlNsdWdnYWJsZSA9ICggcHJvcHMgKSA9PiB7XG5cdGNvbnN0IFsgZWRpdGluZywgc2V0RWRpdGluZyBdID0gdXNlU3RhdGUoIGZhbHNlICk7XG5cdGNvbnN0IFsgbG9jYWxWYWx1ZSwgc2V0TG9jYWxWYWx1ZSBdID0gdXNlU3RhdGUoIHByb3BzLnZhbHVlICk7XG5cblx0Y29uc3QgaGFuZGxlVmFsdWVDaGFuZ2UgPSAoIG5ld1ZhbHVlICkgPT4ge1xuXHRcdHNldExvY2FsVmFsdWUoIG5ld1ZhbHVlICk7XG5cdH07XG5cblx0Y29uc3QgaGFuZGxlRWRpdENsaWNrID0gKCkgPT4ge1xuXHRcdHNldEVkaXRpbmcoIHRydWUgKTtcblx0fTtcblxuXHRjb25zdCBoYW5kbGVPa0NsaWNrID0gKCkgPT4ge1xuXHRcdHNldEVkaXRpbmcoIGZhbHNlICk7XG5cdFx0cHJvcHMudXBkYXRlVmFsdWUoIGxvY2FsVmFsdWUgKTtcblx0fTtcblxuXHRjb25zdCBoYW5kbGVDYW5jZWxDbGljayA9ICggZSApID0+IHtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0c2V0RWRpdGluZyggZmFsc2UgKTtcblx0XHRzZXRMb2NhbFZhbHVlKCBwcm9wcy52YWx1ZSApO1xuXHR9O1xuXG5cdGlmICggIWVkaXRpbmcgKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxOb3RFZGl0aW5nXG5cdFx0XHRcdHZhbHVlPXtwcm9wcy52YWx1ZX1cblx0XHRcdFx0aGFuZGxlRWRpdENsaWNrPXtoYW5kbGVFZGl0Q2xpY2t9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxFZGl0aW5nXG5cdFx0XHRcdHZhbHVlPXtsb2NhbFZhbHVlfVxuXHRcdFx0XHRoYW5kbGVWYWx1ZUNoYW5nZT17aGFuZGxlVmFsdWVDaGFuZ2V9XG5cdFx0XHRcdGhhbmRsZU9rQ2xpY2s9e2hhbmRsZU9rQ2xpY2t9XG5cdFx0XHRcdGhhbmRsZUNhbmNlbENsaWNrPXtoYW5kbGVDYW5jZWxDbGlja31cblx0XHRcdC8+XG5cdFx0KTtcblx0fVxufTtcblxuUG9kc0RGVlNsdWdnYWJsZS5wcm9wVHlwZXMgPSB7XG5cdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdHVwZGF0ZVZhbHVlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5jb25zdCBOb3RFZGl0aW5nID0gKCBwcm9wcyApID0+IHtcblx0cmV0dXJuIChcblx0XHQ8c3Bhbj5cblx0XHRcdDxlbVxuXHRcdFx0XHRvbkNsaWNrPXtwcm9wcy5oYW5kbGVFZGl0Q2xpY2t9XG5cdFx0XHRcdHN0eWxlPXt7IGN1cnNvcjogJ3BvaW50ZXInIH19PlxuXHRcdFx0XHR7cHJvcHMudmFsdWV9XG5cdFx0XHQ8L2VtPlxuXHRcdFx0eydcXHUwMEEwJyAvKiAmbmJzcDsgKi99XG5cdFx0XHQ8aW5wdXRcblx0XHRcdFx0dHlwZT0nYnV0dG9uJ1xuXHRcdFx0XHRjbGFzc05hbWU9J2VkaXQtc2x1Zy1idXR0b24gYnV0dG9uJ1xuXHRcdFx0XHR2YWx1ZT17X18oICdFZGl0JywgJ3BvZHMnICl9XG5cdFx0XHRcdG9uQ2xpY2s9e3Byb3BzLmhhbmRsZUVkaXRDbGlja31cblx0XHRcdC8+XG5cdFx0PC9zcGFuPlxuXHQpO1xufTtcblxuTm90RWRpdGluZy5wcm9wVHlwZXMgPSB7XG5cdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdGhhbmRsZUVkaXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuY29uc3QgRWRpdGluZyA9ICggcHJvcHMgKSA9PiB7XG5cdGNvbnN0IGhhbmRsZUZvY3VzID0gKCBlICkgPT4gZS50YXJnZXQuc2VsZWN0KCk7XG5cblx0cmV0dXJuIChcblx0XHQ8c3Bhbj5cblx0XHRcdDxpbnB1dFxuXHRcdFx0XHR0eXBlPSd0ZXh0J1xuXHRcdFx0XHRhdXRvRm9jdXNcblx0XHRcdFx0aWQ9J3BvZHMtZm9ybS11aS1uYW1lJ1xuXHRcdFx0XHRuYW1lPSduYW1lJ1xuXHRcdFx0XHRjbGFzc05hbWU9J3BvZHMtZm9ybS11aS1maWVsZCBwb2RzLWZvcm0tdWktZmllbGQtdHlwZS10ZXh0IHBvZHMtZm9ybS11aS1maWVsZC1uYW1lLW5hbWUnXG5cdFx0XHRcdHZhbHVlPXtwcm9wcy52YWx1ZX1cblx0XHRcdFx0b25DaGFuZ2U9eyggZSApID0+IHByb3BzLmhhbmRsZVZhbHVlQ2hhbmdlKCBlLnRhcmdldC52YWx1ZSApfVxuXHRcdFx0XHRvbkZvY3VzPXtoYW5kbGVGb2N1c31cblx0XHRcdFx0bWF4TGVuZ3RoPSc0Nidcblx0XHRcdFx0c2l6ZT0nMjUnXG5cdFx0XHQvPlxuXHRcdFx0eydcXHUwMEEwJyAvKiAmbmJzcDsgKi99XG5cdFx0XHQ8aW5wdXRcblx0XHRcdFx0dHlwZT0nYnV0dG9uJ1xuXHRcdFx0XHRjbGFzc05hbWU9J3NhdmUtYnV0dG9uIGJ1dHRvbidcblx0XHRcdFx0dmFsdWU9e19fKCAnT0snLCAncG9kcycgKX1cblx0XHRcdFx0b25DbGljaz17cHJvcHMuaGFuZGxlT2tDbGlja31cblx0XHRcdC8+XG5cdFx0XHR7J1xcdTAwQTAnIC8qICZuYnNwOyAqL31cblx0XHRcdDxhXG5cdFx0XHRcdGNsYXNzTmFtZT0nY2FuY2VsJ1xuXHRcdFx0XHRvbkNsaWNrPXtwcm9wcy5oYW5kbGVDYW5jZWxDbGlja30+XG5cdFx0XHRcdHtfXyggJ0NhbmNlbCcsICdwb2RzJyApfVxuXHRcdFx0PC9hPlxuXHRcdDwvc3Bhbj5cblx0KTtcbn07XG5cbkVkaXRpbmcucHJvcFR5cGVzID0ge1xuXHR2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRoYW5kbGVWYWx1ZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0aGFuZGxlT2tDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0aGFuZGxlQ2FuY2VsQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG4iLCJpbXBvcnQge1xuXHR1aUNvbnN0YW50cyxcblx0b3B0aW9uQ29uc3RhbnRzLFxuXHRncm91cENvbnN0YW50cyxcblx0cG9kTWV0YUNvbnN0YW50cyxcbn0gZnJvbSAncG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3N0b3JlL2NvbnN0YW50cyc7XG5cbi8vIFVJXG5leHBvcnQgY29uc3Qgc2V0QWN0aXZlVGFiID0gKCBhY3RpdmVUYWIgKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogdWlDb25zdGFudHMuYWN0aW9ucy5TRVRfQUNUSVZFX1RBQixcblx0XHRhY3RpdmVUYWJcblx0fTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRTYXZlU3RhdHVzID0gKCBzYXZlU3RhdHVzICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IHVpQ29uc3RhbnRzLmFjdGlvbnMuU0VUX1NBVkVfU1RBVFVTLFxuXHRcdHNhdmVTdGF0dXNcblx0fTtcbn07XG5cbi8vIE9wdGlvbnNcbmV4cG9ydCBjb25zdCBzZXRPcHRpb25WYWx1ZSA9ICggbmFtZSwgdmFsdWUgKSA9PiBzZXRPcHRpb25JdGVtVmFsdWUoIG5hbWUsICd2YWx1ZScsIHZhbHVlICk7XG5leHBvcnQgY29uc3Qgc2V0T3B0aW9uSXRlbVZhbHVlID0gKCBvcHRpb25OYW1lLCBpdGVtTmFtZSwgaXRlbVZhbHVlICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IG9wdGlvbkNvbnN0YW50cy5hY3Rpb25zLlNFVF9PUFRJT05fSVRFTV9WQUxVRSxcblx0XHRvcHRpb25OYW1lLFxuXHRcdGl0ZW1OYW1lLFxuXHRcdGl0ZW1WYWx1ZVxuXHR9O1xufTtcblxuLy8gR3JvdXBzXG5leHBvcnQgY29uc3QgcmVvcmRlckdyb3VwSXRlbSA9ICggb2xkSW5kZXgsIG5ld0luZGV4ICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IGdyb3VwQ29uc3RhbnRzLmFjdGlvbnMuUkVPUkRFUl9HUk9VUF9JVEVNLFxuXHRcdG9sZEluZGV4LFxuXHRcdG5ld0luZGV4XG5cdH07XG59O1xuXG4vLyBQb2QgbWV0YVxuZXhwb3J0IGNvbnN0IHNldFBvZE5hbWUgPSAoIG5hbWUgKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogcG9kTWV0YUNvbnN0YW50cy5hY3Rpb25zLlNFVF9QT0RfTkFNRSxcblx0XHRuYW1lXG5cdH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0UG9kTWV0YVZhbHVlID0gKCBrZXksIHZhbHVlICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IHBvZE1ldGFDb25zdGFudHMuYWN0aW9ucy5TRVRfUE9EX01FVEFfVkFMVUUsXG5cdFx0a2V5LFxuXHRcdHZhbHVlXG5cdH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IFNUT1JFX0tFWV9FRElUX1BPRCA9ICdwb2RzL2VkaXQtcG9kJztcblxuZXhwb3J0IGNvbnN0IHVpQ29uc3RhbnRzID0ge1xuXHRhY3Rpb25zOiB7XG5cdFx0U0VUX0FDVElWRV9UQUI6ICdTRVRfQUNUSVZFX1RBQicsXG5cdFx0U0VUX1NBVkVfU1RBVFVTOiAnU0VUX1NBVkVfU1RBVFVTJyxcblx0fSxcblxuXHR0YWJOYW1lczoge1xuXHRcdE1BTkFHRV9GSUVMRFM6ICdtYW5hZ2UtZmllbGRzJyxcblx0XHRMQUJFTFM6ICdsYWJlbHMnLFxuXHRcdEFETUlOX1VJOiAnYWRtaW4tdWknLFxuXHRcdEFEVkFOQ0VEX09QVElPTlM6ICdhZHZhbmNlZCcsXG5cdFx0QVVUT19URU1QTEFURV9PUFRJT05TOiAncG9kcy1wZmF0Jyxcblx0XHRSRVNUX0FQSTogJ3Jlc3QtYXBpJyxcblx0fSxcblxuXHRzYXZlU3RhdHVzZXM6IHtcblx0XHROT05FOiAnJyxcblx0XHRTQVZJTkc6ICdTQVZJTkcnLFxuXHRcdFNBVkVfU1VDQ0VTUzogJ1NBVkVfU1VDQ0VTUycsXG5cdFx0U0FWRV9FUlJPUjogJ1NBVkVfRVJST1InLFxuXHR9LFxufTtcblxuZXhwb3J0IGNvbnN0IG9wdGlvbkNvbnN0YW50cyA9IHtcblx0YWN0aW9uczoge1xuXHRcdFNFVF9PUFRJT05fSVRFTV9WQUxVRTogJ1NFVF9PUFRJT05fSVRFTV9WQUxVRScsXG5cdH0sXG59O1xuXG5leHBvcnQgY29uc3QgZ3JvdXBDb25zdGFudHMgPSB7XG5cdGFjdGlvbnM6IHtcblx0XHRSRU9SREVSX0dST1VQX0lURU06ICdSRU9SREVSX0dST1VQX0lURU0nLFxuXHR9LFxufTtcblxuZXhwb3J0IGNvbnN0IHBvZE1ldGFDb25zdGFudHMgPSB7XG5cdGFjdGlvbnM6IHtcblx0XHRTRVRfUE9EX05BTUU6ICdTRVRfUE9EX05BTUUnLFxuXHRcdFNFVF9QT0RfTUVUQV9WQUxVRTogJ1NFVF9QT0RfTUVUQV9WQUxVRScsXG5cdH0sXG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFVJU3RhdGUgPSB7XG5cdGFjdGl2ZVRhYjogdWlDb25zdGFudHMudGFiTmFtZXMuTUFOQUdFX0ZJRUxEUyxcblx0c2F2ZVN0YXR1czogdWlDb25zdGFudHMuc2F2ZVN0YXR1c2VzLk5PTkUsXG59O1xuIiwiaW1wb3J0ICogYXMgcGF0aHMgZnJvbSAnLi9zdGF0ZS1wYXRocyc7XG5cbmltcG9ydCB7XG5cdHVpQ29uc3RhbnRzLFxuXHRncm91cENvbnN0YW50cyxcblx0b3B0aW9uQ29uc3RhbnRzLFxuXHRwb2RNZXRhQ29uc3RhbnRzLFxuXHRpbml0aWFsVUlTdGF0ZSxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCB7IGNvbWJpbmVSZWR1Y2VycyB9ID0gd3AuZGF0YTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uXG5leHBvcnQgY29uc3Qgc2V0T2JqZWN0VmFsdWUgPSAoIG9iamVjdCwga2V5LCB2YWx1ZSApID0+IHtcblx0cmV0dXJuIHtcblx0XHQuLi5vYmplY3QsXG5cdFx0WyBrZXkgXTogdmFsdWVcblx0fTtcbn07XG5cbi8vIFVJXG5leHBvcnQgY29uc3QgdWkgPSAoIHN0YXRlID0gaW5pdGlhbFVJU3RhdGUsIGFjdGlvbiA9IHt9ICkgPT4ge1xuXHRjb25zdCB7IGFjdGlvbnMsIHNhdmVTdGF0dXNlcyB9ID0gdWlDb25zdGFudHM7XG5cblx0c3dpdGNoICggYWN0aW9uLnR5cGUgKSB7XG5cdFx0Y2FzZSBhY3Rpb25zLlNFVF9BQ1RJVkVfVEFCOlxuXHRcdFx0Ly8gVXNlIHRoZSBkZWZhdWx0IGlmIHRoZSB0YWIgbmFtZSBkb2Vzbid0IGV4aXN0XG5cdFx0XHRsZXQgbmV3VGFiID0gaW5pdGlhbFVJU3RhdGUuYWN0aXZlVGFiO1xuXHRcdFx0bGV0IHRhYkluZGV4ID0gcGF0aHMuVEFCX0xJU1QudGFpbEdldEZyb20oIHN0YXRlICkuaW5kZXhPZiggYWN0aW9uLmFjdGl2ZVRhYiApO1xuXG5cdFx0XHRpZiAoIC0xICE9PSB0YWJJbmRleCApIHtcblx0XHRcdFx0bmV3VGFiID0gYWN0aW9uLmFjdGl2ZVRhYjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Li4uc3RhdGUsXG5cdFx0XHRcdGFjdGl2ZVRhYjogbmV3VGFiXG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSBhY3Rpb25zLlNFVF9TQVZFX1NUQVRVUzpcblx0XHRcdGxldCBuZXdTdGF0dXMgPSBhY3Rpb24uc2F2ZVN0YXR1cztcblx0XHRcdGlmICggIU9iamVjdC52YWx1ZXMoIHNhdmVTdGF0dXNlcyApLmluY2x1ZGVzKCBuZXdTdGF0dXMgKSApIHtcblx0XHRcdFx0bmV3U3RhdHVzID0gaW5pdGlhbFVJU3RhdGUuc2F2ZVN0YXR1cztcblx0XHRcdH1cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRzYXZlU3RhdHVzOiBuZXdTdGF0dXNcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHN0YXRlO1xuXHR9XG59O1xuXG5leHBvcnQgY29uc3QgZ3JvdXBzID0gKCBzdGF0ZSA9IHt9LCBhY3Rpb24gPSB7fSApID0+IHtcblx0Y29uc3QgeyBhY3Rpb25zIH0gPSBncm91cENvbnN0YW50cztcblxuXHRpZiAoIGFjdGlvbnMuUkVPUkRFUl9HUk9VUF9JVEVNID09PSBhY3Rpb24udHlwZSApIHtcblx0XHRjb25zdCB7IG9sZEluZGV4LCBuZXdJbmRleCB9ID0gYWN0aW9uO1xuXG5cdFx0aWYgKCBudWxsID09PSBvbGRJbmRleCB8fCBudWxsID09PSBuZXdJbmRleCB8fCBvbGRJbmRleCA9PT0gbmV3SW5kZXggKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbmV3R3JvdXBMaXN0ID0gWyAuLi5wYXRocy5HUk9VUF9MSVNULnRhaWxHZXRGcm9tKCBzdGF0ZSApIF07XG5cdFx0bmV3R3JvdXBMaXN0LnNwbGljZSggbmV3SW5kZXgsIDAsIG5ld0dyb3VwTGlzdC5zcGxpY2UoIG9sZEluZGV4LCAxIClbIDAgXSApO1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFsgcGF0aHMuR1JPVVBfTElTVC50YWlsUGF0aCBdOiBuZXdHcm91cExpc3Rcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHN0YXRlO1xufTtcblxuZXhwb3J0IGNvbnN0IG9wdGlvbnMgPSAoIHN0YXRlID0ge30sIGFjdGlvbiA9IHt9ICkgPT4ge1xuXHRjb25zdCB7IGFjdGlvbnMgfSA9IG9wdGlvbkNvbnN0YW50cztcblxuXHRpZiAoIGFjdGlvbnMuU0VUX09QVElPTl9JVEVNX1ZBTFVFID09PSBhY3Rpb24udHlwZSApIHtcblx0XHRjb25zdCB7IG9wdGlvbk5hbWUsIGl0ZW1OYW1lLCBpdGVtVmFsdWUgfSA9IGFjdGlvbjtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3RhdGUsXG5cdFx0XHRbIG9wdGlvbk5hbWUgXTogc2V0T2JqZWN0VmFsdWUoIHN0YXRlWyBvcHRpb25OYW1lIF0sIGl0ZW1OYW1lLCBpdGVtVmFsdWUgKVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHN0YXRlO1xuXHR9XG59O1xuXG4vLyBQb2QgbWV0YVxuZXhwb3J0IGNvbnN0IHBvZE1ldGEgPSAoIHN0YXRlID0ge30sIGFjdGlvbiA9IHt9ICkgPT4ge1xuXHRjb25zdCB7IGFjdGlvbnMgfSA9IHBvZE1ldGFDb25zdGFudHM7XG5cblx0c3dpdGNoICggYWN0aW9uLnR5cGUgKSB7XG5cdFx0Y2FzZSBhY3Rpb25zLlNFVF9QT0RfTkFNRTpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRuYW1lOiBhY3Rpb24ubmFtZVxuXHRcdFx0fTtcblxuXHRcdGNhc2UgYWN0aW9ucy5TRVRfUE9EX01FVEFfVkFMVUU6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0WyBhY3Rpb24ua2V5IF06IGFjdGlvbi52YWx1ZVxuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gc3RhdGU7XG5cdH1cbn07XG5cbi8vIEZpZWxkc1xuZXhwb3J0IGNvbnN0IGZpZWxkcyA9ICggc3RhdGUgPSB7fSwgYWN0aW9uID0ge30gKSA9PiB7XG5cdHJldHVybiBzdGF0ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICggY29tYmluZVJlZHVjZXJzKCB7XG5cdHVpLFxuXHRwb2RNZXRhLFxuXHRvcHRpb25zLFxuXHRncm91cHMsXG5cdGZpZWxkcyxcbn0gKSApO1xuIiwiaW1wb3J0ICogYXMgcGF0aHMgZnJvbSAnLi9zdGF0ZS1wYXRocyc7XG5pbXBvcnQgeyB1aUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLy8gRXZlcnl0aGluZ1xuZXhwb3J0IGNvbnN0IGdldFN0YXRlID0gc3RhdGUgPT4gc3RhdGU7XG5cbi8vLS0gUG9kIG1ldGFcbmV4cG9ydCBjb25zdCBnZXRQb2ROYW1lID0gc3RhdGUgPT4ge1xuXHRyZXR1cm4gcGF0aHMuUE9EX05BTUUuZ2V0RnJvbSggc3RhdGUgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQb2RNZXRhVmFsdWUgPSAoIHN0YXRlLCBrZXkgKSA9PiB7XG5cdHJldHVybiBwYXRocy5QT0RfTUVUQS5nZXRGcm9tKCBzdGF0ZSApWyBrZXkgXTtcbn07XG5cbi8vLS0gVGFic1xuZXhwb3J0IGNvbnN0IGdldEFjdGl2ZVRhYiA9IHN0YXRlID0+IHBhdGhzLkFDVElWRV9UQUIuZ2V0RnJvbSggc3RhdGUgKTtcblxuZXhwb3J0IGNvbnN0IGdldFRhYiA9ICggc3RhdGUsIHRhYk5hbWUgKSA9PlxuXHRwYXRocy5UQUJTX0JZX05BTUUuZ2V0RnJvbSggc3RhdGUgKVsgdGFiTmFtZSBdO1xuXG5leHBvcnQgY29uc3QgZ2V0VGFiTGlzdCA9IHN0YXRlID0+XG5cdHBhdGhzLlRBQl9MSVNULmdldEZyb20oIHN0YXRlICk7XG5cbmV4cG9ydCBjb25zdCBnZXRUYWJzID0gc3RhdGUgPT5cblx0Z2V0VGFiTGlzdCggc3RhdGUgKS5tYXAoIHRhYk5hbWUgPT4gZ2V0VGFiKCBzdGF0ZSwgdGFiTmFtZSApICk7XG5cbmV4cG9ydCBjb25zdCBnZXRUYWJPcHRpb25MaXN0ID0gKCBzdGF0ZSwgdGFiTmFtZSApID0+XG5cdGdldFRhYiggc3RhdGUsIHRhYk5hbWUgKVsgcGF0aHMuVEFCX09QVElPTl9MSVNUIF07XG5cbmV4cG9ydCBjb25zdCBnZXRUYWJPcHRpb25zID0gKCBzdGF0ZSwgdGFiTmFtZSApID0+IHtcblx0cmV0dXJuIGdldFRhYk9wdGlvbkxpc3QoIHN0YXRlLCB0YWJOYW1lICkubWFwKFxuXHRcdG9wdGlvbk5hbWUgPT4gZ2V0T3B0aW9uKCBzdGF0ZSwgb3B0aW9uTmFtZSApXG5cdCk7XG59O1xuXG4vLy0tIFNhdmUgc3RhdHVzXG5leHBvcnQgY29uc3QgZ2V0U2F2ZVN0YXR1cyA9IHN0YXRlID0+IHBhdGhzLlNBVkVfU1RBVFVTLmdldEZyb20oIHN0YXRlICk7XG5cbmV4cG9ydCBjb25zdCBpc1NhdmluZyA9IHN0YXRlID0+XG5cdHBhdGhzLlNBVkVfU1RBVFVTLmdldEZyb20oIHN0YXRlICkgPT09IHVpQ29uc3RhbnRzLnNhdmVTdGF0dXNlcy5TQVZJTkc7XG5cbi8vLS0gT3B0aW9uc1xuZXhwb3J0IGNvbnN0IGdldE9wdGlvbiA9ICggc3RhdGUsIG9wdGlvbk5hbWUgKSA9PlxuXHRwYXRocy5PUFRJT05TLmdldEZyb20oIHN0YXRlIClbIG9wdGlvbk5hbWUgXTtcblxuZXhwb3J0IGNvbnN0IGdldE9wdGlvbkl0ZW1WYWx1ZSA9ICggc3RhdGUsIG9wdGlvbk5hbWUsIGl0ZW1OYW1lICkgPT5cblx0cGF0aHMuT1BUSU9OUy5nZXRGcm9tKCBzdGF0ZSApWyBvcHRpb25OYW1lIF1bIGl0ZW1OYW1lIF07XG5cbmV4cG9ydCBjb25zdCBnZXRPcHRpb25WYWx1ZSA9ICggc3RhdGUsIG9wdGlvbk5hbWUgKSA9PlxuXHRwYXRocy5PUFRJT05TLmdldEZyb20oIHN0YXRlIClbIG9wdGlvbk5hbWUgXS52YWx1ZTtcblxuLy8tLSBHcm91cHNcbmV4cG9ydCBjb25zdCBnZXRHcm91cExpc3QgPSBzdGF0ZSA9PlxuXHRwYXRocy5HUk9VUF9MSVNULmdldEZyb20oIHN0YXRlICk7XG5cbmV4cG9ydCBjb25zdCBnZXRHcm91cCA9ICggc3RhdGUsIGdyb3VwTmFtZSApID0+XG5cdHBhdGhzLkdST1VQU19CWV9OQU1FLmdldEZyb20oIHN0YXRlIClbIGdyb3VwTmFtZSBdO1xuXG5leHBvcnQgY29uc3QgZ2V0R3JvdXBzID0gc3RhdGUgPT5cblx0Z2V0R3JvdXBMaXN0KCBzdGF0ZSApLm1hcCggZ3JvdXBOYW1lID0+IGdldEdyb3VwKCBzdGF0ZSwgZ3JvdXBOYW1lICkgKTtcblxuZXhwb3J0IGNvbnN0IGdldEZpZWxkTGlzdCA9ICggc3RhdGUsIGdyb3VwTmFtZSApID0+XG5cdHBhdGhzLkdST1VQX0ZJRUxEX0xJU1QuZ2V0RnJvbSggc3RhdGUgKVsgZ3JvdXBOYW1lIF07XG5cbmV4cG9ydCBjb25zdCBnZXRHcm91cEZpZWxkcyA9ICggc3RhdGUsIGdyb3VwTmFtZSApID0+XG5cdGdldEZpZWxkTGlzdCggc3RhdGUsIGdyb3VwTmFtZSApLm1hcCggZmllbGROYW1lID0+IGdldEZpZWxkKCBzdGF0ZSwgZmllbGROYW1lICkgKTtcblxuLy8tLSBGaWVsZHNcbmV4cG9ydCBjb25zdCBnZXRGaWVsZHMgPSBzdGF0ZSA9PiBwYXRocy5GSUVMRFMuZ2V0RnJvbSggc3RhdGUgKTtcbmV4cG9ydCBjb25zdCBnZXRGaWVsZCA9ICggc3RhdGUsIGZpZWxkTmFtZSApID0+IGdldEZpZWxkcyggc3RhdGUgKVsgZmllbGROYW1lIF07XG4iLCJpbXBvcnQgeyB0YWlsIH0gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgdGFpbFBhdGggPSAoIGRvdFBhdGggKSA9PiB0YWlsKCBkb3RQYXRoLnNwbGl0KCAnLicgKSApLmpvaW4oICcuJyApO1xuXG5jb25zdCBjcmVhdGVUcmVlID0gKCB2YWx1ZSwgZG90UGF0aCApID0+IHtcblx0cmV0dXJuIGRvdFBhdGguc3BsaXQoICcuJyApLnJlZHVjZVJpZ2h0KFxuXHRcdCggYWNjLCBjdXJyZW50VmFsdWUgKSA9PiB7XG5cdFx0XHRyZXR1cm4geyBbIGN1cnJlbnRWYWx1ZSBdOiBhY2MgfTtcblx0XHR9LFxuXHRcdHZhbHVlXG5cdCk7XG59O1xuXG5jb25zdCBnZXRGcm9tID0gKCBzdGF0ZSwgZG90UGF0aCApID0+IHtcblx0cmV0dXJuIGRvdFBhdGguc3BsaXQoICcuJyApLnJlZHVjZSggKCB2YWx1ZSwgZWwgKSA9PiB2YWx1ZVsgZWwgXSwgc3RhdGUgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTdGF0ZVBhdGggPSBwYXRoID0+IHtcblx0cmV0dXJuIHtcblx0XHQvLyBwYXRoICd1aS50YWJzLnRhYkxpc3QnLCB0YWlsUGF0aDogJ3RhYnMudGFiTGlzdCdcblx0XHRwYXRoOiBwYXRoLFxuXHRcdHRhaWxQYXRoOiB0YWlsUGF0aCggcGF0aCApLFxuXG5cdFx0Z2V0RnJvbTogKCBzdGF0ZSwgZG90UGF0aCA9IHBhdGggKSA9PiB7XG5cdFx0XHRyZXR1cm4gZ2V0RnJvbSggc3RhdGUsIGRvdFBhdGggKTtcblx0XHR9LFxuXG5cdFx0dGFpbEdldEZyb206IHN0YXRlID0+IHtcblx0XHRcdHJldHVybiBnZXRGcm9tKCBzdGF0ZSwgdGFpbFBhdGgoIHBhdGggKSApO1xuXHRcdH0sXG5cblx0XHRjcmVhdGVUcmVlOiAoIHZhbHVlLCBkb3RQYXRoID0gcGF0aCApID0+IHtcblx0XHRcdHJldHVybiBjcmVhdGVUcmVlKCB2YWx1ZSwgZG90UGF0aCApO1xuXHRcdH0sXG5cblx0XHR0YWlsQ3JlYXRlVHJlZTogdmFsdWUgPT4ge1xuXHRcdFx0cmV0dXJuIGNyZWF0ZVRyZWUoIHZhbHVlLCB0YWlsUGF0aCggcGF0aCApICk7XG5cdFx0fSxcblx0fTtcbn07XG5cbmV4cG9ydCBjb25zdCBQT0RfTUVUQSA9IGNyZWF0ZVN0YXRlUGF0aCggJ3BvZE1ldGEnICk7XG5leHBvcnQgY29uc3QgUE9EX05BTUUgPSBjcmVhdGVTdGF0ZVBhdGgoIGAke1BPRF9NRVRBLnBhdGh9Lm5hbWVgICk7XG5leHBvcnQgY29uc3QgUE9EX0lEID0gY3JlYXRlU3RhdGVQYXRoKCBgJHtQT0RfTUVUQS5wYXRofS5pZGAgKTtcblxuZXhwb3J0IGNvbnN0IEZJRUxEUyA9IGNyZWF0ZVN0YXRlUGF0aCggJ2ZpZWxkcycgKTtcblxuZXhwb3J0IGNvbnN0IEdST1VQUyA9IGNyZWF0ZVN0YXRlUGF0aCggJ2dyb3VwcycgKTtcbmV4cG9ydCBjb25zdCBHUk9VUFNfQllfTkFNRSA9IGNyZWF0ZVN0YXRlUGF0aCggYCR7R1JPVVBTLnBhdGh9LmJ5TmFtZWAgKTtcblxuLy8gT3JkZXJlZCBsaXN0IG9mIGdyb3VwIG5hbWVzIGFzIGFuIGFycmF5OiBbICdncm91cDEnLCAnZ3JvdXAyJywgLi4uIF1cbmV4cG9ydCBjb25zdCBHUk9VUF9MSVNUID0gY3JlYXRlU3RhdGVQYXRoKCBgJHtHUk9VUFMucGF0aH0uZ3JvdXBMaXN0YCApO1xuXG4vLyBPbmUgdG8gbWFueSByZWxhdGlvbnNoaXA6XG4vLyB7ICdncm91cDEnOiBbICdmaWVsZDEnLCAnZmllbGQyJywgLi4uXSwgJ2dyb3VwMic6IFsuLi5dIH1cbmV4cG9ydCBjb25zdCBHUk9VUF9GSUVMRF9MSVNUID0gY3JlYXRlU3RhdGVQYXRoKCBgJHtHUk9VUFMucGF0aH0uZ3JvdXBGaWVsZExpc3RgICk7XG5cbmV4cG9ydCBjb25zdCBVSSA9IGNyZWF0ZVN0YXRlUGF0aCggJ3VpJyApO1xuZXhwb3J0IGNvbnN0IEFDVElWRV9UQUIgPSBjcmVhdGVTdGF0ZVBhdGgoIGAke1VJLnBhdGh9LmFjdGl2ZVRhYmAgKTtcbmV4cG9ydCBjb25zdCBTQVZFX1NUQVRVUyA9IGNyZWF0ZVN0YXRlUGF0aCggYCR7VUkucGF0aH0uc2F2ZVN0YXR1c2AgKTtcbmV4cG9ydCBjb25zdCBUQUJTID0gY3JlYXRlU3RhdGVQYXRoKCBgJHtVSS5wYXRofS50YWJzYCApO1xuXG4vLyBPcmRlcmVkIGxpc3Qgb2YgdGFiIG5hbWVzIGFzIGFuIGFycmF5OiBbICd0YWIxJywgJ3RhYjInLCAuLi4gXVxuZXhwb3J0IGNvbnN0IFRBQl9MSVNUID0gY3JlYXRlU3RhdGVQYXRoKCBgJHtUQUJTLnBhdGh9LnRhYkxpc3RgICk7XG5cbi8vIFRhYiBvYmplY3RzIGtleWVkIGJ5IHRhYiBuYW1lOlxuLy8geyB0YWIxOiB7dGFiIG9iamVjdH0sIHRhYjI6IHt0YWIgb2JqZWN0fSwgLi4ufVxuZXhwb3J0IGNvbnN0IFRBQlNfQllfTkFNRSA9IGNyZWF0ZVN0YXRlUGF0aCggYCR7VEFCUy5wYXRofS5ieU5hbWVgICk7XG5cbi8vIFBvZCBvcHRpb24gbGlzdCBrZXllZCBieSBvcHRpb24gbmFtZTpcbi8vIHsgY2FuX2V4cG9ydDoge29iamVjdH0sIHNob3dfdWk6IHtvYmplY3R9LCBldGMgfVxuZXhwb3J0IGNvbnN0IE9QVElPTlMgPSBjcmVhdGVTdGF0ZVBhdGgoICdvcHRpb25zJyApO1xuXG4vLyBPcmRlcmVkIGxpc3Qgb2Ygb3B0aW9uIG5hbWVzIGZvciB0aGlzIHRhYiBhcyBhbiBhcnJheTpcbi8vIFsgJ29wdGlvbjEnLCAnb3B0aW9uMicsIC4uLl1cbi8vIFN0b3JlZCBpbiB0aGUgdGFiIG9iamVjdHMgaW4gVEFCU19CWV9OQU1FXG5leHBvcnQgY29uc3QgVEFCX09QVElPTl9MSVNUID0gJ29wdGlvbkxpc3QnO1xuXG5cbiIsImltcG9ydCB7IG1lcmdlIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0ICogYXMgcGF0aHMgZnJvbSAnLi9zdGF0ZS1wYXRocyc7XG5pbXBvcnQgeyBTVE9SRV9LRVlfRURJVF9QT0QsIGluaXRpYWxVSVN0YXRlIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHJlZHVjZXIgZnJvbSAnLi9yZWR1Y2VyJztcbmltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICcuL3NlbGVjdG9ycyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5cbmNvbnN0IHsgcmVnaXN0ZXJTdG9yZSB9ID0gd3AuZGF0YTtcblxuZXhwb3J0IGNvbnN0IGluaXRTdG9yZSA9ICggcHJvcHMgKSA9PiB7XG5cdGNvbnN0IGluaXRpYWxTdGF0ZSA9IG1lcmdlKFxuXHRcdHBhdGhzLlVJLmNyZWF0ZVRyZWUoIGluaXRpYWxVSVN0YXRlICksXG5cdFx0cHJvcHNcblx0KTtcblxuXHRyZXR1cm4gcmVnaXN0ZXJTdG9yZSggU1RPUkVfS0VZX0VESVRfUE9ELCB7XG5cdFx0cmVkdWNlcjogcmVkdWNlcixcblx0XHRzZWxlY3RvcnM6IHNlbGVjdG9ycyxcblx0XHRhY3Rpb25zOiBhY3Rpb25zLFxuXHRcdGluaXRpYWxTdGF0ZTogaW5pdGlhbFN0YXRlLFxuXHR9ICk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IFBvZHNERlZCYXNlSW5wdXQgPSAoIHByb3BzICkgPT4ge1xuXG5cdC8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24gaWYgb25DaGFuZ2UgaXMgb21pdHRlZCBmcm9tIHByb3BzXG5cdGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSAoIGV2ZW50ICkge1xuXHRcdHByb3BzLnNldFZhbHVlKCBldmVudC50YXJnZXQudmFsdWUgKTtcblx0fVxuXG5cdC8vIG5vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuXHRyZXR1cm4gKFxuXHRcdDxpbnB1dFxuXHRcdFx0dHlwZT17IHByb3BzLnR5cGUgfVxuXHRcdFx0bmFtZT17IHByb3BzLmh0bWxBdHRyLm5hbWUgfVxuXHRcdFx0aWQ9eyBwcm9wcy5odG1sQXR0ci5pZCB9XG5cdFx0XHRjbGFzc05hbWU9eyBwcm9wcy5jbGFzc05hbWUgfVxuXHRcdFx0ZGF0YS1uYW1lLWNsZWFuPXsgcHJvcHMuaHRtbEF0dHIubmFtZV9jbGVhbiB9XG5cdFx0XHRwbGFjZWhvbGRlcj17IHByb3BzLmZpZWxkQ29uZmlnLnRleHRfcGxhY2Vob2xkZXIgfVxuXHRcdFx0bWF4TGVuZ3RoPXsgcHJvcHMuZmllbGRDb25maWcudGV4dF9tYXhfbGVuZ3RoIH1cblx0XHRcdHZhbHVlPXsgcHJvcHMudmFsdWUgfVxuXHRcdFx0cmVhZE9ubHk9eyAhIXByb3BzLmZpZWxkQ29uZmlnLnJlYWRvbmx5IH1cblx0XHRcdG9uQ2hhbmdlPXsgcHJvcHMub25DaGFuZ2UgfHwgaGFuZGxlQ2hhbmdlIH1cblx0XHRcdG9uQmx1cj17IHByb3BzLm9uQmx1ciB9XG5cdFx0XHRtaW49eyBwcm9wcy5taW4gfVxuXHRcdFx0bWF4PXsgcHJvcHMubWF4IH1cblx0XHQvPlxuXHQpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFBvZHNERlZWYWxpZGF0aW9uTWVzc2FnZXMgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29tcG9uZW50cy92YWxpZGF0aW9uLW1lc3NhZ2VzJztcbmltcG9ydCB7IHZhbGlkYXRpb25SdWxlcyB9IGZyb20gJ3BvZHMtZGZ2L3NyYy92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcnVsZXMnO1xuaW1wb3J0IHsgcG9kc1ZhbGlkYXRpb24gfSBmcm9tICdwb2RzLWRmdi9zcmMvdmFsaWRhdGlvbi92YWxpZGF0aW9uJztcbmNvbnN0IHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGU7XG5cbmV4cG9ydCBjb25zdCBQb2RzREZWRmllbGRDb250YWluZXIgPSAoIHByb3BzICkgPT4ge1xuXHRjb25zdCBGaWVsZCA9IHByb3BzLmZpZWxkQ29tcG9uZW50O1xuXHRjb25zdCBbIHZhbHVlLCBzZXRWYWx1ZSBdID0gdXNlU3RhdGUoIHByb3BzLmZpZWxkSXRlbURhdGFbIDAgXSB8fCAnJyApO1xuXHRjb25zdCB2YWxpZGF0aW9uID0gcG9kc1ZhbGlkYXRpb24oKTtcblx0Y29uc3QgdmFsaWRhdGlvbk1lc3NhZ2VzID0gdmFsaWRhdGlvbi51c2VWYWxpZGF0aW9uKCB2YWx1ZSApO1xuXG5cdHZhbGlkYXRpb24uYWRkUnVsZXMoIFtcblx0XHR7XG5cdFx0XHRydWxlOiB2YWxpZGF0aW9uUnVsZXMucmVxdWlyZWQoIHZhbHVlLCBwcm9wcy5maWVsZENvbmZpZy5sYWJlbCApLFxuXHRcdFx0Y29uZGl0aW9uOiAnMScgPT09IHByb3BzLmZpZWxkQ29uZmlnLnJlcXVpcmVkLFxuXHRcdH1cblx0XSApO1xuXG5cdGNvbnN0IGZpZWxkQ2xhc3NlcyA9IGNsYXNzTmFtZXMoXG5cdFx0cHJvcHMuaHRtbEF0dHIuY2xhc3MsXG5cdFx0eyAncG9kcy12YWxpZGF0ZS1lcnJvcic6IHZhbGlkYXRpb25NZXNzYWdlcy5sZW5ndGggfVxuXHQpO1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJwb2RzLWRmdi1jb250YWluZXJcIj5cblx0XHRcdDxGaWVsZFxuXHRcdFx0XHR2YWx1ZT17dmFsdWV9XG5cdFx0XHRcdHNldFZhbHVlPXtzZXRWYWx1ZX1cblx0XHRcdFx0dmFsaWRhdGlvbj17dmFsaWRhdGlvbn1cblx0XHRcdFx0Y2xhc3NOYW1lPXtmaWVsZENsYXNzZXN9XG5cdFx0XHRcdHsuLi5wcm9wc31cblx0XHRcdC8+XG5cdFx0XHQ8UG9kc0RGVlZhbGlkYXRpb25NZXNzYWdlcyBtZXNzYWdlcz17dmFsaWRhdGlvbk1lc3NhZ2VzfSAvPlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBIZWxwVG9vbHRpcCB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb21wb25lbnRzL2hlbHAtdG9vbHRpcCc7XG5cblxuZXhwb3J0IGNvbnN0IFBvZHNGaWVsZE9wdGlvbiA9ICggcHJvcHMgKSA9PiB7XG5cdGNvbnN0IHsgZmllbGRUeXBlLCBuYW1lLCB2YWx1ZSwgbGFiZWwsIG9uQ2hhbmdlLCBoZWxwVGV4dCB9ID0gcHJvcHM7XG5cblx0Y29uc3QgdG9Cb29sID0gKCBzdHJpbmdPck51bWJlciApID0+IHtcblx0XHQvLyBGb3JjZSBhbnkgc3RyaW5ncyB0byBudW1lcmljIGZpcnN0XG5cdFx0cmV0dXJuICEhKCArc3RyaW5nT3JOdW1iZXIgKTtcblx0fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPSdwb2RzLWZpZWxkLW9wdGlvbic+XG5cdFx0XHQ8bGFiZWxcblx0XHRcdFx0Y2xhc3NOYW1lPXtgcG9kcy1mb3JtLXVpLWxhYmVsIHBvZHMtZm9ybS11aS1sYWJlbC0ke25hbWV9YH1cblx0XHRcdFx0aHRtbEZvcj17bmFtZX0+XG5cdFx0XHRcdHtsYWJlbH1cblx0XHRcdFx0e2hlbHBUZXh0ICYmICggJ2hlbHAnICE9PSBoZWxwVGV4dCApICYmICggPEhlbHBUb29sdGlwIGhlbHBUZXh0PXtoZWxwVGV4dH0vPiApfVxuXHRcdFx0PC9sYWJlbD5cblx0XHRcdHsnYm9vbGVhbicgPT09IGZpZWxkVHlwZSA/XG5cdFx0XHRcdCggPGlucHV0XG5cdFx0XHRcdFx0dHlwZT0nY2hlY2tib3gnXG5cdFx0XHRcdFx0aWQ9e25hbWV9XG5cdFx0XHRcdFx0bmFtZT17bmFtZX1cblx0XHRcdFx0XHRjaGVja2VkPXt0b0Jvb2woIHZhbHVlICl9XG5cdFx0XHRcdFx0b25DaGFuZ2U9e29uQ2hhbmdlfVxuXHRcdFx0XHQvPiApIDpcblx0XHRcdFx0KCA8aW5wdXRcblx0XHRcdFx0XHR0eXBlPSd0ZXh0J1xuXHRcdFx0XHRcdGlkPXtuYW1lfVxuXHRcdFx0XHRcdG5hbWU9e25hbWV9XG5cdFx0XHRcdFx0dmFsdWU9e3ZhbHVlfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtvbkNoYW5nZX1cblx0XHRcdFx0Lz4gKVxuXHRcdFx0fVxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuUG9kc0ZpZWxkT3B0aW9uLnByb3BUeXBlcyA9IHtcblx0ZmllbGRUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0dmFsdWU6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcblx0bGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0b25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGhlbHBUZXh0OiBQcm9wVHlwZXMuYW55LFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCB7IFRvb2x0aXAsIERhc2hpY29uIH0gPSB3cC5jb21wb25lbnRzO1xuXG5leHBvcnQgY29uc3QgSGVscFRvb2x0aXAgPSAoIHByb3BzICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdDxUb29sdGlwIHRleHQ9e3Byb3BzLmhlbHBUZXh0fT5cblx0XHRcdDxzcGFuPlxuXHRcdFx0XHQ8RGFzaGljb24gaWNvbj0nZWRpdG9yLWhlbHAnIC8+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0PC9Ub29sdGlwPlxuXHQpO1xufTtcblxuSGVscFRvb2x0aXAucHJvcFR5cGVzID0ge1xuXHRoZWxwVGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmV4cG9ydCBjb25zdCBQb2RzTmF2VGFiID0gKCBwcm9wcyApID0+IHtcblx0Y29uc3QgZ2V0Q2xhc3NOYW1lID0gKCB0YWJOYW1lICkgPT4ge1xuXHRcdHJldHVybiBjbGFzc05hbWVzKFxuXHRcdFx0J25hdi10YWIgcG9kcy1uYXYtdGFiLWxpbmsnLFxuXHRcdFx0eyAnbmF2LXRhYi1hY3RpdmUnOiAoIHRhYk5hbWUgPT09IHByb3BzLmFjdGl2ZVRhYiApIH1cblx0XHQpO1xuXHR9O1xuXG5cdGNvbnN0IGhhbmRsZUNsaWNrID0gKCBlLCB0YWJOYW1lICkgPT4ge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRwcm9wcy5zZXRBY3RpdmVUYWIoIHRhYk5hbWUgKTtcblx0fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxoMiBjbGFzc05hbWU9J25hdi10YWItd3JhcHBlciBwb2RzLW5hdi10YWJzJz5cblx0XHRcdHtwcm9wcy50YWJzLm1hcCggdGhpc1RhYiA9PiAoXG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0a2V5PXt0aGlzVGFiLm5hbWV9XG5cdFx0XHRcdFx0aHJlZj17YCNwb2RzLSR7dGhpc1RhYi5uYW1lfWB9XG5cdFx0XHRcdFx0Y2xhc3NOYW1lPXtnZXRDbGFzc05hbWUoIHRoaXNUYWIubmFtZSApfVxuXHRcdFx0XHRcdG9uQ2xpY2s9eyggZSApID0+IGhhbmRsZUNsaWNrKCBlLCB0aGlzVGFiLm5hbWUgKX0+XG5cdFx0XHRcdFx0e3RoaXNUYWIudGl0bGVUZXh0fVxuXHRcdFx0XHQ8L2E+XG5cdFx0XHQpICl9XG5cdFx0PC9oMj5cblx0KTtcbn07XG5cblBvZHNOYXZUYWIucHJvcFR5cGVzID0ge1xuXHR0YWJzOiBQcm9wVHlwZXMuYXJyYXlPZiggUHJvcFR5cGVzLnNoYXBlKCB7XG5cdFx0bmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblx0XHR0aXRsZVRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cdH0gKSApLmlzUmVxdWlyZWQsXG5cdGFjdGl2ZVRhYjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRzZXRBY3RpdmVUYWI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgUG9kc0RGVlZhbGlkYXRpb25NZXNzYWdlID0gKCBwcm9wcyApID0+IHtcblx0cmV0dXJuICggPGRpdiBjbGFzc05hbWU9XCJub3RpY2Ugbm90aWNlLWVycm9yXCI+e3Byb3BzLm1lc3NhZ2V9PC9kaXY+ICk7XG59O1xuXG5leHBvcnQgY29uc3QgUG9kc0RGVlZhbGlkYXRpb25NZXNzYWdlcyA9ICggcHJvcHMgKSA9PiB7XG5cdHJldHVybiBwcm9wcy5tZXNzYWdlcy5tYXAoIHRoaXNNZXNzYWdlID0+IHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PFBvZHNERlZWYWxpZGF0aW9uTWVzc2FnZVxuXHRcdFx0XHRrZXk9e3RoaXNNZXNzYWdlfVxuXHRcdFx0XHRtZXNzYWdlPXt0aGlzTWVzc2FnZX1cblx0XHRcdC8+XG5cdFx0KTtcblx0fSApO1xufTtcbiIsIi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUsIHdwLCBQb2RzSTE4biAqL1xuXG4vKipcbiAqIEEgZnJhbWUgZm9yIGRpc3BsYXlpbmcgYSBtb2RhbCBwb3B1cCB3aXRoIGlmcmFtZSBjb250ZW50XG4gKlxuICogQGF1Z21lbnRzIHdwLm1lZGlhLnZpZXcuRnJhbWVcbiAqL1xuZXhwb3J0IGNvbnN0IFBvZHNERlZNb2RhbCA9IHdwLm1lZGlhLnZpZXcuTW9kYWwuZXh0ZW5kKCB7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAqIEByZXR1cm5zIHt3cC5tZWRpYS52aWV3Lk1vZGFsfSBSZXR1cm5zIGl0c2VsZiB0byBhbGxvdyBjaGFpbmluZ1xuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblx0XHRjb25zdCByZXRWYWwgPSB3cC5tZWRpYS52aWV3Lk1vZGFsLnByb3RvdHlwZS5jbG9zZS5hcHBseSggdGhpcywgb3B0aW9ucyApO1xuXG5cdFx0Ly8gQWxlcnQgdGhlIGxpc3RlbmluZyBjb250cm9sIHdoZW4gd2UndmUgYmVlbiBjYW5jZWxsZWRcblx0XHRpZiAoIG9wdGlvbnMgJiYgb3B0aW9ucy5lc2NhcGUgKSB7XG5cdFx0XHR3aW5kb3cucGFyZW50LmpRdWVyeSggd2luZG93LnBhcmVudCApLnRyaWdnZXIoICdkZnY6bW9kYWw6Y2FuY2VsJyApO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXRWYWw7XG5cdH1cblxufSApO1xuIiwiLyoqXG4gKiBOb3RlOiBObyBjaGVja2luZyBpcyBkb25lIGhlcmUgdG8gbWFrZSBzdXJlIHdlJ3JlIGluIGEgbW9kYWwgYW5kIHRoYXRcbiAqIEd1dGVuYmVyZyBpcyBhY3R1YWxseSBsb2FkZWQuICBDb25zdW1pbmcgY29kZSBtdXN0IG1ha2Ugc3VyZSB0aGUgaW1wbGljaXRcbiAqIEd1dGVuYmVyZyBkZXBlbmRlbmNpZXMgZXhpc3QgKHByaW1hcmlseSB3cC5kYXRhKSBiZWZvcmUgY2FsbGluZyB0aHJvdWdoXG4gKiB0byBpbml0KCkuXG4gKi9cblxuLy8gVGhlIGd1YXJkIGluIGZyb250IGlzIHRvIGVuc3VyZSB3cC5kYXRhIGV4aXN0cyBiZWZvcmUgYWNjZXNzaW5nIHNlbGVjdFxuY29uc3QgZWRpdG9yRGF0YSA9IHdwLmRhdGEgJiYgd3AuZGF0YS5zZWxlY3QoICdjb3JlL2VkaXRvcicgKTtcbmxldCB1blN1YnNjcmliZTtcblxuLyoqXG4gKiBpbml0KCkgaXMgdGhlIG9ubHkgZXhwb3NlZCBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGNvbnN0IFBvZHNHYk1vZGFsTGlzdGVuZXIgPSB7XG5cdGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIGVkaXRvckRhdGEuaXNDdXJyZW50UG9zdFB1Ymxpc2hlZCgpICkge1xuXHRcdFx0Ly8gUG9zdCBpcyBwdWJsaXNoZWQsIHRoaXMgaXMgYW4gZWRpdFxuXHRcdFx0dW5TdWJzY3JpYmUgPSB3cC5kYXRhLnN1YnNjcmliZSggc2F2ZUxpc3RlbmVyICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFVucHVibGlzaGVkIHBvc3QsIHRoaXMgaXMgYW4gXCJhZGQgbmV3XCIgbW9kYWxcblx0XHRcdHVuU3Vic2NyaWJlID0gd3AuZGF0YS5zdWJzY3JpYmUoIHB1Ymxpc2hMaXN0ZW5lciApO1xuXHRcdH1cblx0fVxufTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBIZWxwZXIgZnVuY3Rpb25zLCBub3QgZXh0ZXJuYWxseSBleHBvc2VkXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKlxuICogQHJldHVybiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ2V0RmVhdHVyZWRJbWFnZVVSTCAoKSB7XG5cdGNvbnN0IGZlYXR1cmVkSW1hZ2VJZCA9IGVkaXRvckRhdGEuZ2V0Q3VycmVudFBvc3RBdHRyaWJ1dGUoICdmZWF0dXJlZF9tZWRpYScgKTtcblx0bGV0IHVybCA9ICcnO1xuXG5cdC8vIEVhcmx5IGV4aXQgaWYgbm90aGluZyB3YXMgc2V0XG5cdGlmICggIWZlYXR1cmVkSW1hZ2VJZCApIHtcblx0XHRyZXR1cm4gdXJsO1xuXHR9XG5cblx0Y29uc3QgbWVkaWEgPSB3cC5kYXRhLnNlbGVjdCggJ2NvcmUnICkuZ2V0TWVkaWEoIGZlYXR1cmVkSW1hZ2VJZCApO1xuXG5cdGlmICggbWVkaWEgKSB7XG5cdFx0Y29uc3QgbWVkaWFTaXplID0gd3AuaG9va3MuYXBwbHlGaWx0ZXJzKCAnZWRpdG9yLlBvc3RGZWF0dXJlZEltYWdlLmltYWdlU2l6ZScsICdwb3N0LXRodW1ibmFpbCcsICcnICk7XG5cdFx0aWYgKCBtZWRpYS5tZWRpYV9kZXRhaWxzICYmIG1lZGlhLm1lZGlhX2RldGFpbHMuc2l6ZXMgJiYgbWVkaWEubWVkaWFfZGV0YWlscy5zaXplc1sgbWVkaWFTaXplIF0gKSB7XG5cdFx0XHR1cmwgPSBtZWRpYS5tZWRpYV9kZXRhaWxzLnNpemVzWyBtZWRpYVNpemUgXS5zb3VyY2VfdXJsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR1cmwgPSBtZWRpYS5zb3VyY2VfdXJsO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogSGFuZGxlcyBcImFkZCBuZXdcIiBtb2RhbHNcbiAqL1xuZnVuY3Rpb24gcHVibGlzaExpc3RlbmVyICgpIHtcblxuXHRpZiAoIGVkaXRvckRhdGEuaXNDdXJyZW50UG9zdFB1Ymxpc2hlZCgpICkge1xuXHRcdHVuU3Vic2NyaWJlKCk7XG5cblx0XHR0cmlnZ2VyVXBkYXRlRXZlbnQoIHtcblx0XHRcdCdpY29uJzogZ2V0RmVhdHVyZWRJbWFnZVVSTCgpLFxuXHRcdFx0J2xpbmsnOiBlZGl0b3JEYXRhLmdldFBlcm1hbGluaygpLFxuXHRcdFx0J2VkaXRfbGluayc6IGBwb3N0LnBocD9wb3N0PSR7ZWRpdG9yRGF0YS5nZXRDdXJyZW50UG9zdElkKCl9JmFjdGlvbj1lZGl0JnBvZHNfbW9kYWw9MWAsXG5cdFx0XHQnc2VsZWN0ZWQnOiB0cnVlIC8vIEF1dG9tYXRpY2FsbHkgc2VsZWN0IGFkZCBuZXcgcmVjb3Jkc1xuXHRcdH0gKTtcblx0fVxufVxuXG4vKipcbiAqIEhhbmRsZXMgXCJlZGl0IGV4aXN0aW5nXCIgbW9kYWxzXG4gKi9cbmZ1bmN0aW9uIHNhdmVMaXN0ZW5lciAoKSB7XG5cblx0aWYgKCBzYXZlTGlzdGVuZXIud2FzU2F2aW5nICkge1xuXG5cdFx0Ly8gVGhlIHdhc1NhdmluZyBmbGFnIGFscmVhZHkgaWdub3JlcyBhdXRvc2F2ZSBzbyB3ZSBvbmx5IG5lZWQgdG9cblx0XHQvLyBjaGVjayBpc1NhdmluZ1Bvc3QoKVxuXHRcdGlmICggIWVkaXRvckRhdGEuaXNTYXZpbmdQb3N0KCkgKSB7XG5cblx0XHRcdC8vIEN1cnJlbnRseSBvbiBzYXZlIGZhaWx1cmUgd2UnbGwgcmVtYWluIHN1YnNjcmliZWQgYW5kIHRyeVxuXHRcdFx0Ly8gbGlzdGVuaW5nIGZvciB0aGUgbmV4dCBzYXZlIGF0dGVtcHRcblx0XHRcdHNhdmVMaXN0ZW5lci53YXNTYXZpbmcgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBlZGl0b3JEYXRhLmRpZFBvc3RTYXZlUmVxdWVzdFN1Y2NlZWQoKSApIHtcblx0XHRcdFx0dW5TdWJzY3JpYmUoKTtcblx0XHRcdFx0dHJpZ2dlclVwZGF0ZUV2ZW50KCB7XG5cdFx0XHRcdFx0J2ljb24nOiBnZXRGZWF0dXJlZEltYWdlVVJMKClcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRzYXZlTGlzdGVuZXIud2FzU2F2aW5nID0gaXNVc2VyU2F2aW5nKCk7XG5cdH1cbn1cblxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCBhbiBhY3RpdmUgc2F2ZSBpcyBpbiBwcm9ncmVzcyBkdWUgdG8gdXNlciBhY3Rpb24gKGlnbm9yZSBhdXRvc2F2ZXMpXG4gKlxuICogQHJldHVybiBib29sZWFuXG4gKi9cbmZ1bmN0aW9uIGlzVXNlclNhdmluZyAoKSB7XG5cdHJldHVybiAhISggZWRpdG9yRGF0YS5pc1NhdmluZ1Bvc3QoKSAmJiAhZWRpdG9yRGF0YS5pc0F1dG9zYXZpbmdQb3N0KCkgKTtcbn1cblxuLyoqXG4gKiBUaGUgZXZlbnQgbGlzdGVuZXIgaW4gdGhlIHBhcmVudCB3aW5kb3cgd2lsbCB0YWtlIGNhcmUgb2YgY2xvc2luZyB0aGUgbW9kYWxcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlclVwZGF0ZUV2ZW50ICggb3B0aW9uYWxEYXRhICkge1xuXHRjb25zdCBkZWZhdWx0RGF0YSA9IHtcblx0XHQnaWQnOiBlZGl0b3JEYXRhLmdldEN1cnJlbnRQb3N0SWQoKSxcblx0XHQnbmFtZSc6IGVkaXRvckRhdGEuZ2V0Q3VycmVudFBvc3RBdHRyaWJ1dGUoICd0aXRsZScgKVxuXHR9O1xuXHRjb25zdCBwb3N0RGF0YSA9IE9iamVjdC5hc3NpZ24oIGRlZmF1bHREYXRhLCBvcHRpb25hbERhdGEgKTtcblxuXHR3aW5kb3cucGFyZW50LmpRdWVyeSggd2luZG93LnBhcmVudCApLnRyaWdnZXIoICdkZnY6bW9kYWw6dXBkYXRlJywgcG9zdERhdGEgKTtcbn1cbiIsIi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUsIHdwLCBQb2RzSTE4biAqL1xuXG5pbXBvcnQgeyBQb2RzREZWTW9kYWwgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29yZS9kZnYtbW9kYWwnO1xuXG4vKipcbiAqIEEgZnJhbWUgZm9yIGRpc3BsYXlpbmcgYSBtb2RhbCBwb3B1cCB3aXRoIGlmcmFtZSBjb250ZW50XG4gKlxuICogQGF1Z21lbnRzIHdwLm1lZGlhLnZpZXcuRnJhbWVcbiAqL1xuZXhwb3J0IGNvbnN0IElmcmFtZUZyYW1lID0gd3AubWVkaWEudmlldy5GcmFtZS5leHRlbmQoIHtcblx0Y2xhc3NOYW1lOiAncG9kcy1tb2RhbC1mcmFtZScsXG5cblx0dGVtcGxhdGU6IF8udGVtcGxhdGUoICc8ZGl2IGNsYXNzPVwibWVkaWEtZnJhbWUtdGl0bGVcIiAvPjxkaXYgY2xhc3M9XCJtZWRpYS1mcmFtZS1pZnJhbWVcIiAvPicgKSxcblxuXHRyZWdpb25zOiBbICd0aXRsZScsICdpZnJhbWUnIF0sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuXHRcdHdwLm1lZGlhLnZpZXcuRnJhbWUucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXG5cdFx0Ly8gRW5zdXJlIGNvcmUgVUkgaXMgZW5hYmxlZC5cblx0XHR0aGlzLiRlbC5hZGRDbGFzcyggJ3dwLWNvcmUtdWknICk7XG5cblx0XHR0aGlzLmluaXRTdGF0ZSgpO1xuXHRcdHRoaXMuaW5pdE1vZGFsKCk7XG5cblx0XHR0aGlzLm9uKCAnaWZyYW1lOmNyZWF0ZTpkZWZhdWx0JywgdGhpcy5pZnJhbWVDb250ZW50LCB0aGlzICk7XG5cdFx0dGhpcy5pZnJhbWUubW9kZSggJ2RlZmF1bHQnICk7XG5cblx0XHR0aGlzLm9uKCAndGl0bGU6Y3JlYXRlOmRlZmF1bHQnLCB0aGlzLmNyZWF0ZVRpdGxlLCB0aGlzICk7XG5cdFx0dGhpcy50aXRsZS5tb2RlKCAnZGVmYXVsdCcgKTtcblx0XHR0aGlzLm9uKCAndGl0bGU6cmVuZGVyJywgZnVuY3Rpb24gKCB2aWV3ICkge1xuXHRcdFx0dmlldy4kZWwuYXBwZW5kKCAnPHNwYW4gY2xhc3M9XCJkYXNoaWNvbnMgZGFzaGljb25zLWFycm93LWRvd25cIj48L3NwYW4+JyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRpbml0U3RhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zdCB0aXRsZSA9IHRoaXMub3B0aW9ucy50aXRsZSB8fCBQb2RzSTE4bi5fXyggJ0FkZCBOZXcgUmVjb3JkJyApO1xuXHRcdGNvbnN0IHNyYyA9IHRoaXMub3B0aW9ucy5zcmMgfHwgJy8nO1xuXG5cdFx0dGhpcy5zdGF0ZXMuYWRkKCBbXG5cdFx0XHRuZXcgd3AubWVkaWEuY29udHJvbGxlci5TdGF0ZSgge1xuXHRcdFx0XHRpZDogJ2RlZmF1bHQnLFxuXHRcdFx0XHR0aXRsZTogdGl0bGUsXG5cdFx0XHRcdHNyYzogc3JjXG5cdFx0XHR9IClcblx0XHRdICk7XG5cblx0XHR0aGlzLm9wdGlvbnMuc3RhdGUgPSAnZGVmYXVsdCc7XG5cdH0sXG5cblx0aW5pdE1vZGFsOiBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5tb2RhbCA9IG5ldyBQb2RzREZWTW9kYWwoIHtcblx0XHRcdGNvbnRyb2xsZXI6IHRoaXNcblx0XHR9ICk7XG5cblx0XHR0aGlzLm1vZGFsLmNvbnRlbnQoIHRoaXMgKTtcblx0fSxcblxuXHRyZW5kZXI6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBBY3RpdmF0ZSB0aGUgZGVmYXVsdCBzdGF0ZSBpZiBubyBhY3RpdmUgc3RhdGUgZXhpc3RzLlxuXHRcdGlmICggIXRoaXMuc3RhdGUoKSAmJiB0aGlzLm9wdGlvbnMuc3RhdGUgKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKCB0aGlzLm9wdGlvbnMuc3RhdGUgKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBjYWxsICdyZW5kZXInIGRpcmVjdGx5IG9uIHRoZSBwYXJlbnQgY2xhc3Ncblx0XHQgKi9cblx0XHRyZXR1cm4gd3AubWVkaWEudmlldy5GcmFtZS5wcm90b3R5cGUucmVuZGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fSxcblxuXHQvKipcblx0ICogQHBhcmFtIHtPYmplY3R9IGNvbnRlbnRcblx0ICogQHRoaXMgd3AubWVkaWEuY29udHJvbGxlci5SZWdpb25cblx0ICovXG5cdGlmcmFtZUNvbnRlbnQ6IGZ1bmN0aW9uICggY29udGVudCApIHtcblx0XHRjb250ZW50LnZpZXcgPSBuZXcgd3AubWVkaWEudmlldy5JZnJhbWUoIHtcblx0XHRcdGNvbnRyb2xsZXI6IHRoaXNcblx0XHR9ICk7XG5cdH0sXG5cblx0Y3JlYXRlVGl0bGU6IGZ1bmN0aW9uICggdGl0bGUgKSB7XG5cdFx0dGl0bGUudmlldyA9IG5ldyB3cC5tZWRpYS5WaWV3KCB7XG5cdFx0XHRjb250cm9sbGVyOiB0aGlzLFxuXHRcdFx0dGFnTmFtZTogJ2gxJ1xuXHRcdH0gKTtcblx0fVxufSApO1xuIiwiLypnbG9iYWwgalF1ZXJ5LCBfLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSAqL1xuZXhwb3J0IGNvbnN0IFBvZHNERlZGaWVsZE1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKCB7XG5cdGRlZmF1bHRzOiB7XG5cdFx0aHRtbEF0dHI6IHt9LFxuXHRcdGZpZWxkQ29uZmlnOiB7fVxuXHR9XG59ICk7XG4iLCIvKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlICovXG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IFBvZHNGaWVsZExpc3RWaWV3ID0gTWFyaW9uZXR0ZS5Db2xsZWN0aW9uVmlldy5leHRlbmQoIHtcblx0Y2hpbGRWaWV3RXZlbnRQcmVmaXg6IGZhbHNlLCAvLyBEaXNhYmxlIGltcGxpY2l0IGV2ZW50IGxpc3RlbmVycyBpbiBmYXZvciBvZiBleHBsaWNpdCBjaGlsZFZpZXdUcmlnZ2VycyBhbmQgY2hpbGRWaWV3RXZlbnRzXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXHRcdHRoaXMuZmllbGRNb2RlbCA9IG9wdGlvbnMuZmllbGRNb2RlbDtcblx0XHR0aGlzLmNoaWxkVmlld09wdGlvbnMgPSB7IGZpZWxkTW9kZWw6IG9wdGlvbnMuZmllbGRNb2RlbCB9O1xuXHR9XG59ICk7XG5cbi8qKlxuICogQGV4dGVuZHMgQmFja2JvbmUuVmlld1xuICovXG5leHBvcnQgY29uc3QgUG9kc0ZpZWxkVmlldyA9IE1hcmlvbmV0dGUuVmlldy5leHRlbmQoIHtcblx0Y2hpbGRWaWV3RXZlbnRQcmVmaXg6IGZhbHNlLCAvLyBEaXNhYmxlIGltcGxpY2l0IGV2ZW50IGxpc3RlbmVycyBpbiBmYXZvciBvZiBleHBsaWNpdCBjaGlsZFZpZXdUcmlnZ2VycyBhbmQgY2hpbGRWaWV3RXZlbnRzXG5cblx0c2VyaWFsaXplRGF0YTogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IGZpZWxkTW9kZWwgPSB0aGlzLm9wdGlvbnMuZmllbGRNb2RlbDtcblx0XHRsZXQgZGF0YSA9IHRoaXMubW9kZWwgPyB0aGlzLm1vZGVsLnRvSlNPTigpIDoge307XG5cblx0XHRkYXRhLmh0bWxBdHRyID0gZmllbGRNb2RlbC5nZXQoICdodG1sQXR0cicgKTtcblx0XHRkYXRhLmZpZWxkQ29uZmlnID0gZmllbGRNb2RlbC5nZXQoICdmaWVsZENvbmZpZycgKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG59ICk7XG5cbi8qKlxuICogVG9wLWxldmVsIFwibWFpbiBmaWVsZCBjb250YWluZXJcIlxuICovXG5leHBvcnQgY29uc3QgUG9kc0RGVkZpZWxkTGF5b3V0ID0gTWFyaW9uZXR0ZS5WaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cdFx0dGhpcy5maWVsZEl0ZW1EYXRhID0gb3B0aW9ucy5maWVsZEl0ZW1EYXRhO1xuXHR9XG59ICk7XG4iLCJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBQb2RzREZWRmllbGRNb2RlbCB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL3BvZHMtZmllbGQtbW9kZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gbW5SZW5kZXJlciAoIEZpZWxkQ2xhc3MsIGVsZW1lbnQsIGRhdGEgKSB7XG5cblx0Ly8gQXNzZW1ibGUgdGhlIG1vZGVsIGFuZCBjcmVhdGUgdGhlIGZpZWxkXG5cdGNvbnN0IGZpZWxkTW9kZWwgPSBuZXcgUG9kc0RGVkZpZWxkTW9kZWwoIHtcblx0XHRodG1sQXR0cjogZGF0YS5odG1sQXR0cixcblx0XHRmaWVsZENvbmZpZzogZGF0YS5maWVsZENvbmZpZ1xuXHR9ICk7XG5cblx0Y29uc3QgbmV3RmllbGQgPSBuZXcgRmllbGRDbGFzcygge1xuXHRcdGVsOiBlbGVtZW50LFxuXHRcdG1vZGVsOiBmaWVsZE1vZGVsLFxuXHRcdGZpZWxkSXRlbURhdGE6IGRhdGEuZmllbGRJdGVtRGF0YVxuXHR9ICk7XG5cblx0Ly8gUmVuZGVyIHRoZSBmaWVsZCwgdHJpZ2dlciBhbiBldmVudCBmb3IgdGhlIG91dHNpZGUgd29ybGQsIGFuZCBzdGFzaCBhIHJlZmVyZW5jZVxuXHRuZXdGaWVsZC5yZW5kZXIoKTtcblx0alF1ZXJ5KCBlbGVtZW50ICkudHJpZ2dlciggJ3JlbmRlcicgKTtcblx0cmV0dXJuIG5ld0ZpZWxkO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgaW5pdFN0b3JlIH0gZnJvbSAncG9kcy1kZnYvc3JjL2FkbWluL2VkaXQtcG9kL3N0b3JlL3N0b3JlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWN0RGlyZWN0UmVuZGVyZXIgKCBGaWVsZENsYXNzLCBlbGVtZW50LCBwcm9wcyApIHtcblx0Y29uc3QgRmllbGQgPSBSZWFjdC5jcmVhdGVGYWN0b3J5KCBGaWVsZENsYXNzICk7XG5cblx0Ly8gVG9kbzpcblx0Ly9cblx0Ly8gIDE6IE5lZWQgYSBnZW5lcmljIHdheSB0byBpbml0aWFsaXplIHRoZSBzdG9yZXMuICBUaGlzIGNhbid0IGJlIGluc2lkZVxuXHQvLyB0aGUgY29tcG9uZW50IG9yIGl0IHdpbGwgcmV2ZXJ0IHRvIGluaXRpYWwgdmFsdWVzIG9uIGV2ZXJ5IHJlbmRlci5cblx0Ly8gS2x1ZGdlZCBoZXJlIGZvciBub3cgdG8gY29udGludWUgcHJvdG90eXBpbmcuXG5cdC8vXG5cdC8vIDI6IGluaXRpYWxTdGF0ZSAoaW4gaW5pdFN0b3JlKSB3aWxsIG5vdCBhcnJpdmUgdW50aWwgV1AgNS4yLlxuXHQvL1xuXHRpbml0U3RvcmUoIHByb3BzICk7XG5cblx0UmVhY3RET00ucmVuZGVyKFxuXHRcdEZpZWxkKCBwcm9wcyApLFxuXHRcdGVsZW1lbnRcblx0KTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFBvZHNERlZGaWVsZENvbnRhaW5lciB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb21wb25lbnRzL2ZpZWxkLWNvbnRhaW5lcic7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFjdFJlbmRlcmVyICggRmllbGRDbGFzcywgZWxlbWVudCwgcHJvcHMgKSB7XG5cdGNvbnN0IEZpZWxkID0gUmVhY3QuY3JlYXRlRmFjdG9yeSggRmllbGRDbGFzcyApO1xuXG5cdFJlYWN0RE9NLnJlbmRlcihcblx0XHQ8UG9kc0RGVkZpZWxkQ29udGFpbmVyXG5cdFx0XHRmaWVsZENvbXBvbmVudD17IEZpZWxkIH1cblx0XHRcdHsgLi4ucHJvcHMgfVxuXHRcdC8+LFxuXHRcdGVsZW1lbnRcblx0KTtcbn1cbiIsImV4cG9ydCB7IEZpbGVVcGxvYWQgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkJztcbmV4cG9ydCB7IFBpY2sgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svcGljayc7XG5leHBvcnQgeyBQb2RzREZWVGV4dCB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvdGV4dC90ZXh0JztcbmV4cG9ydCB7IFBvZHNERlZQYXNzd29yZCB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvcGFzc3dvcmQvcGFzc3dvcmQnO1xuZXhwb3J0IHsgUG9kc0RGVk51bWJlciB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvbnVtYmVyL251bWJlcic7XG5leHBvcnQgeyBQb2RzREZWRW1haWwgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL2VtYWlsL2VtYWlsJztcbmV4cG9ydCB7IFBvZHNERlZUZXh0QXJlYSB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvdGV4dGFyZWEvdGV4dGFyZWEnO1xuZXhwb3J0IHsgUG9kc0RGVkVkaXRQb2QgfSBmcm9tICdwb2RzLWRmdi9zcmMvYWRtaW4vZWRpdC1wb2QvZWRpdC1wb2QnO1xuIiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBvZHNERlZCYXNlSW5wdXQgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29tcG9uZW50cy9iYXNlLWlucHV0JztcbmltcG9ydCB7IHZhbGlkYXRpb25SdWxlcyB9IGZyb20gJ3BvZHMtZGZ2L3NyYy92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcnVsZXMnO1xuXG5leHBvcnQgY29uc3QgUG9kc0RGVkVtYWlsID0gKCBwcm9wcyApID0+IHtcblx0cHJvcHMudmFsaWRhdGlvbi5hZGRSdWxlcyggW1xuXHRcdHtcblx0XHRcdHJ1bGU6IHZhbGlkYXRpb25SdWxlcy5lbWFpbEZvcm1hdCggcHJvcHMudmFsdWUgKSxcblx0XHRcdGNvbmRpdGlvbjogdHJ1ZSxcblx0XHR9LFxuXHRdICk7XG5cblx0Ly8gbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG5cdHJldHVybiAoXG5cdFx0PFBvZHNERlZCYXNlSW5wdXRcblx0XHRcdHR5cGU9eycxJyA9PT0gcHJvcHMuZmllbGRDb25maWcuZW1haWxfaHRtbDUgPyAnZW1haWwnIDogJ3RleHQnfVxuXHRcdFx0ey4uLnByb3BzfVxuXHRcdC8+XG5cdCk7XG59O1xuIiwiLypnbG9iYWwgalF1ZXJ5LCBfLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSAqL1xuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgRmlsZVVwbG9hZE1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKCB7XG5cdGRlZmF1bHRzOiB7XG5cdFx0J2lkJzogMCxcblx0XHQnaWNvbic6ICcnLFxuXHRcdCduYW1lJzogJycsXG5cdFx0J2VkaXRfbGluayc6ICcnLFxuXHRcdCdsaW5rJzogJycsXG5cdFx0J2Rvd25sb2FkJzogJydcblx0fVxufSApO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBGaWxlVXBsb2FkQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKCB7XG5cdG1vZGVsOiBGaWxlVXBsb2FkTW9kZWxcbn0gKTtcbiIsIi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUgKi9cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLWxheW91dC5odG1sJztcblxuaW1wb3J0IHsgUG9kc0RGVkZpZWxkTGF5b3V0IH0gZnJvbSAncG9kcy1kZnYvc3JjL2NvcmUvcG9kcy1maWVsZC12aWV3cyc7XG5cbmltcG9ydCB7IEZpbGVVcGxvYWRDb2xsZWN0aW9uIH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC9maWxlLXVwbG9hZC1tb2RlbCc7XG5cbmltcG9ydCB7IEZpbGVVcGxvYWRMaXN0IH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC92aWV3cy9maWxlLXVwbG9hZC1saXN0JztcbmltcG9ydCB7IEZpbGVVcGxvYWRGb3JtIH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC92aWV3cy9maWxlLXVwbG9hZC1mb3JtJztcblxuaW1wb3J0IHsgUGx1cGxvYWQgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3VwbG9hZGVycy9wbHVwbG9hZCc7XG5pbXBvcnQgeyBNZWRpYU1vZGFsIH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC91cGxvYWRlcnMvbWVkaWEtbW9kYWwnO1xuXG5jb25zdCBVcGxvYWRlcnMgPSBbXG5cdFBsdXBsb2FkLFxuXHRNZWRpYU1vZGFsXG5dO1xuXG5jb25zdCBVTkxJTUlURURfRklMRVMgPSAwO1xuXG4vKipcbiAqIEBleHRlbmRzIEJhY2tib25lLlZpZXdcbiAqL1xuZXhwb3J0IGNvbnN0IEZpbGVVcGxvYWQgPSBQb2RzREZWRmllbGRMYXlvdXQuZXh0ZW5kKCB7XG5cdGNoaWxkVmlld0V2ZW50UHJlZml4OiBmYWxzZSwgLy8gRGlzYWJsZSBpbXBsaWNpdCBldmVudCBsaXN0ZW5lcnMgaW4gZmF2b3Igb2YgZXhwbGljaXQgY2hpbGRWaWV3VHJpZ2dlcnMgYW5kIGNoaWxkVmlld0V2ZW50c1xuXG5cdHRlbXBsYXRlOiBfLnRlbXBsYXRlKCB0ZW1wbGF0ZSApLFxuXG5cdHJlZ2lvbnM6IHtcblx0XHRsaXN0OiAnLnBvZHMtdWktZmlsZS1saXN0Jyxcblx0XHR1aVJlZ2lvbjogJy5wb2RzLXVpLXJlZ2lvbicsIC8vIFwiVXRpbGl0eVwiIGNvbnRhaW5lciBmb3IgdXBsb2FkZXJzIHRvIHVzZVxuXHRcdGZvcm06ICcucG9kcy11aS1mb3JtJ1xuXHR9LFxuXG5cdGNoaWxkVmlld0V2ZW50czoge1xuXHRcdCdjaGlsZHZpZXc6cmVtb3ZlOmZpbGU6Y2xpY2snOiAnb25DaGlsZHZpZXdSZW1vdmVGaWxlQ2xpY2snLFxuXHRcdCdjaGlsZHZpZXc6YWRkOmZpbGU6Y2xpY2snOiAnb25DaGlsZHZpZXdBZGRGaWxlQ2xpY2snXG5cdH0sXG5cblx0dXBsb2FkZXI6IHt9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0b25CZWZvcmVSZW5kZXI6IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIHRoaXMuY29sbGVjdGlvbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5jb2xsZWN0aW9uID0gbmV3IEZpbGVVcGxvYWRDb2xsZWN0aW9uKCB0aGlzLmZpZWxkSXRlbURhdGEgKTtcblx0XHR9XG5cdH0sXG5cblx0b25SZW5kZXI6IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zdCBsaXN0VmlldyA9IG5ldyBGaWxlVXBsb2FkTGlzdCggeyBjb2xsZWN0aW9uOiB0aGlzLmNvbGxlY3Rpb24sIGZpZWxkTW9kZWw6IHRoaXMubW9kZWwgfSApO1xuXHRcdGNvbnN0IGZvcm1WaWV3ID0gbmV3IEZpbGVVcGxvYWRGb3JtKCB7IGZpZWxkTW9kZWw6IHRoaXMubW9kZWwgfSApO1xuXG5cdFx0dGhpcy5zaG93Q2hpbGRWaWV3KCAnbGlzdCcsIGxpc3RWaWV3ICk7XG5cdFx0dGhpcy5zaG93Q2hpbGRWaWV3KCAnZm9ybScsIGZvcm1WaWV3ICk7XG5cblx0XHQvLyBTZXR1cCB0aGUgdXBsb2FkZXIgYW5kIGxpc3RlbiBmb3IgYSByZXNwb25zZSBldmVudFxuXHRcdHRoaXMudXBsb2FkZXIgPSB0aGlzLmNyZWF0ZVVwbG9hZGVyKCk7XG5cdFx0dGhpcy5saXN0ZW5UbyggdGhpcy51cGxvYWRlciwgJ2FkZGVkOmZpbGVzJywgdGhpcy5vbkFkZGVkRmlsZXMgKTtcblx0fSxcblxuXHQvKipcblx0ICogRmlyZWQgYnkgYSByZW1vdmU6ZmlsZTpjbGljayB0cmlnZ2VyIGluIGFueSBjaGlsZCB2aWV3XG5cdCAqXG5cdCAqIEBwYXJhbSBjaGlsZFZpZXcgVmlldyB0aGF0IHdhcyB0aGUgc291cmNlIG9mIHRoZSBldmVudFxuXHQgKi9cblx0b25DaGlsZHZpZXdSZW1vdmVGaWxlQ2xpY2s6IGZ1bmN0aW9uICggY2hpbGRWaWV3ICkge1xuXHRcdHRoaXMuY29sbGVjdGlvbi5yZW1vdmUoIGNoaWxkVmlldy5tb2RlbCApO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBGaXJlZCBieSBhIGFkZDpmaWxlOmNsaWNrIHRyaWdnZXIgaW4gYW55IGNoaWxkIHZpZXdcblx0ICpcblx0ICogcGx1cGxvYWQgZmllbGRzIHNob3VsZCBuZXZlciBnZW5lcmF0ZSB0aGlzIGV2ZW50LCBpdCBwbGFjZXMgYSBzaGltIG92ZXIgb3VyIGJ1dHRvbiBhbmQgaGFuZGxlcyB0aGVcblx0ICogZXZlbnQgaW50ZXJuYWxseS4gIEJ1dCB0aGlzIGV2ZW50IGRvZXMgc3RpbGwgY29tZSB0aHJvdWdoIHdpdGggcGx1cGxvYWQgZmllbGRzIGluIHNvbWUgYnJvd3NlclxuXHQgKiBlbnZpcm9ubWVudHMgZm9yIHJlYXNvbnMgd2UndmUgYmVlbiB1bmFibGUgdG8gZGV0ZXJtaW5lLlxuXHQgKi9cblx0b25DaGlsZHZpZXdBZGRGaWxlQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIEludm9rZSB0aGUgdXBsb2FkZXJcblx0XHRpZiAoICdmdW5jdGlvbicgPT09IHR5cGVvZiB0aGlzLnVwbG9hZGVyLmludm9rZSApIHtcblx0XHRcdHRoaXMudXBsb2FkZXIuaW52b2tlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBDb25jcmV0ZSB1cGxvYWRlciBpbXBsZW1lbnRhdGlvbnMgc2ltcGx5IG5lZWQgdG86IHRoaXMudHJpZ2dlciggJ2FkZGVkOmZpbGVzJywgbmV3RmlsZXMgKVxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdFtdfSBkYXRhIEFuIGFycmF5IG9mIG1vZGVsIG9iamVjdHMgdG8gYmUgYWRkZWRcblx0ICovXG5cdG9uQWRkZWRGaWxlczogZnVuY3Rpb24gKCBkYXRhICkge1xuXHRcdGNvbnN0IGZpZWxkQ29uZmlnID0gdGhpcy5tb2RlbC5nZXQoICdmaWVsZENvbmZpZycgKTtcblx0XHRjb25zdCBmaWxlTGltaXQgPSArZmllbGRDb25maWdbICdmaWxlX2xpbWl0JyBdOyAvLyBVbmFyeSBwbHVzIHRvIGZvcmNlIHRvIG51bWJlclxuXHRcdGxldCBuZXdDb2xsZWN0aW9uLCBmaWx0ZXJlZE1vZGVscztcblxuXHRcdC8vIEdldCBhIGNvcHkgb2YgdGhlIGV4aXN0aW5nIGNvbGxlY3Rpb24gd2l0aCB0aGUgbmV3IGZpbGVzIGFkZGVkXG5cdFx0bmV3Q29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvbi5jbG9uZSgpO1xuXHRcdG5ld0NvbGxlY3Rpb24uYWRkKCBkYXRhICk7XG5cblx0XHQvLyBFbmZvcmNlIHRoZSBmaWxlIGxpbWl0IG9wdGlvbiBpZiBvbmUgaXMgc2V0XG5cdFx0aWYgKCBVTkxJTUlURURfRklMRVMgPT09IGZpbGVMaW1pdCApIHtcblx0XHRcdGZpbHRlcmVkTW9kZWxzID0gbmV3Q29sbGVjdGlvbi5tb2RlbHM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIE51bWJlciBvZiB1cGxvYWRzIGlzIGxpbWl0ZWQ6IGtlZXAgdGhlIGxhc3QgTiBtb2RlbHMsIEZJRk8vcXVldWUgc3R5bGVcblx0XHRcdGZpbHRlcmVkTW9kZWxzID0gbmV3Q29sbGVjdGlvbi5maWx0ZXIoIGZ1bmN0aW9uICggbW9kZWwgKSB7XG5cdFx0XHRcdHJldHVybiAoIG5ld0NvbGxlY3Rpb24uaW5kZXhPZiggbW9kZWwgKSA+PSBuZXdDb2xsZWN0aW9uLmxlbmd0aCAtIGZpbGVMaW1pdCApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHRoaXMuY29sbGVjdGlvbi5yZXNldCggZmlsdGVyZWRNb2RlbHMgKTtcblx0fSxcblxuXHRjcmVhdGVVcGxvYWRlcjogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IGZpZWxkQ29uZmlnID0gdGhpcy5tb2RlbC5nZXQoICdmaWVsZENvbmZpZycgKTtcblx0XHRjb25zdCB0YXJnZXRVcGxvYWRlciA9IGZpZWxkQ29uZmlnWyAnZmlsZV91cGxvYWRlcicgXTtcblx0XHRsZXQgVXBsb2FkZXI7XG5cblx0XHRqUXVlcnkuZWFjaCggVXBsb2FkZXJzLCBmdW5jdGlvbiAoIGluZGV4LCB0aGlzVXBsb2FkZXIgKSB7XG5cdFx0XHRpZiAoIHRhcmdldFVwbG9hZGVyID09PSB0aGlzVXBsb2FkZXIucHJvdG90eXBlLmZpbGVVcGxvYWRlciApIHtcblx0XHRcdFx0VXBsb2FkZXIgPSB0aGlzVXBsb2FkZXI7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHRpZiAoIFVwbG9hZGVyICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnVwbG9hZGVyID0gbmV3IFVwbG9hZGVyKCB7XG5cdFx0XHRcdC8vIFdlIHByb3ZpZGUgcmVndWxhciBET00gZWxlbWVudCBmb3IgdGhlIGJ1dHRvblxuXHRcdFx0XHRicm93c2VCdXR0b246IHRoaXMuZ2V0UmVnaW9uKCAnZm9ybScgKS5nZXRFbCggJy5wb2RzLWRmdi1saXN0LWFkZCcgKS5nZXQoKSxcblx0XHRcdFx0dWlSZWdpb246IHRoaXMuZ2V0UmVnaW9uKCAndWlSZWdpb24nICksXG5cdFx0XHRcdGZpZWxkQ29uZmlnOiBmaWVsZENvbmZpZ1xuXHRcdFx0fSApO1xuXHRcdFx0cmV0dXJuIHRoaXMudXBsb2FkZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEB0b2RvIHNwcmludGYgdHlwZSB3aXRoIFBvZHNJMThuLl9fKClcblx0XHRcdHRocm93IGBDb3VsZCBub3QgbG9jYXRlIGZpbGUgdXBsb2FkZXIgJyR7dGFyZ2V0VXBsb2FkZXJ9J2A7XG5cdFx0fVxuXHR9XG59ICk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUsIHdwLCBQb2RzSTE4biAqL1xuaW1wb3J0IHsgUG9kc0ZpbGVVcGxvYWRlciB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvZmlsZS11cGxvYWQvdXBsb2FkZXJzL3BvZHMtZmlsZS11cGxvYWRlcic7XG5cbmV4cG9ydCBjb25zdCBNZWRpYU1vZGFsID0gUG9kc0ZpbGVVcGxvYWRlci5leHRlbmQoIHtcblx0bWVkaWFPYmplY3Q6IHt9LFxuXG5cdGZpbGVVcGxvYWRlcjogJ2F0dGFjaG1lbnQnLFxuXG5cdGludm9rZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB3cC5VcGxvYWRlci5kZWZhdWx0cy5maWx0ZXJzLm1pbWVfdHlwZXMgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHdwLlVwbG9hZGVyLmRlZmF1bHRzLmZpbHRlcnMubWltZV90eXBlcyA9IFsge1xuXHRcdFx0XHR0aXRsZTogUG9kc0kxOG4uX18oICdBbGxvd2VkIEZpbGVzJyApLFxuXHRcdFx0XHRleHRlbnNpb25zOiAnKidcblx0XHRcdH0gXTtcblx0XHR9XG5cblx0XHRsZXQgZGVmYXVsdEV4dCA9IHdwLlVwbG9hZGVyLmRlZmF1bHRzLmZpbHRlcnMubWltZV90eXBlc1sgMCBdLmV4dGVuc2lvbnM7XG5cblx0XHR3cC5VcGxvYWRlci5kZWZhdWx0cy5maWx0ZXJzLm1pbWVfdHlwZXNbIDAgXS5leHRlbnNpb25zID0gdGhpcy5maWVsZENvbmZpZ1sgJ2xpbWl0X2V4dGVuc2lvbnMnIF07XG5cblx0XHQvLyBzZXQgb3VyIHNldHRpbmdzXG5cdFx0Ly8gbm9pbnNwZWN0aW9uIEVxdWFsaXR5Q29tcGFyaXNvbldpdGhDb2VyY2lvbkpTIChcIjFcIiBpcyBldmVyeSBiaXQgYXMgdmFsaWQgdG8gdXMgYXMgMSlcblx0XHR0aGlzLm1lZGlhT2JqZWN0ID0gd3AubWVkaWEoIHtcblx0XHRcdHRpdGxlOiB0aGlzLmZpZWxkQ29uZmlnWyAnZmlsZV9tb2RhbF90aXRsZScgXSxcblx0XHRcdG11bHRpcGxlOiAoIDEgIT0gdGhpcy5maWVsZENvbmZpZ1sgJ2ZpbGVfbGltaXQnIF0gKSxcblx0XHRcdGxpYnJhcnk6IHtcblx0XHRcdFx0dHlwZTogdGhpcy5maWVsZENvbmZpZ1sgJ2xpbWl0X3R5cGVzJyBdXG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ3VzdG9taXplIHRoZSBzdWJtaXQgYnV0dG9uLlxuXHRcdFx0YnV0dG9uOiB7XG5cdFx0XHRcdC8vIFNldCB0aGUgdGV4dCBvZiB0aGUgYnV0dG9uLlxuXHRcdFx0XHR0ZXh0OiB0aGlzLmZpZWxkQ29uZmlnWyAnZmlsZV9tb2RhbF9hZGRfYnV0dG9uJyBdXG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gT25lLXNob3QgY2FsbGJhY2sgKCBldmVudCwgY2FsbGJhY2ssIGNvbnRleHQgKVxuXHRcdHRoaXMubWVkaWFPYmplY3Qub25jZSggJ3NlbGVjdCcsIHRoaXMub25NZWRpYVNlbGVjdCwgdGhpcyApO1xuXG5cdFx0Ly8gb3BlbiB0aGUgZnJhbWVcblx0XHR0aGlzLm1lZGlhT2JqZWN0Lm9wZW4oKTtcblx0XHR0aGlzLm1lZGlhT2JqZWN0LmNvbnRlbnQubW9kZSggdGhpcy5maWVsZENvbmZpZ1sgJ2ZpbGVfYXR0YWNobWVudF90YWInIF0gKTtcblxuXHRcdC8vIFJlc2V0IHRoZSBhbGxvd2VkIGZpbGUgZXh0ZW5zaW9uc1xuXHRcdHdwLlVwbG9hZGVyLmRlZmF1bHRzLmZpbHRlcnMubWltZV90eXBlc1sgMCBdLmV4dGVuc2lvbnMgPSBkZWZhdWx0RXh0O1xuXHR9LFxuXG5cdG9uTWVkaWFTZWxlY3Q6IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zdCBzZWxlY3Rpb24gPSB0aGlzLm1lZGlhT2JqZWN0LnN0YXRlKCkuZ2V0KCAnc2VsZWN0aW9uJyApO1xuXHRcdGxldCBuZXdGaWxlcyA9IFtdO1xuXG5cdFx0aWYgKCAhc2VsZWN0aW9uICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGxvb3AgdGhyb3VnaCB0aGUgc2VsZWN0ZWQgZmlsZXNcblx0XHRzZWxlY3Rpb24uZWFjaCggZnVuY3Rpb24gKCBhdHRhY2htZW50ICkge1xuXHRcdFx0Y29uc3Qgc2l6ZXMgPSBhdHRhY2htZW50LmF0dHJpYnV0ZXMuc2l6ZXM7XG5cdFx0XHRsZXQgYXR0YWNobWVudFRodW1ibmFpbDtcblxuXHRcdFx0Ly8gYnkgZGVmYXVsdCB1c2UgdGhlIGdlbmVyaWMgaWNvblxuXHRcdFx0YXR0YWNobWVudFRodW1ibmFpbCA9IGF0dGFjaG1lbnQuYXR0cmlidXRlcy5pY29uO1xuXG5cdFx0XHQvLyBvbmx5IHRodW1ibmFpbHMgaGF2ZSBzaXplcyB3aGljaCBpcyB3aGF0IHdlJ3JlIG9uIHRoZSBodW50IGZvclxuXHRcdFx0aWYgKCBzaXplcyAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHQvLyBHZXQgdGh1bWJuYWlsIGlmIGl0IGV4aXN0c1xuXHRcdFx0XHRpZiAoIHNpemVzLnRodW1ibmFpbCAhPT0gdW5kZWZpbmVkICYmIHNpemVzLnRodW1ibmFpbC51cmwgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRhdHRhY2htZW50VGh1bWJuYWlsID0gc2l6ZXMudGh1bWJuYWlsLnVybDtcblx0XHRcdFx0fSBlbHNlIGlmICggc2l6ZXMuZnVsbCAhPT0gdW5kZWZpbmVkICYmIHNpemVzLmZ1bGwudXJsICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0Ly8gSWYgdGh1bWJuYWlsIGRvZXNuJ3QgZXhpc3QsIGdldCBmdWxsIGJlY2F1c2UgdGhpcyBpcyBhIHNtYWxsIGltYWdlXG5cdFx0XHRcdFx0YXR0YWNobWVudFRodW1ibmFpbCA9IHNpemVzLmZ1bGwudXJsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG5ld0ZpbGVzLnB1c2goIHtcblx0XHRcdFx0aWQ6IGF0dGFjaG1lbnQuYXR0cmlidXRlcy5pZCxcblx0XHRcdFx0aWNvbjogYXR0YWNobWVudFRodW1ibmFpbCxcblx0XHRcdFx0bmFtZTogYXR0YWNobWVudC5hdHRyaWJ1dGVzLnRpdGxlLFxuXHRcdFx0XHRlZGl0X2xpbms6IGF0dGFjaG1lbnQuYXR0cmlidXRlcy5lZGl0TGluayxcblx0XHRcdFx0bGluazogYXR0YWNobWVudC5hdHRyaWJ1dGVzLmxpbmssXG5cdFx0XHRcdGRvd25sb2FkOiBhdHRhY2htZW50LmF0dHJpYnV0ZXMudXJsXG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRmlyZSBhbiBldmVudCB3aXRoIGFuIGFycmF5IG9mIG1vZGVscyB0byBiZSBhZGRlZFxuXHRcdHRoaXMudHJpZ2dlciggJ2FkZGVkOmZpbGVzJywgbmV3RmlsZXMgKTtcblx0fVxuXG59ICk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUsIHdwLCBwbHVwbG9hZCwgUG9kc0kxOG4gKi9cbmltcG9ydCB7IFBvZHNGaWxlVXBsb2FkZXIgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3VwbG9hZGVycy9wb2RzLWZpbGUtdXBsb2FkZXInO1xuaW1wb3J0IHsgRmlsZVVwbG9hZFF1ZXVlTW9kZWwsIEZpbGVVcGxvYWRRdWV1ZSB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvZmlsZS11cGxvYWQvdmlld3MvZmlsZS11cGxvYWQtcXVldWUnO1xuXG5leHBvcnQgY29uc3QgUGx1cGxvYWQgPSBQb2RzRmlsZVVwbG9hZGVyLmV4dGVuZCgge1xuXHRwbHVwbG9hZDoge30sXG5cblx0ZmlsZVVwbG9hZGVyOiAncGx1cGxvYWQnLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBTZXQgdGhlIGJyb3dzZSBidXR0b24gYXJndW1lbnQgZm9yIHBsdXBsb2FkLi4uIGl0J3MgcmVxdWlyZWRcblx0XHR0aGlzLmZpZWxkQ29uZmlnWyAncGx1cGxvYWRfaW5pdCcgXVsgJ2Jyb3dzZV9idXR0b24nIF0gPSB0aGlzLmJyb3dzZUJ1dHRvbjtcblxuXHRcdHRoaXMucGx1cGxvYWQgPSBuZXcgcGx1cGxvYWQuVXBsb2FkZXIoIHRoaXMuZmllbGRDb25maWdbICdwbHVwbG9hZF9pbml0JyBdICk7XG5cdFx0dGhpcy5wbHVwbG9hZC5pbml0KCk7XG5cblx0XHQvLyBTZXR1cCBhbGwgY2FsbGJhY2tzOiAoIGV2ZW50X25hbWUsIGNhbGxiYWNrLCBjb250ZXh0IClcblx0XHR0aGlzLnBsdXBsb2FkLmJpbmQoICdGaWxlc0FkZGVkJywgdGhpcy5vbkZpbGVzQWRkZWQsIHRoaXMgKTtcblx0XHR0aGlzLnBsdXBsb2FkLmJpbmQoICdVcGxvYWRQcm9ncmVzcycsIHRoaXMub25VcGxvYWRQcm9ncmVzcywgdGhpcyApO1xuXHRcdHRoaXMucGx1cGxvYWQuYmluZCggJ0ZpbGVVcGxvYWRlZCcsIHRoaXMub25GaWxlVXBsb2FkZWQsIHRoaXMgKTtcblx0fSxcblxuXHQvKipcblx0ICogRmlyZWQgYWZ0ZXIgZmlsZXMgaGF2ZSBiZWVuIHNlbGVjdGVkIGZyb20gdGhlIGRpYWxvZ1xuXHQgKlxuXHQgKiBAcGFyYW0gdXBcblx0ICogQHBhcmFtIGZpbGVzXG5cdCAqL1xuXHRvbkZpbGVzQWRkZWQ6IGZ1bmN0aW9uICggdXAsIGZpbGVzICkge1xuXHRcdGxldCBtb2RlbCxcblx0XHRcdGNvbGxlY3Rpb24sXG5cdFx0XHR2aWV3O1xuXG5cdFx0Ly8gQXNzZW1ibGUgdGhlIGNvbGxlY3Rpb24gZGF0YSBmb3IgdGhlIGZpbGUgcXVldWVcblx0XHRjb2xsZWN0aW9uID0gbmV3IEJhY2tib25lLkNvbGxlY3Rpb24oKTtcblx0XHRqUXVlcnkuZWFjaCggZmlsZXMsIGZ1bmN0aW9uICggaW5kZXgsIGZpbGUgKSB7XG5cdFx0XHRtb2RlbCA9IG5ldyBGaWxlVXBsb2FkUXVldWVNb2RlbCgge1xuXHRcdFx0XHRpZDogZmlsZS5pZCxcblx0XHRcdFx0ZmlsZW5hbWU6IGZpbGUubmFtZVxuXHRcdFx0fSApO1xuXG5cdFx0XHRjb2xsZWN0aW9uLmFkZCggbW9kZWwgKTtcblx0XHR9ICk7XG5cblx0XHQvLyBDcmVhdGUgYSBuZXcgdmlldyBiYXNlZCBvbiB0aGUgY29sbGVjdGlvblxuXHRcdHZpZXcgPSBuZXcgRmlsZVVwbG9hZFF1ZXVlKCB7IGNvbGxlY3Rpb246IGNvbGxlY3Rpb24gfSApO1xuXHRcdHZpZXcucmVuZGVyKCk7ICAvLyBHZW5lcmF0ZSB0aGUgSFRNTCwgbm90IGF0dGFjaGVkIHRvIHRoZSBET00geWV0XG5cblx0XHQvLyBSZXNldCB0aGUgcmVnaW9uIGluIGNhc2UgYW55IGVycm9yIG1lc3NhZ2VzIGFyZSBoYW5naW5nIGFyb3VuZCBmcm9tIGEgcHJldmlvdXMgdXBsb2FkXG5cdFx0Ly8gYW5kIHNob3cgdGhlIG5ldyBmaWxlIHVwbG9hZCBxdWV1ZVxuXHRcdHRoaXMudWlSZWdpb24ucmVzZXQoKTtcblx0XHR0aGlzLnVpUmVnaW9uLnNob3coIHZpZXcgKTtcblxuXHRcdC8vIFN0YXNoIHJlZmVyZW5jZXNcblx0XHR0aGlzLnF1ZXVlQ29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5cblx0XHR1cC5yZWZyZXNoKCk7XG5cdFx0dXAuc3RhcnQoKTtcblx0fSxcblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHVwXG5cdCAqIEBwYXJhbSBmaWxlXG5cdCAqL1xuXHRvblVwbG9hZFByb2dyZXNzOiBmdW5jdGlvbiAoIHVwLCBmaWxlICkge1xuXHRcdGNvbnN0IG1vZGVsID0gdGhpcy5xdWV1ZUNvbGxlY3Rpb24uZ2V0KCBmaWxlLmlkICk7XG5cdFx0bW9kZWwuc2V0KCB7IHByb2dyZXNzOiBmaWxlLnBlcmNlbnQgfSApO1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gdXBcblx0ICogQHBhcmFtIGZpbGVcblx0ICogQHBhcmFtIHJlc3Bcblx0ICovXG5cdG9uRmlsZVVwbG9hZGVkOiBmdW5jdGlvbiAoIHVwLCBmaWxlLCByZXNwICkge1xuXHRcdGNvbnN0IG1vZGVsID0gdGhpcy5xdWV1ZUNvbGxlY3Rpb24uZ2V0KCBmaWxlLmlkICk7XG5cdFx0bGV0IHJlc3BvbnNlID0gcmVzcC5yZXNwb25zZTtcblx0XHRsZXQgbmV3RmlsZSA9IFtdO1xuXHRcdGxldCBqc29uO1xuXG5cdFx0Ly8gRXJyb3IgY29uZGl0aW9uIDFcblx0XHRpZiAoICdFcnJvcjogJyA9PT0gcmVzcC5yZXNwb25zZS5zdWJzdHIoIDAsIDcgKSApIHtcblx0XHRcdHJlc3BvbnNlID0gcmVzcG9uc2Uuc3Vic3RyKCA3ICk7XG5cdFx0XHRpZiAoIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyggcmVzcG9uc2UgKTtcblx0XHRcdH1cblxuXHRcdFx0bW9kZWwuc2V0KCB7XG5cdFx0XHRcdHByb2dyZXNzOiAwLFxuXHRcdFx0XHRlcnJvck1zZzogcmVzcG9uc2Vcblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gRXJyb3IgY29uZGl0aW9uIDJcblx0XHR9IGVsc2UgaWYgKCAnPGU+JyA9PT0gcmVzcC5yZXNwb25zZS5zdWJzdHIoIDAsIDMgKSApIHtcblx0XHRcdHJlc3BvbnNlID0galF1ZXJ5KCByZXNwb25zZSApLnRleHQoKTsgLy8gU3RyaXAgdGFncywgdGV4dCBvbmx5XG5cdFx0XHRpZiAoIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyggcmVzcG9uc2UgKTtcblx0XHRcdH1cblxuXHRcdFx0bW9kZWwuc2V0KCB7XG5cdFx0XHRcdHByb2dyZXNzOiAwLFxuXHRcdFx0XHRlcnJvck1zZzogcmVzcG9uc2Vcblx0XHRcdH0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anNvbiA9IHJlc3BvbnNlLm1hdGNoKCAvey4qfSQvICk7XG5cblx0XHRcdGlmICggbnVsbCAhPT0ganNvbiAmJiAwIDwganNvbi5sZW5ndGggKSB7XG5cdFx0XHRcdGpzb24gPSBqUXVlcnkucGFyc2VKU09OKCBqc29uWyAwIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpzb24gPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCAnb2JqZWN0JyAhPT0gdHlwZW9mIGpzb24gfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGpzb24gKSApIHtcblx0XHRcdFx0aWYgKCB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyggcmVzcG9uc2UgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCBqc29uICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtb2RlbC5zZXQoIHtcblx0XHRcdFx0XHRwcm9ncmVzczogMCxcblx0XHRcdFx0XHRlcnJvck1zZzogUG9kc0kxOG4uX18oICdFcnJvciB1cGxvYWRpbmcgZmlsZTogJyApICsgZmlsZS5uYW1lXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRuZXdGaWxlID0ge1xuXHRcdFx0XHRpZDoganNvbi5JRCxcblx0XHRcdFx0aWNvbjoganNvbi50aHVtYm5haWwsXG5cdFx0XHRcdG5hbWU6IGpzb24ucG9zdF90aXRsZSxcblx0XHRcdFx0ZWRpdF9saW5rOiBqc29uLmVkaXRfbGluayxcblx0XHRcdFx0bGluazoganNvbi5saW5rLFxuXHRcdFx0XHRkb3dubG9hZDoganNvbi5kb3dubG9hZFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gUmVtb3ZlIHRoZSBmaWxlIGZyb20gdGhlIHVwbG9hZCBxdWV1ZSBtb2RlbCBhbmQgdHJpZ2dlciBhbiBldmVudCBmb3IgdGhlIGhvc3RpbmcgY29udGFpbmVyXG5cdFx0XHRtb2RlbC50cmlnZ2VyKCAnZGVzdHJveScsIG1vZGVsICk7XG5cdFx0XHR0aGlzLnRyaWdnZXIoICdhZGRlZDpmaWxlcycsIG5ld0ZpbGUgKTtcblx0XHR9XG5cdH1cblxufSApO1xuXG4iLCIvKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlICovXG4vKipcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmJyb3dzZUJ1dHRvbiAgIEV4aXN0aW5nIGFuZCBhdHRhY2hlZCBET00gbm9kZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMudWlSZWdpb24gICAgICAgTWFyaW9uZXR0ZS5SZWdpb24gb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5maWVsZENvbmZpZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZpZWxkQ29uZmlnLmZpbGVfbW9kYWxfdGl0bGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZpZWxkQ29uZmlnLmZpbGVfbW9kYWxfYWRkX2J1dHRvblxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZmllbGRDb25maWcuZmlsZV9saW1pdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZmllbGRDb25maWcubGltaXRfZXh0ZW5zaW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZmllbGRDb25maWcubGltaXRfdHlwZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZpZWxkQ29uZmlnLmZpbGVfYXR0YWNobWVudF90YWJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5maWVsZENvbmZpZy5wbHVwbG9hZF9pbml0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5maWVsZENvbmZpZy5wbHVwbG9hZF9pbml0LmJyb3dzZV9idXR0b25cbiAqXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGNvbnN0IFBvZHNGaWxlVXBsb2FkZXIgPSBNYXJpb25ldHRlLk9iamVjdC5leHRlbmQoIHtcblxuXHRjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXHRcdC8vIE1hZ2ljYWxseSBzZXQgdGhlIG9iamVjdCBwcm9wZXJ0aWVzIHdlIG5lZWQsIHRoZXknbGwganVzdCBcImJlIHRoZXJlXCIgZm9yIHRoZSBjb25jcmV0ZSBpbnN0YW5jZVxuXHRcdHRoaXMuYnJvd3NlQnV0dG9uID0gb3B0aW9ucy5icm93c2VCdXR0b247XG5cdFx0dGhpcy51aVJlZ2lvbiA9IG9wdGlvbnMudWlSZWdpb247XG5cdFx0dGhpcy5maWVsZENvbmZpZyA9IG9wdGlvbnMuZmllbGRDb25maWc7XG5cblx0XHRNYXJpb25ldHRlLk9iamVjdC5jYWxsKCB0aGlzLCBvcHRpb25zICk7XG5cdH1cblxufSApO1xuXG4iLCIvKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlLCB3cCAqL1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvZmlsZS11cGxvYWQvdmlld3MvZmlsZS11cGxvYWQtZm9ybS5odG1sJztcblxuaW1wb3J0IHsgUG9kc0ZpZWxkVmlldyB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL3BvZHMtZmllbGQtdmlld3MnO1xuXG5leHBvcnQgY29uc3QgRmlsZVVwbG9hZEZvcm0gPSBQb2RzRmllbGRWaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAnZGl2JyxcblxuXHR0ZW1wbGF0ZTogXy50ZW1wbGF0ZSggdGVtcGxhdGUgKSxcblxuXHR1aToge1xuXHRcdGFkZEJ1dHRvbjogJy5wb2RzLWRmdi1saXN0LWFkZCdcblx0fSxcblxuXHR0cmlnZ2Vyczoge1xuXHRcdCdjbGljayBAdWkuYWRkQnV0dG9uJzogJ2NoaWxkdmlldzphZGQ6ZmlsZTpjbGljaydcblx0fVxufSApO1xuIiwiLypnbG9iYWwgalF1ZXJ5LCBfLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSwgd3AgKi9cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL2ZpbGUtdXBsb2FkL3ZpZXdzL2ZpbGUtdXBsb2FkLWl0ZW0uaHRtbCc7XG5cbmltcG9ydCB7IFBvZHNGaWVsZExpc3RWaWV3LCBQb2RzRmllbGRWaWV3IH0gZnJvbSAncG9kcy1kZnYvc3JjL2NvcmUvcG9kcy1maWVsZC12aWV3cyc7XG5cbi8qKlxuICogSW5kaXZpZHVhbCBsaXN0IGl0ZW1zLCByZXByZXNlbnRpbmcgYSBzaW5nbGUgZmlsZVxuICovXG5leHBvcnQgY29uc3QgRmlsZVVwbG9hZEl0ZW0gPSBQb2RzRmllbGRWaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAnbGknLFxuXG5cdHRlbXBsYXRlOiBfLnRlbXBsYXRlKCB0ZW1wbGF0ZSApLFxuXG5cdGNsYXNzTmFtZTogJ3BvZHMtZGZ2LWxpc3QtaXRlbScsXG5cblx0dWk6IHtcblx0XHRkcmFnSGFuZGxlOiAnLnBvZHMtZGZ2LWxpc3QtaGFuZGxlJyxcblx0XHRlZGl0TGluazogJy5wb2RzLWRmdi1saXN0LWVkaXQtbGluaycsXG5cdFx0dmlld0xpbms6ICcucG9kcy1kZnYtbGlzdC1saW5rJyxcblx0XHRkb3dubG9hZExpbms6ICcucG9kcy1kZnYtbGlzdC1kb3dubG9hZCcsXG5cdFx0cmVtb3ZlQnV0dG9uOiAnLnBvZHMtZGZ2LWxpc3QtcmVtb3ZlJyxcblx0XHRpdGVtTmFtZTogJy5wb2RzLWRmdi1saXN0LW5hbWUnXG5cdH0sXG5cblx0dHJpZ2dlcnM6IHtcblx0XHQnY2xpY2sgQHVpLnJlbW92ZUJ1dHRvbic6ICdyZW1vdmU6ZmlsZTpjbGljaydcblx0fVxufSApO1xuXG4vKipcbiAqIFRoZSBmaWxlIGxpc3QgY29udGFpbmVyXG4gKi9cbmV4cG9ydCBjb25zdCBGaWxlVXBsb2FkTGlzdCA9IFBvZHNGaWVsZExpc3RWaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAndWwnLFxuXG5cdGNsYXNzTmFtZTogJ3BvZHMtZGZ2LWxpc3QnLFxuXG5cdGNoaWxkVmlldzogRmlsZVVwbG9hZEl0ZW0sXG5cblx0Y2hpbGRWaWV3VHJpZ2dlcnM6IHtcblx0XHQncmVtb3ZlOmZpbGU6Y2xpY2snOiAnY2hpbGR2aWV3OnJlbW92ZTpmaWxlOmNsaWNrJ1xuXHR9LFxuXG5cdG9uQXR0YWNoOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3QgZmllbGRDb25maWcgPSB0aGlzLm9wdGlvbnMuZmllbGRNb2RlbC5nZXQoICdmaWVsZENvbmZpZycgKTtcblx0XHRsZXQgc29ydF9heGlzID0gJ3knO1xuXG5cdFx0Ly8gQHRvZG9cblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3MzUzNzIvanF1ZXJ5LXNvcnRhYmxlLWxpc3Qtc2Nyb2xsLWJhci1qdW1wcy11cC13aGVuLXNvcnRpbmcvNDE4NzgzMyM0MTg3ODMzXG5cblx0XHRpZiAoIDEgIT0gZmllbGRDb25maWdbICdmaWxlX2xpbWl0JyBdICkge1xuXG5cdFx0XHRpZiAoICd0aWxlcycgPT0gZmllbGRDb25maWdbICdmaWxlX2ZpZWxkX3RlbXBsYXRlJyBdICkge1xuXHRcdFx0XHRzb3J0X2F4aXMgPSAnJztcblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5pdCBzb3J0YWJsZVxuXHRcdFx0dGhpcy4kZWwuc29ydGFibGUoIHtcblx0XHRcdFx0Y29udGFpbm1lbnQ6ICdwYXJlbnQnLFxuXHRcdFx0XHRheGlzOiBzb3J0X2F4aXMsXG5cdFx0XHRcdHNjcm9sbFNlbnNpdGl2aXR5OiA0MCxcblx0XHRcdFx0dG9sZXJhbmNlOiAncG9pbnRlcicsXG5cdFx0XHRcdG9wYWNpdHk6IDAuNlxuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxufSApO1xuXG4iLCIvKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlLCB3cCAqL1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvZmlsZS11cGxvYWQvdmlld3MvZmlsZS11cGxvYWQtcXVldWUuaHRtbCc7XG5cbmV4cG9ydCBjb25zdCBGaWxlVXBsb2FkUXVldWVNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCgge1xuXHRkZWZhdWx0czoge1xuXHRcdGlkOiAwLFxuXHRcdGZpbGVuYW1lOiAnJyxcblx0XHRwcm9ncmVzczogMCxcblx0XHRlcnJvck1zZzogJydcblx0fVxufSApO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBGaWxlVXBsb2FkUXVldWVJdGVtID0gTWFyaW9uZXR0ZS5WaWV3LmV4dGVuZCgge1xuXHRtb2RlbDogRmlsZVVwbG9hZFF1ZXVlTW9kZWwsXG5cblx0dGFnTmFtZTogJ2xpJyxcblxuXHR0ZW1wbGF0ZTogXy50ZW1wbGF0ZSggdGVtcGxhdGUgKSxcblxuXHRhdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNsYXNzOiAncG9kcy1kZnYtbGlzdC1pdGVtJyxcblx0XHRcdGlkOiB0aGlzLm1vZGVsLmdldCggJ2lkJyApXG5cdFx0fTtcblx0fSxcblxuXHRtb2RlbEV2ZW50czoge1xuXHRcdCdjaGFuZ2UnOiAnb25Nb2RlbENoYW5nZWQnXG5cdH0sXG5cblx0b25Nb2RlbENoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnJlbmRlcigpO1xuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgRmlsZVVwbG9hZFF1ZXVlID0gTWFyaW9uZXR0ZS5Db2xsZWN0aW9uVmlldy5leHRlbmQoIHtcblx0dGFnTmFtZTogJ3VsJyxcblxuXHRjbGFzc05hbWU6ICdwb2RzLWRmdi1saXN0IHBvZHMtZGZ2LWxpc3QtcXVldWUnLFxuXG5cdGNoaWxkVmlldzogRmlsZVVwbG9hZFF1ZXVlSXRlbVxufSApO1xuIiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBvZHNERlZCYXNlSW5wdXQgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29tcG9uZW50cy9iYXNlLWlucHV0JztcbmltcG9ydCB7IHZhbGlkYXRpb25SdWxlcyB9IGZyb20gJ3BvZHMtZGZ2L3NyYy92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcnVsZXMnO1xuXG5leHBvcnQgY29uc3QgUG9kc0RGVk51bWJlciA9ICggcHJvcHMgKSA9PiB7XG5cdC8vIG5vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuXHRwcm9wcy52YWxpZGF0aW9uLmFkZFJ1bGVzKCBbXG5cdFx0e1xuXHRcdFx0cnVsZTogdmFsaWRhdGlvblJ1bGVzLm1heCggcHJvcHMudmFsdWUsIHByb3BzLmZpZWxkQ29uZmlnLm51bWJlcl9tYXggKSxcblx0XHRcdGNvbmRpdGlvbjogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHJ1bGU6IHZhbGlkYXRpb25SdWxlcy5taW4oIHByb3BzLnZhbHVlLCBwcm9wcy5maWVsZENvbmZpZy5udW1iZXJfbWluICksXG5cdFx0XHRjb25kaXRpb246IHRydWUsXG5cdFx0fSxcblx0XSApO1xuXG5cdC8vIG5vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuXHRyZXR1cm4gKFxuXHRcdDxQb2RzREZWQmFzZUlucHV0XG5cdFx0XHR0eXBlPXsnMScgPT09IHByb3BzLmZpZWxkQ29uZmlnLm51bWJlcl9odG1sNSA/ICdudW1iZXInIDogJ3RleHQnfVxuXHRcdFx0bWluPXtwcm9wcy5maWVsZENvbmZpZy5udW1iZXJfbWlufVxuXHRcdFx0bWF4PXtwcm9wcy5maWVsZENvbmZpZy5udW1iZXJfbWF4fVxuXHRcdFx0ey4uLnByb3BzfVxuXHRcdC8+XG5cdCk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBvZHNERlZCYXNlSW5wdXQgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29tcG9uZW50cy9iYXNlLWlucHV0JztcblxuZXhwb3J0IGNvbnN0IFBvZHNERlZQYXNzd29yZCA9ICggcHJvcHMgKSA9PiB7XG5cblx0cmV0dXJuIChcblx0XHQ8UG9kc0RGVkJhc2VJbnB1dFxuXHRcdFx0dHlwZT1cInBhc3N3b3JkXCJcblx0XHRcdHsuLi5wcm9wc31cblx0XHQvPlxuXHQpO1xufTtcbiIsIi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUgKi9cblxuZXhwb3J0IGNvbnN0IFBpY2tGaWVsZE1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKCB7XG5cdGRlZmF1bHRzOiB7XG5cdFx0J3ZpZXdfbmFtZSc6ICdzZWxlY3QnLFxuXHRcdCdpZnJhbWVfc3JjJzogJycsXG5cdFx0J3BpY2tfZm9ybWF0X3R5cGUnOiAnc2luZ2xlJyxcblx0XHQncGlja19zaG93X2ljb24nOiBmYWxzZSxcblx0XHQncGlja19zaG93X3ZpZXdfbGluayc6IGZhbHNlLFxuXHRcdCdwaWNrX3Nob3dfZWRpdF9saW5rJzogZmFsc2Vcblx0fVxufSApO1xuIiwiLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4vKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlLCB3cCwgUG9kc0kxOG4gKi9cblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay9waWNrLWxheW91dC5odG1sJztcblxuaW1wb3J0IHsgUG9kc0RGVkZpZWxkTW9kZWwgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29yZS9wb2RzLWZpZWxkLW1vZGVsJztcbmltcG9ydCB7IFBvZHNERlZGaWVsZExheW91dCB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL3BvZHMtZmllbGQtdmlld3MnO1xuXG5pbXBvcnQgeyBJZnJhbWVGcmFtZSB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL2lmcmFtZS1mcmFtZSc7XG5cbmltcG9ydCB7IFJlbGF0aW9uc2hpcENvbGxlY3Rpb24gfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svcmVsYXRpb25zaGlwLW1vZGVsJztcbmltcG9ydCB7IFBpY2tGaWVsZE1vZGVsIH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3BpY2stZmllbGQtbW9kZWwnO1xuXG5pbXBvcnQgeyBSYWRpb1ZpZXcgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svdmlld3MvcmFkaW8tdmlldyc7XG5pbXBvcnQgeyBDaGVja2JveFZpZXcgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svdmlld3MvY2hlY2tib3gtdmlldyc7XG5pbXBvcnQgeyBTZWxlY3RWaWV3IH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3ZpZXdzL3NlbGVjdC12aWV3JztcbmltcG9ydCB7IExpc3RWaWV3IH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3ZpZXdzL2xpc3Qtdmlldyc7XG5pbXBvcnQgeyBBZGROZXcgfSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svdmlld3MvYWRkLW5ldyc7XG5cbmNvbnN0IHZpZXdzID0ge1xuXHQnY2hlY2tib3gnOiBDaGVja2JveFZpZXcsXG5cdCdzZWxlY3QnOiBTZWxlY3RWaWV3LFxuXHQnc2VsZWN0Mic6IFNlbGVjdFZpZXcsICAvLyBTZWxlY3RWaWV3IGhhbmRsZXMgc2VsZWN0MiBhcyB3ZWxsXG5cdCdyYWRpbyc6IFJhZGlvVmlldyxcblx0J2xpc3QnOiBMaXN0Vmlld1xufTtcblxubGV0IG1vZGFsSUZyYW1lO1xuXG4vKipcbiAqIEBleHRlbmRzIEJhY2tib25lLlZpZXdcbiAqL1xuZXhwb3J0IGNvbnN0IFBpY2sgPSBQb2RzREZWRmllbGRMYXlvdXQuZXh0ZW5kKCB7XG5cdGNoaWxkVmlld0V2ZW50UHJlZml4OiBmYWxzZSwgLy8gRGlzYWJsZSBpbXBsaWNpdCBldmVudCBsaXN0ZW5lcnMgaW4gZmF2b3Igb2YgZXhwbGljaXQgY2hpbGRWaWV3VHJpZ2dlcnMgYW5kIGNoaWxkVmlld0V2ZW50c1xuXG5cdHRlbXBsYXRlOiBfLnRlbXBsYXRlKCB0ZW1wbGF0ZSApLFxuXG5cdHJlZ2lvbnM6IHtcblx0XHRhdXRvY29tcGxldGU6ICcucG9kcy11aS1saXN0LWF1dG9jb21wbGV0ZScsXG5cdFx0bGlzdDogJy5wb2RzLXBpY2stdmFsdWVzJyxcblx0XHRhZGROZXc6ICcucG9kcy11aS1hZGQtbmV3J1xuXHR9LFxuXG5cdGNoaWxkVmlld0V2ZW50czoge1xuXHRcdCdjaGlsZHZpZXc6cmVtb3ZlOml0ZW06Y2xpY2snOiAnb25DaGlsZHZpZXdSZW1vdmVJdGVtQ2xpY2snLFxuXHRcdCdjaGlsZHZpZXc6ZWRpdDppdGVtOmNsaWNrJzogJ29uQ2hpbGR2aWV3RWRpdEl0ZW1DbGljaycsXG5cdFx0J2NoaWxkdmlldzpzZWxlY3Rpb246bGltaXQ6b3Zlcic6ICdvbkNoaWxkdmlld1NlbGVjdGlvbkxpbWl0T3ZlcicsXG5cdFx0J2NoaWxkdmlldzpzZWxlY3Rpb246bGltaXQ6dW5kZXInOiAnb25DaGlsZHZpZXdTZWxlY3Rpb25MaW1pdFVuZGVyJyxcblx0XHQnY2hpbGR2aWV3OmNoYW5nZTpzZWxlY3RlZCc6ICdvbkNoaWxkdmlld0NoYW5nZVNlbGVjdGVkJyxcblx0XHQnY2hpbGR2aWV3OmFkZDpuZXcnOiAnb25DaGlsZHZpZXdBZGROZXcnXG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRvbkJlZm9yZVJlbmRlcjogZnVuY3Rpb24gKCkge1xuXHRcdGlmICggdGhpcy5jb2xsZWN0aW9uID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLmNvbGxlY3Rpb24gPSBuZXcgUmVsYXRpb25zaGlwQ29sbGVjdGlvbiggdGhpcy5maWVsZEl0ZW1EYXRhICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0b25SZW5kZXI6IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmZpZWxkQ29uZmlnID0gbmV3IFBpY2tGaWVsZE1vZGVsKCB0aGlzLm1vZGVsLmdldCggJ2ZpZWxkQ29uZmlnJyApICk7XG5cblx0XHQvLyBBZGQgTmV3P1xuXHRcdC8vIG5vaW5zcGVjdGlvbiBFcXVhbGl0eUNvbXBhcmlzb25XaXRoQ29lcmNpb25KUyAod2h5IHdvdWxkIHdlIHJlamVjdCBcIjFcIj8pXG5cdFx0aWYgKCAnJyAhPT0gdGhpcy5maWVsZENvbmZpZy5nZXQoICdpZnJhbWVfc3JjJyApICYmIDEgPT0gdGhpcy5maWVsZENvbmZpZy5nZXQoICdwaWNrX2FsbG93X2FkZF9uZXcnICkgKSB7XG5cdFx0XHR0aGlzLnNob3dBZGROZXcoKTtcblx0XHR9XG5cblx0XHQvLyBBdXRvY29tcGxldGU/XG5cdFx0aWYgKCAnbGlzdCcgPT09IHRoaXMuZmllbGRDb25maWcuZ2V0KCAndmlld19uYW1lJyApICkge1xuXHRcdFx0dGhpcy5idWlsZEF1dG9jb21wbGV0ZSgpO1xuXHRcdH1cblxuXHRcdC8vIEJ1aWxkIHRoZSBsaXN0IGxhc3QsIGV2ZW50cyBmaXJlZCBieSB0aGUgbGlzdCAobGlrZSBzZWxlY3Rpb24gbGltaXQpIG1heSBpbXBhY3Qgc3RhdGUgaW4gb3RoZXIgdmlld3Mgd2UgbWFuYWdlXG5cdFx0dGhpcy5zaG93TGlzdCgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBUaGlzIGlzIGZvciB0aGUgTGlzdCBWaWV3J3MgYXV0b2NvbXBsZXRlIGZvciBzZWxlY3QgZnJvbSBleGlzdGluZ1xuXHQgKi9cblx0YnVpbGRBdXRvY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcblx0XHRsZXQgZmllbGRDb25maWcsIG1vZGVsLCBjb2xsZWN0aW9uLCB2aWV3O1xuXHRcdGNvbnN0IHBpY2tMaW1pdCA9ICt0aGlzLmZpZWxkQ29uZmlnLmdldCggJ3BpY2tfbGltaXQnICk7IC8vIFVuYXJ5IHBsdXMgZm9yY2VzIGNhc3QgdG8gbnVtYmVyXG5cblx0XHRmaWVsZENvbmZpZyA9IHtcblx0XHRcdHZpZXdfbmFtZTogJ3NlbGVjdDInLFxuXHRcdFx0cGlja19mb3JtYXRfdHlwZTogJ211bHRpJyxcblx0XHRcdHNlbGVjdEZyb21FeGlzdGluZzogdHJ1ZSxcblx0XHRcdGFqYXhfZGF0YTogdGhpcy5maWVsZENvbmZpZy5nZXQoICdhamF4X2RhdGEnICksXG5cdFx0XHRzZWxlY3QyX292ZXJyaWRlczogdGhpcy5maWVsZENvbmZpZy5nZXQoICdzZWxlY3QyX292ZXJyaWRlcycgKSxcblx0XHRcdGxhYmVsOiB0aGlzLmZpZWxkQ29uZmlnLmdldCggJ2xhYmVsJyApLFxuXHRcdFx0cGlja19saW1pdDogcGlja0xpbWl0XG5cdFx0fTtcblxuXHRcdC8vIFRoZSBhdXRvY29tcGxldGUgcG9ydGlvbiBvZiBMaXN0IFZpZXcgZG9lc24ndCB0cmFjayBzZWxlY3RlZCBpdGVtczsgZGlzYWJsZSBpZiB3ZSdyZSBhdCB0aGUgc2VsZWN0aW9uIGxpbWl0XG5cdFx0aWYgKCB0aGlzLmNvbGxlY3Rpb24uZmlsdGVyQnlTZWxlY3RlZCgpLmxlbmd0aCA+PSBwaWNrTGltaXQgJiYgMCAhPT0gcGlja0xpbWl0ICkge1xuXG5cdFx0XHRmaWVsZENvbmZpZy5saW1pdERpc2FibGUgPSB0cnVlO1xuXHRcdFx0dGhpcy5vbkNoaWxkdmlld1NlbGVjdGlvbkxpbWl0T3ZlcigpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5vbkNoaWxkdmlld1NlbGVjdGlvbkxpbWl0VW5kZXIoKTtcblx0XHR9XG5cblx0XHRtb2RlbCA9IG5ldyBQb2RzREZWRmllbGRNb2RlbCggeyBmaWVsZENvbmZpZzogZmllbGRDb25maWcgfSApO1xuXHRcdGNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24uZmlsdGVyQnlVbnNlbGVjdGVkKCk7XG5cdFx0dmlldyA9IG5ldyBTZWxlY3RWaWV3KCB7IGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sIGZpZWxkTW9kZWw6IG1vZGVsIH0gKTtcblxuXHRcdC8vIFByb3ZpZGUgYSBjdXN0b20gbGlzdCBmaWx0ZXIgZm9yIHRoZSBhdXRvY29tcGxldGUgcG9ydGlvbidzIEFKQVggZGF0YSBsaXN0c1xuXHRcdHZpZXcuZmlsdGVyQWpheExpc3QgPSB0aGlzLmZpbHRlckFqYXhMaXN0LmJpbmQoIHRoaXMgKTtcblxuXHRcdC8vIFJlYnVpbGQgZnJvbSBzY3JhdGNoXG5cdFx0dGhpcy5zaG93Q2hpbGRWaWV3KCAnYXV0b2NvbXBsZXRlJywgdmlldyApO1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0c2hvd0xpc3Q6IGZ1bmN0aW9uICgpIHtcblx0XHRsZXQgdmlld05hbWUsIFZpZXcsIGxpc3Q7XG5cblx0XHQvLyBTZXR1cCB0aGUgdmlldyB0byBiZSB1c2VkXG5cdFx0dmlld05hbWUgPSB0aGlzLmZpZWxkQ29uZmlnLmdldCggJ3ZpZXdfbmFtZScgKTtcblx0XHRpZiAoIHZpZXdzWyB2aWV3TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBJbnZhbGlkIHZpZXcgbmFtZSBcIiR7dmlld05hbWV9XCJgICk7XG5cdFx0fVxuXHRcdFZpZXcgPSB2aWV3c1sgdmlld05hbWUgXTtcblx0XHRsaXN0ID0gbmV3IFZpZXcoIHsgY29sbGVjdGlvbjogdGhpcy5jb2xsZWN0aW9uLCBmaWVsZE1vZGVsOiB0aGlzLm1vZGVsIH0gKTtcblxuXHRcdHRoaXMuc2hvd0NoaWxkVmlldyggJ2xpc3QnLCBsaXN0ICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRzaG93QWRkTmV3OiBmdW5jdGlvbiAoKSB7XG5cdFx0bGV0IGFkZE5ldyA9IG5ldyBBZGROZXcoIHsgZmllbGRNb2RlbDogdGhpcy5tb2RlbCB9ICk7XG5cdFx0dGhpcy5zaG93Q2hpbGRWaWV3KCAnYWRkTmV3JywgYWRkTmV3ICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIExpc3QgVmlld3MgbmVlZCB0byBmaWx0ZXIgaXRlbXMgYWxyZWFkeSBzZWxlY3RlZCBmcm9tIHRoZWlyIHNlbGVjdCBmcm9tIGV4aXN0aW5nIGxpc3QuICBUaGUgQUpBWCBmdW5jdGlvblxuXHQgKiBpdHNlbGYgZG9lcyBub3QgZmlsdGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0gZGF0YVxuXHQgKi9cblx0ZmlsdGVyQWpheExpc3Q6IGZ1bmN0aW9uICggZGF0YSApIHtcblx0XHRjb25zdCBzZWxlY3RlZEl0ZW1zID0gdGhpcy5jb2xsZWN0aW9uLmZpbHRlckJ5U2VsZWN0ZWQoKTtcblx0XHRjb25zdCByZXR1cm5MaXN0ID0gW107XG5cblx0XHQvLyBMb29wIHRocm91Z2ggdGhlIGl0ZW1zIHJldHVybmVkIHZpYSBhamF4XG5cdFx0Xy5lYWNoKCBkYXRhLnJlc3VsdHMsIGZ1bmN0aW9uICggZWxlbWVudCApIHtcblx0XHRcdGVsZW1lbnQudGV4dCA9IGVsZW1lbnQubmFtZTsgLy8gU2VsZWN0MiBuZWVkcyB0aGUgXCJ0ZXh0XCIga2V5IGJ1dCBvdXIgbW9kZWwgdXNlcyBcIm5hbWVcIlxuXG5cdFx0XHQvLyBPbmx5IGtlZXAgY2hvaWNlcyB0aGF0IGhhdmVuJ3QgYmVlbiBzZWxlY3RlZCB5ZXQsIHdlIGRvbid0IHdhbnQgc2VsZWN0ZWQgaXRlbXMgaW4gdGhlIGF1dG9jb21wbGV0ZSBwb3J0aW9uXG5cdFx0XHRpZiAoICFzZWxlY3RlZEl0ZW1zLmdldCggZWxlbWVudC5pZCApICkge1xuXHRcdFx0XHRyZXR1cm5MaXN0LnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvLyBUaGUgY29sbGVjdGlvbiBtYXkgYmUgcGFydGlhbCBpbiBhamF4IG1vZGUsIG1ha2Ugc3VyZSB3ZSBhZGQgYW55IGl0ZW1zIHdlIGRpZG4ndCB5ZXQgaGF2ZVxuXHRcdHRoaXMuY29sbGVjdGlvbi5hZGQoIHJldHVybkxpc3QgKTtcblx0XHR0aGlzLmdldENoaWxkVmlldyggJ2F1dG9jb21wbGV0ZScgKS5zZXRDb2xsZWN0aW9uKCB0aGlzLmNvbGxlY3Rpb24uZmlsdGVyQnlVbnNlbGVjdGVkKCkgKTtcblxuXHRcdHJldHVybiB7ICdyZXN1bHRzJzogcmV0dXJuTGlzdCB9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gY2hpbGRWaWV3XG5cdCAqL1xuXHRvbkNoaWxkdmlld1NlbGVjdGlvbkxpbWl0T3ZlcjogZnVuY3Rpb24gKCBjaGlsZFZpZXcgKSB7XG5cdFx0Y29uc3QgYWRkTmV3ID0gdGhpcy5nZXRDaGlsZFZpZXcoICdhZGROZXcnICk7XG5cdFx0aWYgKCBhZGROZXcgKSB7XG5cdFx0XHRhZGROZXcuZGlzYWJsZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIGNoaWxkVmlld1xuXHQgKi9cblx0b25DaGlsZHZpZXdTZWxlY3Rpb25MaW1pdFVuZGVyOiBmdW5jdGlvbiAoIGNoaWxkVmlldyApIHtcblx0XHRjb25zdCBhZGROZXcgPSB0aGlzLmdldENoaWxkVmlldyggJ2FkZE5ldycgKTtcblx0XHRpZiAoIGFkZE5ldyApIHtcblx0XHRcdGFkZE5ldy5lbmFibGUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFwiUmVtb3ZlXCIgaW4gbGlzdCB2aWV3IGp1c3QgdG9nZ2xlcyBhbiBpdGVtJ3Mgc2VsZWN0ZWQgYXR0cmlidXRlXG5cdCAqXG5cdCAqIEBwYXJhbSBjaGlsZFZpZXdcblx0ICovXG5cdG9uQ2hpbGR2aWV3UmVtb3ZlSXRlbUNsaWNrOiBmdW5jdGlvbiAoIGNoaWxkVmlldyApIHtcblx0XHRjaGlsZFZpZXcubW9kZWwudG9nZ2xlU2VsZWN0ZWQoKTtcblx0XHR0aGlzLmdldENoaWxkVmlldyggJ2xpc3QnICkucmVuZGVyKCk7XG5cblx0XHQvLyBLZWVwIGF1dG9jb21wbGV0ZSBpbiBzeW5jLCByZW1vdmVkIGl0ZW1zIHNob3VsZCBub3cgYmUgYXZhaWxhYmxlIGNob2ljZXNcblx0XHRpZiAoICdsaXN0JyA9PT0gdGhpcy5maWVsZENvbmZpZy5nZXQoICd2aWV3X25hbWUnICkgKSB7XG5cdFx0XHR0aGlzLmJ1aWxkQXV0b2NvbXBsZXRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcGFyYW0gY2hpbGRWaWV3XG5cdCAqL1xuXHRvbkNoaWxkdmlld0FkZE5ldzogZnVuY3Rpb24gKCBjaGlsZFZpZXcgKSB7XG5cdFx0Y29uc3QgZmllbGRDb25maWcgPSB0aGlzLm1vZGVsLmdldCggJ2ZpZWxkQ29uZmlnJyApO1xuXG5cdFx0bW9kYWxJRnJhbWUgPSBuZXcgSWZyYW1lRnJhbWUoIHtcblx0XHRcdHRpdGxlOiBmaWVsZENvbmZpZy5pZnJhbWVfdGl0bGVfYWRkLFxuXHRcdFx0c3JjOiBmaWVsZENvbmZpZy5pZnJhbWVfc3JjXG5cdFx0fSApO1xuXG5cdFx0dGhpcy5zZXRNb2RhbExpc3RlbmVycygpO1xuXHRcdG1vZGFsSUZyYW1lLm1vZGFsLm9wZW4oKTtcblx0fSxcblxuXHQvKipcblx0ICogQHBhcmFtIGNoaWxkVmlld1xuXHQgKi9cblx0b25DaGlsZHZpZXdFZGl0SXRlbUNsaWNrOiBmdW5jdGlvbiAoIGNoaWxkVmlldyApIHtcblx0XHRjb25zdCBmaWVsZENvbmZpZyA9IHRoaXMubW9kZWwuZ2V0KCAnZmllbGRDb25maWcnICk7XG5cblx0XHRtb2RhbElGcmFtZSA9IG5ldyBJZnJhbWVGcmFtZSgge1xuXHRcdFx0dGl0bGU6IGZpZWxkQ29uZmlnLmlmcmFtZV90aXRsZV9lZGl0LFxuXHRcdFx0c3JjOiBjaGlsZFZpZXcudWkuZWRpdEJ1dHRvbi5hdHRyKCAnaHJlZicgKVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuc2V0TW9kYWxMaXN0ZW5lcnMoKTtcblx0XHRtb2RhbElGcmFtZS5tb2RhbC5vcGVuKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBjaGlsZFZpZXdcblx0ICovXG5cdG9uQ2hpbGR2aWV3Q2hhbmdlU2VsZWN0ZWQ6IGZ1bmN0aW9uICggY2hpbGRWaWV3ICkge1xuXG5cdFx0Ly8gUmVmcmVzaCB0aGUgYXV0b2NvbXBsZXRlIGFuZCBMaXN0IFZpZXcgbGlzdHMgb24gYXV0b2NvbXBsZXRlIHNlbGVjdGlvblxuXHRcdGlmICggY2hpbGRWaWV3LmZpZWxkQ29uZmlnLnNlbGVjdEZyb21FeGlzdGluZyApIHtcblx0XHRcdF8uZGVmZXIoIHRoaXMuYnVpbGRBdXRvY29tcGxldGUuYmluZCggdGhpcyApICk7XG5cdFx0XHR0aGlzLmdldENoaWxkVmlldyggJ2xpc3QnICkucmVuZGVyKCk7XG5cdFx0fVxuXHR9LFxuXG5cdHNldE1vZGFsTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG5cdFx0alF1ZXJ5KCB3aW5kb3cgKS5vbiggJ2Rmdjptb2RhbDp1cGRhdGUnLCB0aGlzLm1vZGFsU3VjY2Vzcy5iaW5kKCB0aGlzICkgKTtcblx0XHRqUXVlcnkoIHdpbmRvdyApLm9uKCAnZGZ2Om1vZGFsOmNhbmNlbCcsIHRoaXMubW9kYWxDYW5jZWwuYmluZCggdGhpcyApICk7XG5cdH0sXG5cblx0Y2xlYXJNb2RhbExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuXHRcdGpRdWVyeSggd2luZG93ICkub2ZmKCAnZGZ2Om1vZGFsOnVwZGF0ZScgKTtcblx0XHRqUXVlcnkoIHdpbmRvdyApLm9mZiggJ2Rmdjptb2RhbDpjYW5jZWwnICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcGFyYW0gZGF0YVxuXHQgKi9cblx0bW9kYWxTdWNjZXNzOiBmdW5jdGlvbiAoIGV2ZW50LCBkYXRhICkge1xuXHRcdGNvbnN0IGl0ZW1Nb2RlbCA9IHRoaXMuY29sbGVjdGlvbi5nZXQoIGRhdGEuaWQgKTtcblxuXHRcdGlmICggaXRlbU1vZGVsICkge1xuXHRcdFx0Ly8gRWRpdDogdXBkYXRlIGFuIGV4aXN0aW5nIG1vZGVsIGFuZCBmb3JjZSBhIHJlLXJlbmRlclxuXHRcdFx0aXRlbU1vZGVsLnNldCggZGF0YSApO1xuXHRcdFx0dGhpcy5nZXRDaGlsZFZpZXcoICdsaXN0JyApLnJlbmRlcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBBZGQgbmV3OiBjcmVhdGUgYSBuZXcgbW9kZWwgaW4gdGhlIGNvbGxlY3Rpb25cblx0XHRcdHRoaXMuY29sbGVjdGlvbi5hZGQoIGRhdGEgKTtcblx0XHR9XG5cblx0XHR0aGlzLmNsZWFyTW9kYWxMaXN0ZW5lcnMoKTtcblx0XHRtb2RhbElGcmFtZS5tb2RhbC5jbG9zZSgge30gKTtcblx0fSxcblxuXHQvKipcblx0ICpcblx0ICovXG5cdG1vZGFsQ2FuY2VsOiBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5jbGVhck1vZGFsTGlzdGVuZXJzKCk7XG5cdH1cblxufSApO1xuIiwiLypnbG9iYWwgalF1ZXJ5LCBfLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSAqL1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBSZWxhdGlvbnNoaXBNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCgge1xuXHRkZWZhdWx0czoge1xuXHRcdCdpZCc6IDAsXG5cdFx0J25hbWUnOiAnJyxcblx0XHQnaWNvbic6ICcnLFxuXHRcdCdsaW5rJzogJycsXG5cdFx0J2VkaXRfbGluayc6ICcnLFxuXHRcdCdzZWxlY3RlZCc6IGZhbHNlXG5cdH0sXG5cblx0dG9nZ2xlU2VsZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnNldCggJ3NlbGVjdGVkJywgIXRoaXMuZ2V0KCAnc2VsZWN0ZWQnICkgKTtcblx0fVxufSApO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBSZWxhdGlvbnNoaXBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoIHtcblx0bW9kZWw6IFJlbGF0aW9uc2hpcE1vZGVsLFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0geyA/c3RyaW5nW10gfSBpZHNcblx0ICovXG5cdHNldFNlbGVjdGVkOiBmdW5jdGlvbiAoIGlkcyApIHtcblx0XHR0aGlzLm1hcCggZnVuY3Rpb24gKCB0aGlzTW9kZWwgKSB7XG5cdFx0XHRjb25zdCBzZWxlY3RlZCA9IF8uY29udGFpbnMoIGlkcywgdGhpc01vZGVsLmdldCggJ2lkJyApICsgJycgKTtcblx0XHRcdHRoaXNNb2RlbC5zZXQoICdzZWxlY3RlZCcsIHNlbGVjdGVkICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBuZXcgY29sbGVjdGlvbiBjb250YWluaW5nIGp1c3QgdGhlIHNlbGVjdGVkIGl0ZW1zIGluIHRoaXMgb25lXG5cdCAqXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0ZmlsdGVyQnlTZWxlY3RlZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gR2V0IGFuIGFycmF5IHdpdGggb25seSB0aGUgc2VsZWN0ZWQgaXRlbXNcblx0XHRjb25zdCBmaWx0ZXJlZCA9IHRoaXMuZmlsdGVyKCBmdW5jdGlvbiAoIGl0ZW1Nb2RlbCApIHtcblx0XHRcdHJldHVybiAoIGl0ZW1Nb2RlbC5nZXQoICdzZWxlY3RlZCcgKSApO1xuXHRcdH0gKTtcblxuXHRcdC8vIHRoaXMuZmlsdGVyIGlzIGdvaW5nIHRvIHJldHVybiBhbiBhcnJheSwgc28gY3JlYXRlIGEgY29sbGVjdGlvbiBvdXQgb2YgaXRcblx0XHRyZXR1cm4gbmV3IFJlbGF0aW9uc2hpcENvbGxlY3Rpb24oIGZpbHRlcmVkICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybiBhIG5ldyBjb2xsZWN0aW9uIGNvbnRhaW5pbmcganVzdCB0aGUgdW5zZWxlY3RlZCBpdGVtcyBpbiB0aGlzIG9uZVxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdGZpbHRlckJ5VW5zZWxlY3RlZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gR2V0IGFuIGFycmF5IHdpdGggb25seSB0aGUgdW5zZWxlY3RlZCBpdGVtc1xuXHRcdGNvbnN0IGZpbHRlcmVkID0gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uICggaXRlbU1vZGVsICkge1xuXHRcdFx0cmV0dXJuICEoIGl0ZW1Nb2RlbC5nZXQoICdzZWxlY3RlZCcgKSApO1xuXHRcdH0gKTtcblxuXHRcdC8vIHRoaXMuZmlsdGVyIGlzIGdvaW5nIHRvIHJldHVybiBhbiBhcnJheSwgc28gY3JlYXRlIGEgY29sbGVjdGlvbiBvdXQgb2YgaXRcblx0XHRyZXR1cm4gbmV3IFJlbGF0aW9uc2hpcENvbGxlY3Rpb24oIGZpbHRlcmVkICk7XG5cdH1cblxufSApO1xuXG4iLCIvKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlLCB3cCAqL1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay92aWV3cy9hZGQtbmV3Lmh0bWwnO1xuXG5pbXBvcnQgeyBQb2RzRmllbGRWaWV3IH0gZnJvbSAncG9kcy1kZnYvc3JjL2NvcmUvcG9kcy1maWVsZC12aWV3cyc7XG5cbmNvbnN0IERJU0FCTEVEX0NMQVNTID0gJ2J1dHRvbi1kaXNhYmxlZCc7XG5cbmV4cG9ydCBjb25zdCBBZGROZXcgPSBQb2RzRmllbGRWaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAnZGl2JyxcblxuXHRjbGFzc05hbWU6ICdwb2RzZm9ybS1kZnYtbGlzdC1yZWxhdGlvbnNoaXAtY29udGFpbmVyJyxcblxuXHR1aToge1xuXHRcdGFkZEJ1dHRvbjogJ2EucG9kcy1yZWxhdGVkLWFkZC1uZXcnXG5cdH0sXG5cblx0dGVtcGxhdGU6IF8udGVtcGxhdGUoIHRlbXBsYXRlICksXG5cblx0dHJpZ2dlcnM6IHtcblx0XHQnY2xpY2sgQHVpLmFkZEJ1dHRvbic6ICdhZGQ6bmV3OmNsaWNrJ1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0ZGlzYWJsZTogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IGFkZEJ1dHRvbiA9IHRoaXMuZ2V0VUkoICdhZGRCdXR0b24nICk7XG5cdFx0YWRkQnV0dG9uLmFkZENsYXNzKCBESVNBQkxFRF9DTEFTUyApOyAvLyBOb3RlOiB0aGlzIGp1c3Qgc3R5bGVzIHRoZSBsaW5rIChidXR0b24pLCBjbGljayBldmVudCBlbmZvcmNlc1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0ZW5hYmxlOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3QgYWRkQnV0dG9uID0gdGhpcy5nZXRVSSggJ2FkZEJ1dHRvbicgKTtcblx0XHRhZGRCdXR0b24ucmVtb3ZlQ2xhc3MoIERJU0FCTEVEX0NMQVNTICk7IC8vIE5vdGU6IHRoaXMganVzdCBzdHlsZXMgdGhlIGxpbmsgKGJ1dHRvbiksIGNsaWNrIGV2ZW50IGVuZm9yY2VzXG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRvbkFkZE5ld0NsaWNrOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3QgYWRkQnV0dG9uID0gdGhpcy5nZXRVSSggJ2FkZEJ1dHRvbicgKTtcblxuXHRcdC8vIE9ubHkgcGFzcyB0aGUgZXZlbnQgdXAgdGhlIHZpZXcgY2hhaW4gaWYgd2UncmUgZW5hYmxlZFxuXHRcdGlmICggIWFkZEJ1dHRvbi5oYXNDbGFzcyggRElTQUJMRURfQ0xBU1MgKSApIHtcblx0XHRcdHRoaXMudHJpZ2dlciggJ2NoaWxkdmlldzphZGQ6bmV3JywgdGhpcyApO1xuXHRcdH1cblx0fVxufSApO1xuIiwiLypnbG9iYWwgalF1ZXJ5LCBfLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSwgd3AgKi9cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGRzL3BpY2svdmlld3MvY2hlY2tib3gtaXRlbS5odG1sJztcblxuaW1wb3J0IHsgUG9kc0ZpZWxkTGlzdFZpZXcsIFBvZHNGaWVsZFZpZXcgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29yZS9wb2RzLWZpZWxkLXZpZXdzJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgQ2hlY2tib3hJdGVtID0gUG9kc0ZpZWxkVmlldy5leHRlbmQoIHtcblx0Y2hpbGRWaWV3RXZlbnRQcmVmaXg6IGZhbHNlLCAvLyBEaXNhYmxlIGltcGxpY2l0IGV2ZW50IGxpc3RlbmVycyBpbiBmYXZvciBvZiBleHBsaWNpdCBjaGlsZFZpZXdUcmlnZ2VycyBhbmQgY2hpbGRWaWV3RXZlbnRzXG5cblx0dGFnTmFtZTogJ2xpJyxcblxuXHR0ZW1wbGF0ZTogXy50ZW1wbGF0ZSggdGVtcGxhdGUgKSxcblxuXHRjbGFzc05hbWU6ICdwb2RzLXBpY2snLFxuXG5cdHVpOiB7XG5cdFx0Y2hlY2tib3g6ICdpbnB1dC5wb2RzLWZvcm0tdWktZmllbGQtdHlwZS1waWNrJ1xuXHR9LFxuXG5cdHRyaWdnZXJzOiB7XG5cdFx0J2NsaWNrIEB1aS5jaGVja2JveCc6ICd0b2dnbGU6c2VsZWN0ZWQnXG5cdH0sXG5cblx0bW9kZWxFdmVudHM6IHtcblx0XHQnY2hhbmdlJzogJ21vZGVsQ2hhbmdlZCdcblx0fSxcblxuXHR0ZW1wbGF0ZUNvbnRleHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0b3JkaW5hbDogdGhpcy5tb2RlbC5jb2xsZWN0aW9uLmluZGV4T2YoIHRoaXMubW9kZWwgKVxuXHRcdH07XG5cdH0sXG5cblx0bW9kZWxDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5yZW5kZXIoKTtcblx0fVxufSApO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBDaGVja2JveFZpZXcgPSBQb2RzRmllbGRMaXN0Vmlldy5leHRlbmQoIHtcblx0Y2hpbGRWaWV3RXZlbnRQcmVmaXg6IGZhbHNlLCAvLyBEaXNhYmxlIGltcGxpY2l0IGV2ZW50IGxpc3RlbmVycyBpbiBmYXZvciBvZiBleHBsaWNpdCBjaGlsZFZpZXdUcmlnZ2VycyBhbmQgY2hpbGRWaWV3RXZlbnRzXG5cblx0dGFnTmFtZTogJ3VsJyxcblxuXHRjbGFzc05hbWU6ICdwb2RzLWNoZWNrYm94LXZpZXcnLFxuXG5cdGNoaWxkVmlldzogQ2hlY2tib3hJdGVtLFxuXG5cdGNoaWxkVmlld0V2ZW50czoge1xuXHRcdCd0b2dnbGU6c2VsZWN0ZWQnOiAnb25DaGlsZHZpZXdUb2dnbGVTZWxlY3RlZCdcblx0fSxcblxuXHQvKipcblx0ICpcblx0ICovXG5cdG9uQXR0YWNoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBDaGVjayBpbml0aWFsIHNlbGVjdGlvbiBsaW1pdCBzdGF0dXMgYW5kIGVuZm9yY2UgaXQgaWYgbmVlZGVkXG5cdFx0aWYgKCAhdGhpcy52YWxpZGF0ZVNlbGVjdGlvbkxpbWl0KCkgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdGlvbkxpbWl0T3ZlcigpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIGNoaWxkVmlld1xuXHQgKi9cblx0b25DaGlsZHZpZXdUb2dnbGVTZWxlY3RlZDogZnVuY3Rpb24gKCBjaGlsZFZpZXcgKSB7XG5cblx0XHRjaGlsZFZpZXcubW9kZWwudG9nZ2xlU2VsZWN0ZWQoKTtcblxuXHRcdC8vIER5bmFtaWNhbGx5IGVuZm9yY2Ugc2VsZWN0aW9uIGxpbWl0XG5cdFx0aWYgKCB0aGlzLnZhbGlkYXRlU2VsZWN0aW9uTGltaXQoKSApIHtcblx0XHRcdHRoaXMuc2VsZWN0aW9uTGltaXRVbmRlcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNlbGVjdGlvbkxpbWl0T3ZlcigpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdW5saW1pdGVkIHNlbGVjdGlvbnMgYXJlIGFsbG93ZWQgb3Igd2UncmUgYmVsb3cgdGhlIHNlbGVjdGlvbiBsaW1pdFxuXHQgKi9cblx0dmFsaWRhdGVTZWxlY3Rpb25MaW1pdDogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IGZpZWxkQ29uZmlnID0gdGhpcy5maWVsZE1vZGVsLmdldCggJ2ZpZWxkQ29uZmlnJyApO1xuXHRcdGxldCBsaW1pdCwgbnVtU2VsZWN0ZWQ7XG5cblx0XHRsaW1pdCA9ICtmaWVsZENvbmZpZy5waWNrX2xpbWl0OyAgLy8gVW5hcnkgcGx1cyB3aWxsIGltcGxpY2l0bHkgY2FzdCB0byBudW1iZXJcblx0XHRudW1TZWxlY3RlZCA9IHRoaXMuY29sbGVjdGlvbi5maWx0ZXJCeVNlbGVjdGVkKCkubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIDAgPT09IGxpbWl0IHx8IG51bVNlbGVjdGVkIDwgbGltaXQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRzZWxlY3Rpb25MaW1pdE92ZXI6IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLiRlbC5maW5kKCAnaW5wdXQ6Y2hlY2tib3g6bm90KDpjaGVja2VkKScgKS5wcm9wKCAnZGlzYWJsZWQnLCB0cnVlICk7XG5cdFx0dGhpcy50cmlnZ2VyKCAnc2VsZWN0aW9uOmxpbWl0Om92ZXInLCB0aGlzICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRzZWxlY3Rpb25MaW1pdFVuZGVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy4kZWwuZmluZCggJ2lucHV0OmNoZWNrYm94JyApLnByb3AoICdkaXNhYmxlZCcsIGZhbHNlICk7XG5cdFx0dGhpcy50cmlnZ2VyKCAnc2VsZWN0aW9uOmxpbWl0OnVuZGVyJywgdGhpcyApO1xuXHR9XG5cbn0gKTtcbiIsIi8qZ2xvYmFsIGpRdWVyeSwgXywgQmFja2JvbmUsIE1hcmlvbmV0dGUsIHdwICovXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3ZpZXdzL2xpc3QtaXRlbS5odG1sJztcblxuaW1wb3J0IHsgUG9kc0ZpZWxkTGlzdFZpZXcsIFBvZHNGaWVsZFZpZXcgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29yZS9wb2RzLWZpZWxkLXZpZXdzJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgTGlzdEl0ZW0gPSBQb2RzRmllbGRWaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAnbGknLFxuXG5cdGNsYXNzTmFtZTogJ3BvZHMtZGZ2LWxpc3QtaXRlbSBwb2RzLXJlbGF0aW9uc2hpcCcsXG5cblx0dGVtcGxhdGU6IF8udGVtcGxhdGUoIHRlbXBsYXRlICksXG5cblx0dWk6IHtcblx0XHRyZW1vdmVCdXR0b246ICcucG9kcy1kZnYtbGlzdC1yZW1vdmUgYScsXG5cdFx0ZWRpdEJ1dHRvbjogJy5wb2RzLWRmdi1saXN0LWVkaXQgYSdcblx0fSxcblxuXHR0cmlnZ2Vyczoge1xuXHRcdCdjbGljayBAdWkucmVtb3ZlQnV0dG9uJzogJ3JlbW92ZTppdGVtOmNsaWNrJyxcblx0XHQnY2xpY2sgQHVpLmVkaXRCdXR0b24nOiAnZWRpdDppdGVtOmNsaWNrJ1xuXHR9LFxuXG5cdHRlbXBsYXRlQ29udGV4dDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvcmRpbmFsOiB0aGlzLm1vZGVsLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcy5tb2RlbCApXG5cdFx0fTtcblx0fVxuXG59ICk7XG5cbi8qKlxuICogIFJlcHJlc2VudHMgdGhlIG1hcmt1cCBvZiB0aGUgY29udGFpbmVyIGFzIGEgd2hvbGVcbiAqL1xuZXhwb3J0IGNvbnN0IExpc3RWaWV3ID0gUG9kc0ZpZWxkTGlzdFZpZXcuZXh0ZW5kKCB7XHQvLyBDYWNoZSB0aGUgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBvdmVyYWxsIGNvbnRhaW5lclxuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAndWwnLFxuXG5cdGNsYXNzTmFtZTogJ3BvZHMtZGZ2LWxpc3QgcG9kcy1yZWxhdGlvbnNoaXAnLFxuXG5cdGNoaWxkVmlldzogTGlzdEl0ZW0sXG5cblx0Ly8gUGFzcyB0aGVzZSB1cCB0aGUgY29udGFpbm1lbnQgY2hhaW5cblx0Y2hpbGRWaWV3VHJpZ2dlcnM6IHtcblx0XHQncmVtb3ZlOml0ZW06Y2xpY2snOiAnY2hpbGR2aWV3OnJlbW92ZTppdGVtOmNsaWNrJyxcblx0XHQnZWRpdDppdGVtOmNsaWNrJzogJ2NoaWxkdmlldzplZGl0Oml0ZW06Y2xpY2snXG5cdH0sXG5cblx0ZmlsdGVyOiBmdW5jdGlvbiAoIGNoaWxkLCBpbmRleCwgY29sbGVjdGlvbiApIHtcblx0XHRyZXR1cm4gY2hpbGQuYXR0cmlidXRlcy5zZWxlY3RlZDtcblx0fSxcblxuXHRvbkF0dGFjaDogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IGZpZWxkQ29uZmlnID0gdGhpcy5vcHRpb25zLmZpZWxkTW9kZWwuZ2V0KCAnZmllbGRDb25maWcnICk7XG5cblx0XHQvLyBAdG9kb1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTczNTM3Mi9qcXVlcnktc29ydGFibGUtbGlzdC1zY3JvbGwtYmFyLWp1bXBzLXVwLXdoZW4tc29ydGluZy80MTg3ODMzIzQxODc4MzNcblxuXHRcdGlmICggMSAhPT0gZmllbGRDb25maWdbICdwaWNrX2xpbWl0JyBdICkge1xuXHRcdFx0Ly8gaW5pdCBzb3J0YWJsZVxuXHRcdFx0dGhpcy4kZWwuc29ydGFibGUoIHtcblx0XHRcdFx0Y29udGFpbm1lbnQ6ICdwYXJlbnQnLFxuXHRcdFx0XHRheGlzOiAneScsXG5cdFx0XHRcdHNjcm9sbFNlbnNpdGl2aXR5OiA0MCxcblx0XHRcdFx0dG9sZXJhbmNlOiAncG9pbnRlcicsXG5cdFx0XHRcdG9wYWNpdHk6IDAuNlxuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxuXG59ICk7XG4iLCIvKmdsb2JhbCBqUXVlcnksIF8sIEJhY2tib25lLCBNYXJpb25ldHRlLCB3cCAqL1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay92aWV3cy9yYWRpby1pdGVtLmh0bWwnO1xuXG5pbXBvcnQgeyBQb2RzRmllbGRMaXN0VmlldywgUG9kc0ZpZWxkVmlldyB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL3BvZHMtZmllbGQtdmlld3MnO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBSYWRpb0l0ZW0gPSBQb2RzRmllbGRWaWV3LmV4dGVuZCgge1xuXHRjaGlsZFZpZXdFdmVudFByZWZpeDogZmFsc2UsIC8vIERpc2FibGUgaW1wbGljaXQgZXZlbnQgbGlzdGVuZXJzIGluIGZhdm9yIG9mIGV4cGxpY2l0IGNoaWxkVmlld1RyaWdnZXJzIGFuZCBjaGlsZFZpZXdFdmVudHNcblxuXHR0YWdOYW1lOiAnbGknLFxuXG5cdHRlbXBsYXRlOiBfLnRlbXBsYXRlKCB0ZW1wbGF0ZSApLFxuXG5cdHRlbXBsYXRlQ29udGV4dDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvcmRpbmFsOiB0aGlzLm1vZGVsLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcy5tb2RlbCApICsgMSAvLyBPbmUgYmFzZWQgaW5kZXhpbmcgdW5saWtlIGNoZWNrYm94ZXNcblx0XHR9O1xuXHR9LFxuXG5cdG1vZGVsQ2hhbmdlZDogZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMucmVuZGVyKCk7XG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBSYWRpb1ZpZXcgPSBQb2RzRmllbGRMaXN0Vmlldy5leHRlbmQoIHtcblx0Y2hpbGRWaWV3RXZlbnRQcmVmaXg6IGZhbHNlLCAvLyBEaXNhYmxlIGltcGxpY2l0IGV2ZW50IGxpc3RlbmVycyBpbiBmYXZvciBvZiBleHBsaWNpdCBjaGlsZFZpZXdUcmlnZ2VycyBhbmQgY2hpbGRWaWV3RXZlbnRzXG5cblx0dGFnTmFtZTogJ3VsJyxcblxuXHRjbGFzc05hbWU6ICdwb2RzLXJhZGlvJyxcblxuXHRjaGlsZFZpZXc6IFJhZGlvSXRlbVxufSApO1xuIiwiLypnbG9iYWwgalF1ZXJ5LCBfLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSwgc2VsZWN0Miwgc3ByaW50Ziwgd3AsIGFqYXh1cmwsIFBvZHNJMThuICovXG5cbi8vIE5vdGU6IHRoaXMgaXMgYSB0ZW1wbGF0ZS1sZXNzIHZpZXdcbmltcG9ydCB7IFBvZHNGaWVsZExpc3RWaWV3LCBQb2RzRmllbGRWaWV3IH0gZnJvbSAncG9kcy1kZnYvc3JjL2NvcmUvcG9kcy1maWVsZC12aWV3cyc7XG5pbXBvcnQgeyBSZWxhdGlvbnNoaXBDb2xsZWN0aW9uIH0gZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9waWNrL3JlbGF0aW9uc2hpcC1tb2RlbCc7XG5cbmNvbnN0IFNFTEVDVDJfVUxfVEFSR0VUID0gJ3VsLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCc7XG5jb25zdCBTRUxFQ1QyX1NFTEVDVEVEX1RBUkdFVCA9ICcuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZSc7XG5cbi8qKlxuICogb3B0aW9uXG4gKlxuICogQGV4dGVuZHMgQmFja2JvbmUuVmlld1xuICovXG5leHBvcnQgY29uc3QgU2VsZWN0SXRlbSA9IFBvZHNGaWVsZFZpZXcuZXh0ZW5kKCB7XG5cdGNoaWxkVmlld0V2ZW50UHJlZml4OiBmYWxzZSwgLy8gRGlzYWJsZSBpbXBsaWNpdCBldmVudCBsaXN0ZW5lcnMgaW4gZmF2b3Igb2YgZXhwbGljaXQgY2hpbGRWaWV3VHJpZ2dlcnMgYW5kIGNoaWxkVmlld0V2ZW50c1xuXG5cdHRhZ05hbWU6ICdvcHRpb24nLFxuXG5cdHRlbXBsYXRlOiBmYWxzZSxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cdFx0dGhpcy4kZWwudmFsKCB0aGlzLm1vZGVsLmdldCggJ2lkJyApICk7XG5cblx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLm1vZGVsLmdldCggJ25hbWUnICkgKTtcblxuXHRcdGlmICggdGhpcy5tb2RlbC5nZXQoICdzZWxlY3RlZCcgKSApIHtcblx0XHRcdHRoaXMuJGVsLnByb3AoICdzZWxlY3RlZCcsICdzZWxlY3RlZCcgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuLyoqXG4gKiBvcHRncm91cFxuICpcbiAqIEBleHRlbmRzIEJhY2tib25lLlZpZXdcbiAqL1xuZXhwb3J0IGNvbnN0IE9wdGdyb3VwID0gUG9kc0ZpZWxkTGlzdFZpZXcuZXh0ZW5kKCB7XG5cdGNoaWxkVmlld0V2ZW50UHJlZml4OiBmYWxzZSwgLy8gRGlzYWJsZSBpbXBsaWNpdCBldmVudCBsaXN0ZW5lcnMgaW4gZmF2b3Igb2YgZXhwbGljaXQgY2hpbGRWaWV3VHJpZ2dlcnMgYW5kIGNoaWxkVmlld0V2ZW50c1xuXG5cdHRhZ05hbWU6ICdvcHRncm91cCcsXG5cblx0Y2hpbGRWaWV3OiBTZWxlY3RJdGVtLFxuXG5cdGF0dHJpYnV0ZXM6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bGFiZWw6IHRoaXMubW9kZWwuZ2V0KCAnbGFiZWwnIClcblx0XHR9O1xuXHR9XG59ICk7XG5cbi8qKlxuICogc2VsZWN0XG4gKlxuICogQGV4dGVuZHMgQmFja2JvbmUuVmlld1xuICovXG5leHBvcnQgY29uc3QgU2VsZWN0VmlldyA9IE1hcmlvbmV0dGUuQ29sbGVjdGlvblZpZXcuZXh0ZW5kKCB7XG5cdGNoaWxkVmlld0V2ZW50UHJlZml4OiBmYWxzZSwgLy8gRGlzYWJsZSBpbXBsaWNpdCBldmVudCBsaXN0ZW5lcnMgaW4gZmF2b3Igb2YgZXhwbGljaXQgY2hpbGRWaWV3VHJpZ2dlcnMgYW5kIGNoaWxkVmlld0V2ZW50c1xuXG5cdHRhZ05hbWU6ICdzZWxlY3QnLFxuXG5cdHRyaWdnZXJzOiB7XG5cdFx0J2NoYW5nZSc6IHtcblx0XHRcdGV2ZW50OiAnY2hhbmdlOnNlbGVjdGVkJyxcblx0XHRcdHN0b3BQcm9wYWdhdGlvbjogZmFsc2Vcblx0XHR9XG5cdH0sXG5cblx0bXVsdGlMYXN0VmFsaWRTZWxlY3Rpb246IFtdLFxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gbmV3Q29sbGVjdGlvblxuXHQgKi9cblx0c2V0Q29sbGVjdGlvbjogZnVuY3Rpb24gKCBuZXdDb2xsZWN0aW9uICkge1xuXHRcdHRoaXMuY29sbGVjdGlvbiA9IG5ld0NvbGxlY3Rpb247XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBvcHRpb25zXG5cdCAqL1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cdFx0dGhpcy5maWVsZE1vZGVsID0gb3B0aW9ucy5maWVsZE1vZGVsO1xuXHRcdHRoaXMuZmllbGRDb25maWcgPSB0aGlzLmZpZWxkTW9kZWwuZ2V0KCAnZmllbGRDb25maWcnICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldCB0aGUgcHJvcGVyIGNoaWxkIHZpZXcgKG9wdGdyb3VwcyBvciBubylcblx0ICpcblx0ICogQHBhcmFtIGl0ZW1cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjaGlsZFZpZXc6IGZ1bmN0aW9uICggaXRlbSApIHtcblx0XHRpZiAoIHRoaXMuZmllbGRDb25maWcub3B0Z3JvdXAgKSB7XG5cdFx0XHRyZXR1cm4gT3B0Z3JvdXA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBTZWxlY3RJdGVtO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogdG9kbzogV2UncmUgYnlwYXNzaW5nIHRoZSBQb2RzRmllbGRMaXN0VmlldyBmdW5jdGlvbmFsaXR5LCBuZWVkIHRvIGV4cGxpY2l0bHkgaW5jbHVkZSBpdCBmb3Igbm93XG5cdCAqXG5cdCAqIEBwYXJhbSBtb2RlbFxuXHQgKiBAcGFyYW0gaW5kZXhcblx0ICogQHJldHVybnMge3tmaWVsZE1vZGVsOiAqfX1cblx0ICovXG5cdGNoaWxkVmlld09wdGlvbnM6IGZ1bmN0aW9uICggbW9kZWwsIGluZGV4ICkge1xuXHRcdGxldCByZXR1cm5PcHRpb25zID0geyBmaWVsZE1vZGVsOiB0aGlzLmZpZWxkTW9kZWwgfTtcblxuXHRcdGlmICggdGhpcy5maWVsZENvbmZpZy5vcHRncm91cCApIHtcblx0XHRcdHJldHVybk9wdGlvbnMuY29sbGVjdGlvbiA9IG5ldyBSZWxhdGlvbnNoaXBDb2xsZWN0aW9uKCBtb2RlbC5nZXQoICdjb2xsZWN0aW9uJyApICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldHVybk9wdGlvbnM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIHRvZG86IFdlJ3JlIGJ5cGFzc2luZyB0aGUgUG9kc0ZpZWxkTGlzdFZpZXcgZnVuY3Rpb25hbGl0eSwgbmVlZCB0byBleHBsaWNpdGx5IGluY2x1ZGUgaXQgZm9yIG5vd1xuXHQgKlxuXHQgKiBAcmV0dXJucyB7e319XG5cdCAqL1xuXHRzZXJpYWxpemVEYXRhOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3QgZmllbGRNb2RlbCA9IHRoaXMub3B0aW9ucy5maWVsZE1vZGVsO1xuXHRcdGxldCBkYXRhID0gdGhpcy5tb2RlbCA/IHRoaXMubW9kZWwudG9KU09OKCkgOiB7fTtcblxuXHRcdGRhdGEuaHRtbEF0dHIgPSBmaWVsZE1vZGVsLmdldCggJ2F0dHJpYnV0ZXMnICk7XG5cdFx0ZGF0YS5maWVsZENvbmZpZyA9IGZpZWxkTW9kZWwuZ2V0KCAnZmllbGRDb25maWcnICk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICpcblx0ICovXG5cdGF0dHJpYnV0ZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sQXR0ci5uYW1lXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxBdHRyLmNsYXNzXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxBdHRyLm5hbWVfY2xlYW5cblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbEF0dHIuaWRcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZENvbmZpZy5waWNrX2Zvcm1hdF90eXBlICdzaW5nbGUnIG9yICdtdWx0aSdcblx0XHQgKi9cblx0XHRjb25zdCBmaWVsZE1vZGVsID0gdGhpcy5vcHRpb25zLmZpZWxkTW9kZWw7XG5cdFx0Y29uc3QgaHRtbEF0dHIgPSBmaWVsZE1vZGVsLmdldCggJ2h0bWxBdHRyJyApO1xuXHRcdGNvbnN0IGZpZWxkQ29uZmlnID0gZmllbGRNb2RlbC5nZXQoICdmaWVsZENvbmZpZycgKTtcblxuXHRcdGxldCBuYW1lID0gaHRtbEF0dHIubmFtZTtcblx0XHRpZiAoICdtdWx0aScgPT09IGZpZWxkQ29uZmlnLnBpY2tfZm9ybWF0X3R5cGUgKSB7XG5cdFx0XHRuYW1lID0gbmFtZSArICdbXSc7XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHQnbmFtZSc6IG5hbWUsXG5cdFx0XHQnY2xhc3MnOiBodG1sQXR0ci5jbGFzcyxcblx0XHRcdCdkYXRhLW5hbWUtY2xlYW4nOiBodG1sQXR0ci5uYW1lX2NsZWFuLFxuXHRcdFx0J2lkJzogaHRtbEF0dHIuaWQsXG5cdFx0XHQndGFiaW5kZXgnOiAnMicsXG5cdFx0XHQnbXVsdGlwbGUnOiAoICdtdWx0aScgPT09IGZpZWxkQ29uZmlnLnBpY2tfZm9ybWF0X3R5cGUgKVxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHVwIHRvIGJlIGRvbmUgb25jZSBhdHRhY2hlZCB0byB0aGUgRE9NLiAgU2VsZWN0MiBoYXMgc29tZSBzZXR1cCBuZWVkcy5cblx0ICpcblx0ICogQHZhciB7UmVsYXRpb25zaGlwQ29sbGVjdGlvbn0gdGhpcy5jb2xsZWN0aW9uXG5cdCAqL1xuXHRvbkF0dGFjaDogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IHZpZXdfbmFtZSA9IHRoaXMuZmllbGRDb25maWcudmlld19uYW1lO1xuXHRcdGNvbnN0IGZvcm1hdF90eXBlID0gdGhpcy5maWVsZENvbmZpZy5waWNrX2Zvcm1hdF90eXBlO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSBzZWxlY3QyIGZpZWxkc1xuXHRcdGlmICggJ3NlbGVjdDInID09PSB2aWV3X25hbWUgKSB7XG5cdFx0XHR0aGlzLnNldHVwU2VsZWN0MigpO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGluaXRpYWwgc2VsZWN0aW9uIGxpbWl0IHN0YXR1cyBmb3IgcmVndWxhciBtdWx0aXNlbGVjdCBhbmQgZW5mb3JjZSBpdCBpZiBuZWVkZWRcblx0XHRpZiAoICdzZWxlY3QnID09PSB2aWV3X25hbWUgJiYgJ211bHRpJyA9PT0gZm9ybWF0X3R5cGUgKSB7XG5cblx0XHRcdC8vIFN0b3JlIGluaXRpYWwgc2VsZWN0aW9uIGluIGNhc2Ugd2UgbmVlZCB0byByZXZlcnQgYmFjayBmcm9tIGFuIGludmFsaWQgc3RhdGVcblx0XHRcdHRoaXMubXVsdGlMYXN0VmFsaWRTZWxlY3Rpb24gPSB0aGlzLiRlbC52YWwoKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBhdCB0aGUgbGltaXQ6IGRpc2FibGUgYWxsIHVuc2VsZWN0ZWQgaXRlbXMgc28gbm8gc2VsZWN0aW9ucyBjYW4gYmUgYWRkZWRcblx0XHRpZiAoICF0aGlzLnZhbGlkYXRlU2VsZWN0aW9uTGltaXQoKSApIHtcblx0XHRcdHRoaXMuc2VsZWN0aW9uTGltaXRPdmVyKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAdmFyIHtSZWxhdGlvbnNoaXBDb2xsZWN0aW9ufSB0aGlzLmNvbGxlY3Rpb25cblx0ICovXG5cdG9uQ2hhbmdlU2VsZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zdCBsaW1pdCA9ICt0aGlzLmZpZWxkQ29uZmlnLnBpY2tfbGltaXQ7IC8vIFVuYXJ5IHBsdXMgd2lsbCBpbXBsaWNpdGx5IGNhc3QgdG8gbnVtYmVyXG5cdFx0Y29uc3Qgdmlld19uYW1lID0gdGhpcy5maWVsZENvbmZpZy52aWV3X25hbWU7XG5cdFx0Y29uc3QgZm9ybWF0X3R5cGUgPSB0aGlzLmZpZWxkQ29uZmlnLnBpY2tfZm9ybWF0X3R5cGU7XG5cblx0XHQvLyBSZWd1bGFyIG11bHRpc2VsZWN0IG1heSBuZWVkIHRvIHJlamVjdCB0aGUgc2VsZWN0aW9uIGNoYW5nZVxuXHRcdGlmICggJ3NlbGVjdCcgPT09IHZpZXdfbmFtZSAmJiAnbXVsdGknID09PSBmb3JtYXRfdHlwZSApIHtcblxuXHRcdFx0Ly8gSGFzIHRoZSBzZWxlY3Rpb24gZ29uZSBPVkVSIHRoZSBsaW1pdD8gIENhbiBvY2N1ciB3aXRoIGNvbnNlY3V0aXZlIGl0ZW0gc2VsZWN0aW9uLlxuXHRcdFx0aWYgKCBudWxsICE9PSB0aGlzLiRlbC52YWwoKSAmJiAwICE9PSBsaW1pdCAmJiBsaW1pdCA8IHRoaXMuJGVsLnZhbCgpLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBSZXZlcnQgdG8gdGhlIGxhc3QgdmFsaWQgc2VsZWN0aW9uIGFuZCBwdW50IG9uIHdoYXQgdGhleSBhdHRlbXB0ZWRcblx0XHRcdFx0dGhpcy4kZWwudmFsKCB0aGlzLm11bHRpTGFzdFZhbGlkU2VsZWN0aW9uICk7XG5cdFx0XHRcdHdpbmRvdy5hbGVydCggYCR7UG9kc0kxOG4uX18oICdZb3UgY2FuIG9ubHkgc2VsZWN0JyApfSAke3NwcmludGYoIFBvZHNJMThuLl9uKCAnJXMgaXRlbScsICclcyBpdGVtcycsIGxpbWl0ICksIGxpbWl0ICl9YCApO1xuXHRcdFx0XHR0aGlzLnRyaWdnZXIoICdjaGlsZHZpZXc6Y2hhbmdlOnNlbGVjdGVkJywgdGhpcyApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIHRoZSBjb2xsZWN0aW9uIGFuZCBsYXN0IHZhbGlkIHNlbGVjdGlvbiBiYXNlZCBvbiB0aGUgbmV3IHNlbGVjdGlvbnNcblx0XHR0aGlzLmNvbGxlY3Rpb24uc2V0U2VsZWN0ZWQoIHRoaXMuJGVsLnZhbCgpICk7XG5cdFx0dGhpcy5tdWx0aUxhc3RWYWxpZFNlbGVjdGlvbiA9IHRoaXMuJGVsLnZhbCgpO1xuXG5cdFx0Ly8gRHluYW1pY2FsbHkgZW5mb3JjZSBzZWxlY3Rpb24gbGltaXRzXG5cdFx0aWYgKCB0aGlzLnZhbGlkYXRlU2VsZWN0aW9uTGltaXQoKSApIHtcblx0XHRcdHRoaXMuc2VsZWN0aW9uTGltaXRVbmRlcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNlbGVjdGlvbkxpbWl0T3ZlcigpO1xuXHRcdH1cblxuXHRcdHRoaXMudHJpZ2dlciggJ2NoaWxkdmlldzpjaGFuZ2U6c2VsZWN0ZWQnLCB0aGlzICk7XG5cdH0sXG5cblx0b25CZWZvcmVEZXRhY2g6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuJGVsLnNlbGVjdFdvbyggJ2Rlc3Ryb3knICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEB2YXIge1JlbGF0aW9uc2hpcENvbGxlY3Rpb259IHRoaXMuY29sbGVjdGlvblxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB1bmxpbWl0ZWQgc2VsZWN0aW9ucyBhcmUgYWxsb3dlZCBvciB3ZSdyZSBiZWxvdyB0aGUgc2VsZWN0aW9uIGxpbWl0XG5cdCAqL1xuXHR2YWxpZGF0ZVNlbGVjdGlvbkxpbWl0OiBmdW5jdGlvbiAoKSB7XG5cdFx0bGV0IGxpbWl0LCBudW1TZWxlY3RlZDtcblxuXHRcdGxpbWl0ID0gK3RoaXMuZmllbGRDb25maWcucGlja19saW1pdDsgIC8vIFVuYXJ5IHBsdXMgd2lsbCBpbXBsaWNpdGx5IGNhc3QgdG8gbnVtYmVyXG5cdFx0bnVtU2VsZWN0ZWQgPSB0aGlzLmNvbGxlY3Rpb24uZmlsdGVyQnlTZWxlY3RlZCgpLmxlbmd0aDtcblxuXHRcdHJldHVybiAwID09PSBsaW1pdCB8fCBudW1TZWxlY3RlZCA8IGxpbWl0O1xuXHR9LFxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0c2VsZWN0aW9uTGltaXRPdmVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3Qgdmlld05hbWUgPSB0aGlzLmZpZWxkQ29uZmlnLnZpZXdfbmFtZTtcblx0XHRjb25zdCBmb3JtYXRUeXBlID0gdGhpcy5maWVsZENvbmZpZy5waWNrX2Zvcm1hdF90eXBlO1xuXG5cdFx0aWYgKCAnc2VsZWN0JyA9PT0gdmlld05hbWUgJiYgJ211bHRpJyA9PT0gZm9ybWF0VHlwZSApIHtcblx0XHRcdC8vIEF0IHRoZSBsaW1pdDogZGlzYWJsZSBhbGwgdW5zZWxlY3RlZCBpdGVtcyBzbyBubyBmdXJ0aGVyIHNlbGVjdGlvbnMgY2FuIGJlIGFkZGVkXG5cdFx0XHR0aGlzLiRlbC5maW5kKCAnb3B0aW9uOm5vdCg6c2VsZWN0ZWQpJyApLnByb3AoICdkaXNhYmxlZCcsIHRydWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLnRyaWdnZXIoICdjaGlsZHZpZXc6c2VsZWN0aW9uOmxpbWl0Om92ZXInLCB0aGlzICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRzZWxlY3Rpb25MaW1pdFVuZGVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3Qgdmlld05hbWUgPSB0aGlzLmZpZWxkQ29uZmlnLnZpZXdfbmFtZTtcblx0XHRjb25zdCBmb3JtYXRUeXBlID0gdGhpcy5maWVsZENvbmZpZy5waWNrX2Zvcm1hdF90eXBlO1xuXG5cdFx0aWYgKCAnc2VsZWN0JyA9PT0gdmlld05hbWUgJiYgJ211bHRpJyA9PT0gZm9ybWF0VHlwZSApIHtcblx0XHRcdC8vIE5vdCBhdCBsaW1pdCwgbWFrZSBzdXJlIGFsbCBpdGVtcyBhcmUgZW5hYmxlZFxuXHRcdFx0dGhpcy4kZWwuZmluZCggJ29wdGlvbicgKS5wcm9wKCAnZGlzYWJsZWQnLCBmYWxzZSApO1xuXHRcdH1cblxuXHRcdHRoaXMudHJpZ2dlciggJ2NoaWxkdmlldzpzZWxlY3Rpb246bGltaXQ6dW5kZXInLCB0aGlzICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vIGZpbHRlcmluZywgYnkgZGVmYXVsdC4gIENvbnN1bWluZyB2aWV3cyBjYW4gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBwcm92aWRlIGN1c3RvbSBmaWx0ZXJpbmdcblx0ICogKGUuZy4gTGlzdCBWaWV3IG5lZWRzIHRvIGZpbHRlciBpdGVtcyBhbHJlYWR5IHNlbGVjdGVkIGZvciBpdHMgc2VsZWN0IGZyb20gZXhpc3RpbmcgbGlzdClcblx0ICpcblx0ICogQHBhcmFtIGRhdGFcblx0ICovXG5cdGZpbHRlckFqYXhMaXN0OiBmdW5jdGlvbiAoIGRhdGEgKSB7XG5cdFx0Y29uc3Qgc2VsZWN0ZWRJdGVtcyA9IHRoaXMuY29sbGVjdGlvbi5maWx0ZXJCeVNlbGVjdGVkKCk7XG5cdFx0Y29uc3QgcmV0dXJuTGlzdCA9IFtdO1xuXG5cdFx0Xy5lYWNoKCBkYXRhLnJlc3VsdHMsIGZ1bmN0aW9uICggZWxlbWVudCApIHtcblx0XHRcdGVsZW1lbnQudGV4dCA9IGVsZW1lbnQubmFtZTsgLy8gU2VsZWN0MiBuZWVkcyB0aGUgXCJ0ZXh0XCIga2V5IGJ1dCBvdXIgbW9kZWwgdXNlcyBcIm5hbWVcIlxuXG5cdFx0XHQvLyBPbmx5IGtlZXAgY2hvaWNlcyB0aGF0IGhhdmVuJ3QgYmVlbiBzZWxlY3RlZCB5ZXQsIHdlIGRvbid0IHdhbnQgc2VsZWN0ZWQgaXRlbXMgaW4gdGhlIGF1dG9jb21wbGV0ZSBwb3J0aW9uXG5cdFx0XHRpZiAoICFzZWxlY3RlZEl0ZW1zLmdldCggZWxlbWVudC5pZCApICkge1xuXHRcdFx0XHRyZXR1cm5MaXN0LnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHRyZXR1cm4geyAncmVzdWx0cyc6IHJldHVybkxpc3QgfTtcblx0fSxcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZSBTZWxlY3QyLCBzZXR1cCBkcmFnLWRyb3AgcmVvcmRlcmluZ1xuXHQgKi9cblx0c2V0dXBTZWxlY3QyOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0Y29uc3QgJHNlbGVjdDIgPSB0aGlzLiRlbDtcblx0XHRjb25zdCBmaWVsZENvbmZpZyA9IHRoaXMub3B0aW9ucy5maWVsZE1vZGVsLmdldCggJ2ZpZWxkQ29uZmlnJyApO1xuXHRcdGNvbnN0IGFqYXhEYXRhID0gZmllbGRDb25maWcuYWpheF9kYXRhO1xuXHRcdGNvbnN0IHNlbGVjdDJPdmVycmlkZXMgPSBmaWVsZENvbmZpZy5zZWxlY3QyX292ZXJyaWRlcztcblx0XHRjb25zdCBsaW1pdCA9IGZpZWxkQ29uZmlnLnBpY2tfbGltaXQ7XG5cdFx0Y29uc3QgaXNTaW5nbGUgPSAoICdzaW5nbGUnID09PSBmaWVsZENvbmZpZy5waWNrX2Zvcm1hdF90eXBlICk7XG5cdFx0Y29uc3Qgc2VsZWN0ZWRDb3VudCA9IHRoaXMuY29sbGVjdGlvbi5maWx0ZXJCeVNlbGVjdGVkKCkubGVuZ3RoO1xuXHRcdGxldCAkdWxDb250YWluZXIsIHNlbGVjdDJPcHRpb25zLCBwbGFjZWhvbGRlcjtcblxuXHRcdC8vICdwbGFjZWhvbGRlcicgZm9yIHNpbmdsZSBzZWxlY3QgcmVxdWlyZXMgYW4gZW1wdHkgb3B0aW9uLiAgTm9uZSBvZiB0aGUgZXhhbXBsZXMgc2V0IHNlbGVjdGVkIGJ1dFxuXHRcdC8vIGl0IGRpZCBub3Qgd29yayBmb3IgbWUgaW4gdGVzdGluZyB3aXRoIGp1c3QgYW4gZW1wdHkgb3B0aW9uIGxpa2UgdGhlIGV4YW1wbGVzLlxuXHRcdC8vXG5cdFx0Ly8gaHR0cHM6Ly9zZWxlY3QyLm9yZy9wbGFjZWhvbGRlcnMjc2luZ2xlLXNlbGVjdC1wbGFjZWhvbGRlcnNcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vc2VsZWN0Mi9zZWxlY3QyL2lzc3Vlcy8zNTUzXG5cdFx0aWYgKCAwID09PSBzZWxlY3RlZENvdW50ICYmIGlzU2luZ2xlICkge1xuXHRcdFx0JHNlbGVjdDIucHJlcGVuZCggJzxvcHRpb24gc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPicgKTtcblx0XHR9XG5cblx0XHQvLyBUb0RvOlxuXHRcdC8vIGxpbWl0RGlzYWJsZSBpcyBvbmx5IHVzZWQgdG8gY29udHJvbCB0aGUgTGlzdCBWaWV3J3Mgc2VsZWN0MiBjb21wb25lbnQsIGl0IHdvbid0IGJlIHNldFxuXHRcdC8vIGZvciByZWd1bGFyIGF1dG9jb21wbGV0ZS4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGdlbmVyaWMgYW5kIG5vdCBoYXZlIHRvIHBva2UgYXJvdW5kIHdpdGhcblx0XHQvLyBzcGVjaWFsIHByb3BlcnRpZXMgbGlrZSB0aGlzIGZvciBleGNlcHRpb24gY2FzZXMuXG5cdFx0aWYgKCBmaWVsZENvbmZpZy5saW1pdERpc2FibGUgKSB7XG5cdFx0XHRwbGFjZWhvbGRlciA9IGAke1BvZHNJMThuLl9fKCAnWW91IGNhbiBvbmx5IHNlbGVjdCcgKX0gJHtzcHJpbnRmKCBQb2RzSTE4bi5fbiggJyVzIGl0ZW0nLCAnJXMgaXRlbXMnLCBsaW1pdCApLCBsaW1pdCApfWA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBsYWNlaG9sZGVyID0gYCR7UG9kc0kxOG4uX18oICdTZWFyY2gnICl9ICR7ZmllbGRDb25maWcubGFiZWx9Li4uYDtcblx0XHR9XG5cblx0XHRzZWxlY3QyT3B0aW9ucyA9IHtcblx0XHRcdG1heGltdW1TZWxlY3Rpb25MZW5ndGg6IGlzU2luZ2xlID8gdW5kZWZpbmVkIDogbGltaXQsIC8vIFNob3VsZCBub3QgYmUgc2V0IGZvciBzaW5nbGUgc2VsZWN0LCBtZXNzZXMgdXAgcGxhY2Vob2xkZXJcblx0XHRcdHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcblx0XHRcdGFsbG93Q2xlYXI6IGlzU2luZ2xlLFxuXHRcdFx0ZGlzYWJsZWQ6IGZpZWxkQ29uZmlnLmxpbWl0RGlzYWJsZSxcblx0XHRcdHRhZ3M6IGZpZWxkQ29uZmlnLnBpY2tfdGFnZ2FibGUsXG5cdFx0XHRlc2NhcGVNYXJrdXA6IGZ1bmN0aW9uICggdGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmICggYWpheERhdGEuYWpheCApIHtcblx0XHRcdGpRdWVyeS5leHRlbmQoIHNlbGVjdDJPcHRpb25zLCB7XG5cdFx0XHRcdG1pbmltdW1JbnB1dExlbmd0aDogYWpheERhdGEubWluaW11bV9pbnB1dF9sZW5ndGgsXG5cdFx0XHRcdGFqYXg6IHtcblx0XHRcdFx0XHR1cmw6IGFqYXh1cmwgKyAnP3BvZHNfYWpheD0xJyxcblx0XHRcdFx0XHR0eXBlOiAnUE9TVCcsXG5cdFx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcblx0XHRcdFx0XHRkZWxheTogYWpheERhdGEuZGVsYXksXG5cdFx0XHRcdFx0ZGF0YTogZnVuY3Rpb24gKCBwYXJhbXMgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRfd3Bub25jZTogYWpheERhdGEuX3dwbm9uY2UsXG5cdFx0XHRcdFx0XHRcdGFjdGlvbjogJ3BvZHNfcmVsYXRpb25zaGlwJyxcblx0XHRcdFx0XHRcdFx0bWV0aG9kOiAnc2VsZWN0MicsXG5cdFx0XHRcdFx0XHRcdHBvZDogYWpheERhdGEucG9kLFxuXHRcdFx0XHRcdFx0XHRmaWVsZDogYWpheERhdGEuZmllbGQsXG5cdFx0XHRcdFx0XHRcdHVyaTogYWpheERhdGEudXJpLFxuXHRcdFx0XHRcdFx0XHRpZDogYWpheERhdGEuaWQsXG5cdFx0XHRcdFx0XHRcdHF1ZXJ5OiBwYXJhbXMudGVybSAvLyBUb0RvOiB0ZXJte2xhbmd9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cHJvY2Vzc1Jlc3VsdHM6IGZ1bmN0aW9uICggZGF0YSwgcGFyYW1zICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHNlbGYuZmlsdGVyQWpheExpc3QoIGRhdGEsIHBhcmFtcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIEluaXRpYWxpemUgc2VsZWN0MlxuXHRcdCRzZWxlY3QyLnNlbGVjdFdvbyggalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgc2VsZWN0Mk9wdGlvbnMsIHNlbGVjdDJPdmVycmlkZXMgKSApO1xuXG5cdFx0Ly8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSB1bCBjb250YWluZXIgb2YgdGhlIHZpc3VhbCBVSSBwb3J0aW9uLiAgQ2FuJ3QgZG8gdGhpcyB1bnRpbCBzZWxlY3QyIGlzIGluaXRpYWxpemVkXG5cdFx0JHVsQ29udGFpbmVyID0gJHNlbGVjdDIucGFyZW50KCkuZmluZCggU0VMRUNUMl9VTF9UQVJHRVQgKTtcblxuXHRcdC8vIE1ha2UgdGhlIGxpc3QgZHJhZy1kcm9wIHNvcnRhYmxlXG5cdFx0JHVsQ29udGFpbmVyLnNvcnRhYmxlKCB7XG5cdFx0XHRjb250YWlubWVudDogJ3BhcmVudCdcblx0XHR9ICk7XG5cblx0XHQvLyBXaXRoIHNlbGVjdDIgNC4wLCBzb3J0YWJsZSBpcyBqdXN0IHJlb3JkZXJpbmcgdGhlIFVJIGVsZW1lbnRzLiAgS2VlcCB0aGUgdW5kZXJseWluZyBzZWxlY3Qvb3B0aW9uIGxpc3Rcblx0XHQvLyBzeW5jZWQgd2l0aCB0aGUgY2hhbmdlcy4gIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3NlbGVjdDIvc2VsZWN0Mi9pc3N1ZXMvMzAwNFxuXHRcdCR1bENvbnRhaW5lci5vbiggJ3NvcnRzdG9wJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0Y29uc3QgJHNlbGVjdGVkID0gJHVsQ29udGFpbmVyLmZpbmQoIFNFTEVDVDJfU0VMRUNURURfVEFSR0VUICkuZ2V0KCkucmV2ZXJzZSgpO1xuXG5cdFx0XHRqUXVlcnkoICRzZWxlY3RlZCApLmVhY2goIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Y29uc3QgaWQgPSBqUXVlcnkoIHRoaXMgKS5kYXRhKCAnZGF0YScgKS5pZDtcblx0XHRcdFx0Y29uc3Qgb3B0aW9uID0gJHNlbGVjdDIuZmluZCggJ29wdGlvblt2YWx1ZT1cIicgKyBpZCArICdcIl0nIClbIDAgXTtcblxuXHRcdFx0XHQkc2VsZWN0Mi5wcmVwZW5kKCBvcHRpb24gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxufSApO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBvZHNERlZCYXNlSW5wdXQgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29tcG9uZW50cy9iYXNlLWlucHV0JztcblxuZXhwb3J0IGNvbnN0IFBvZHNERlZUZXh0ID0gKCBwcm9wcyApID0+IHtcblxuXHRyZXR1cm4gKFxuXHRcdDxQb2RzREZWQmFzZUlucHV0XG5cdFx0XHR0eXBlPVwidGV4dFwiXG5cdFx0XHR7Li4ucHJvcHN9XG5cdFx0Lz5cblx0KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgUG9kc0RGVlRleHRBcmVhID0gKCBwcm9wcyApID0+IHtcblxuXHQvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIGlmIG9uQ2hhbmdlIGlzIG9taXR0ZWQgZnJvbSBwcm9wc1xuXHRmdW5jdGlvbiBoYW5kbGVDaGFuZ2UgKCBldmVudCApIHtcblx0XHRwcm9wcy5zZXRWYWx1ZSggZXZlbnQudGFyZ2V0LnZhbHVlICk7XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDx0ZXh0YXJlYVxuXHRcdFx0dmFsdWU9eyBwcm9wcy52YWx1ZSB9XG5cdFx0XHRuYW1lPXsgcHJvcHMuaHRtbEF0dHIubmFtZSB9XG5cdFx0XHRpZD17IHByb3BzLmh0bWxBdHRyLmlkIH1cblx0XHRcdGNsYXNzTmFtZT17IHByb3BzLmNsYXNzTmFtZSB9XG5cdFx0XHRkYXRhLW5hbWUtY2xlYW49eyBwcm9wcy5odG1sQXR0ci5uYW1lX2NsZWFuIH1cblx0XHRcdGRhdGEtbGFiZWw9eyBwcm9wcy5maWVsZENvbmZpZy5sYWJlbCB9XG5cdFx0XHRvbkNoYW5nZT17IHByb3BzLm9uQ2hhbmdlIHx8IGhhbmRsZUNoYW5nZSB9XG5cdFx0XHRvbkJsdXI9eyBwcm9wcy5vbkJsdXIgfVxuXHRcdD5cblx0XHRcdHsgcHJvcHMudmFsdWUgfVxuXHRcdDwvdGV4dGFyZWE+XG5cdCk7XG59O1xuIiwiZXhwb3J0IHsgUG9kc0RGVkZpZWxkTW9kZWwgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29yZS9wb2RzLWZpZWxkLW1vZGVsJztcbmV4cG9ydCAqIGZyb20gJ3BvZHMtZGZ2L3NyYy9maWVsZHMvcGljay9yZWxhdGlvbnNoaXAtbW9kZWwnO1xuZXhwb3J0ICogZnJvbSAncG9kcy1kZnYvc3JjL2ZpZWxkcy9maWxlLXVwbG9hZC9maWxlLXVwbG9hZC1tb2RlbCc7XG4iLCJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBtblJlbmRlcmVyIH0gZnJvbSAncG9kcy1kZnYvc3JjL2NvcmUvcmVuZGVyZXJzL21uLXJlbmRlcmVyJztcbmltcG9ydCB7IHJlYWN0UmVuZGVyZXIgfSBmcm9tICdwb2RzLWRmdi9zcmMvY29yZS9yZW5kZXJlcnMvcmVhY3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgcmVhY3REaXJlY3RSZW5kZXJlciB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL3JlbmRlcmVycy9yZWFjdC1kaXJlY3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgUG9kc0diTW9kYWxMaXN0ZW5lciB9IGZyb20gJ3BvZHMtZGZ2L3NyYy9jb3JlL2diLW1vZGFsLWxpc3RlbmVyJztcbmltcG9ydCAqIGFzIGZpZWxkcyBmcm9tICdwb2RzLWRmdi9zcmMvZmllbGQtbWFuaWZlc3QnO1xuaW1wb3J0ICogYXMgbW9kZWxzIGZyb20gJ3BvZHMtZGZ2L3NyYy9tb2RlbC1tYW5pZmVzdCc7XG5cbmNvbnN0IFNDUklQVF9UQVJHRVQgPSAnc2NyaXB0LnBvZHMtZGZ2LWZpZWxkLWRhdGEnOyAgIC8vIFdoYXQgc2NyaXB0cyB0byBsb29rIGZvclxuXG5jb25zdCBmaWVsZENsYXNzZXMgPSAge1xuXHQnZmlsZSc6IHtcblx0XHRGaWVsZENsYXNzOiBmaWVsZHMuRmlsZVVwbG9hZCxcblx0XHRyZW5kZXJlcjogbW5SZW5kZXJlclxuXHR9LFxuXHQnYXZhdGFyJzoge1xuXHRcdEZpZWxkQ2xhc3M6IGZpZWxkcy5GaWxlVXBsb2FkLFxuXHRcdHJlbmRlcmVyOiBtblJlbmRlcmVyXG5cdH0sXG5cdCdwaWNrJzoge1xuXHRcdEZpZWxkQ2xhc3M6IGZpZWxkcy5QaWNrLFxuXHRcdHJlbmRlcmVyOiBtblJlbmRlcmVyXG5cdH0sXG5cdCd0ZXh0Jzoge1xuXHRcdEZpZWxkQ2xhc3M6IGZpZWxkcy5Qb2RzREZWVGV4dCxcblx0XHRyZW5kZXJlcjogcmVhY3RSZW5kZXJlclxuXHR9LFxuXHQncGFzc3dvcmQnOiB7XG5cdFx0RmllbGRDbGFzczogZmllbGRzLlBvZHNERlZQYXNzd29yZCxcblx0XHRyZW5kZXJlcjogcmVhY3RSZW5kZXJlclxuXHR9LFxuXHQnbnVtYmVyJzoge1xuXHRcdEZpZWxkQ2xhc3M6IGZpZWxkcy5Qb2RzREZWTnVtYmVyLFxuXHRcdHJlbmRlcmVyOiByZWFjdFJlbmRlcmVyXG5cdH0sXG5cdCdlbWFpbCc6IHtcblx0XHRGaWVsZENsYXNzOiBmaWVsZHMuUG9kc0RGVkVtYWlsLFxuXHRcdHJlbmRlcmVyOiByZWFjdFJlbmRlcmVyXG5cdH0sXG5cdCdwYXJhZ3JhcGgnOiB7XG5cdFx0RmllbGRDbGFzczogZmllbGRzLlBvZHNERlZUZXh0QXJlYSxcblx0XHRyZW5kZXJlcjogcmVhY3RSZW5kZXJlclxuXHR9LFxuXHQnZWRpdC1wb2QnOiB7XG5cdFx0RmllbGRDbGFzczogZmllbGRzLlBvZHNERlZFZGl0UG9kLFxuXHRcdHJlbmRlcmVyOiByZWFjdERpcmVjdFJlbmRlcmVyXG5cdH0sXG59O1xuXG5jb25zdCBQb2RzREZWID0ge1xuXHRmaWVsZHM6IGZpZWxkQ2xhc3Nlcyxcblx0bW9kZWxzOiBtb2RlbHMsXG5cdGZpZWxkSW5zdGFuY2VzOiB7fSxcblxuXHQvKipcblx0ICpcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBGaW5kIGFsbCBpbi1saW5lIGRhdGEgc2NyaXB0c1xuXHRcdGpRdWVyeSggU0NSSVBUX1RBUkdFVCApLmVhY2goIGZ1bmN0aW9uICgpIHtcblx0XHRcdGNvbnN0IHBhcmVudCA9IGpRdWVyeSggdGhpcyApLnBhcmVudCgpLmdldCggMCApO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGpRdWVyeS5wYXJzZUpTT04oIGpRdWVyeSggdGhpcyApLmh0bWwoKSApO1xuXG5cdFx0XHQvLyBLbHVkZ2UgdG8gZGlzYWJsZSB0aGUgXCJBZGQgTmV3XCIgYnV0dG9uIGlmIHdlJ3JlIGluc2lkZSBhIG1lZGlhIG1vZGFsLiAgVGhpcyBzaG91bGRcblx0XHRcdC8vIGV2ZW50dWFsbHkgYmUgaXJvbmVkIG91dCBzbyB3ZSBjYW4gdXNlIEFkZCBOZXcgZnJvbSB0aGlzIGNvbnRleHQgKHNlZSAjNDg2NClcblx0XHRcdGlmICggalF1ZXJ5KCB0aGlzICkucGFyZW50cyggJy5tZWRpYS1tb2RhbC1jb250ZW50JyApLmxlbmd0aCApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cdFx0XHRcdGRhdGEuZmllbGRDb25maWcucGlja19hbGxvd19hZGRfbmV3ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWdub3JlIGFueXRoaW5nIHRoYXQgZG9lc24ndCBoYXZlIHRoZSBmaWVsZCB0eXBlIHNldFxuXHRcdFx0aWYgKCBkYXRhLmZpZWxkVHlwZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRsZXQgZmllbGQgPSBmaWVsZENsYXNzZXNbIGRhdGEuZmllbGRUeXBlIF07XG5cblx0XHRcdFx0aWYgKCBmaWVsZCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdC8vc2VsZi5maWVsZEluc3RhbmNlc1sgZGF0YS5odG1sQXR0ci5pZCBdID0gZmllbGQucmVuZGVyZXIoIGZpZWxkLmZpZWxkQ2xhc3MsIGRhdGEgKTtcblx0XHRcdFx0XHRmaWVsZC5yZW5kZXJlciggZmllbGQuRmllbGRDbGFzcywgcGFyZW50LCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlKCk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGlzTW9kYWxXaW5kb3c6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gKCAtMSAhPT0gbG9jYXRpb24uc2VhcmNoLmluZGV4T2YoICdwb2RzX21vZGFsPScgKSApO1xuXHR9LFxuXG5cdGlzR3V0ZW5iZXJnRWRpdG9yTG9hZGVkOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICggd3AuZGF0YSAhPT0gdW5kZWZpbmVkICYmIHdwLmRhdGEuc2VsZWN0KCAnY29yZS9lZGl0b3InICkgIT09IHVuZGVmaW5lZCApO1xuXHR9XG59O1xuZXhwb3J0IGRlZmF1bHQgUG9kc0RGVjtcblxuLyoqXG4gKiBLaWNrIGV2ZXJ5dGhpbmcgb2ZmIG9uIERPTUNvbnRlbnRMb2FkZWRcbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG5cdFBvZHNERlYuaW5pdCgpO1xuXG5cdC8vIExvYWQgdGhlIEd1dGVuYmVyZyBtb2RhbCBsaXN0ZW5lciBpZiB3ZSdyZSBpbnNpZGUgYSBQb2RzIG1vZGFsIHdpdGggR3V0ZW5iZXJnIGFjdGl2ZVxuXHRpZiAoIFBvZHNERlYuaXNNb2RhbFdpbmRvdygpICYmIFBvZHNERlYuaXNHdXRlbmJlcmdFZGl0b3JMb2FkZWQoKSApIHtcblx0XHRQb2RzR2JNb2RhbExpc3RlbmVyLmluaXQoKTtcblx0fVxufSApO1xuIiwiY29uc3QgeyBfXywgc3ByaW50ZiB9ID0gd3AuaTE4bjtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25SdWxlcyA9IHtcblx0cmVxdWlyZWQ6ICggdmFsdWUsIGZpZWxkTGFiZWwgKSA9PiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZhY3RzOiB7IHZhbHVlOiB2YWx1ZSB9LFxuXHRcdFx0Y29uZGl0aW9uczogeyB2YWx1ZTogeyBlcXVhbDogJycgfSB9LFxuXHRcdFx0ZXZlbnQ6IHtcblx0XHRcdFx0bWVzc2FnZTogc3ByaW50ZiggX18oICclcyBpcyByZXF1aXJlZC4nLCAncG9kcycgKSwgZmllbGRMYWJlbCApXG5cdFx0XHR9XG5cdFx0fTtcblx0fSxcblxuXHRtYXg6ICggdmFsdWUsIG1heCApID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZmFjdHM6IHsgbnVtZXJpY1ZhbHVlOiB2YWx1ZSAqIDEsIG1heDogbWF4ICogMSB9LFxuXHRcdFx0Y29uZGl0aW9uczogeyBudW1lcmljVmFsdWU6IHsgZ3JlYXRlcjogJyRtYXgnIH0gfSxcblx0XHRcdGV2ZW50OiB7XG5cdFx0XHRcdG1lc3NhZ2U6IHNwcmludGYoIF9fKCAnRXhjZWVkcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiAlcycsICdwb2RzJyApLCBtYXggKVxuXHRcdFx0fVxuXG5cdFx0fTtcblx0fSxcblxuXHRtaW46ICggdmFsdWUsIG1pbiApID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZmFjdHM6IHsgbnVtZXJpY1ZhbHVlOiB2YWx1ZSAqIDEsIG1pbjogbWluICogMSB9LFxuXHRcdFx0Y29uZGl0aW9uczogeyBudW1lcmljVmFsdWU6IHsgbGVzczogJyRtaW4nIH0gfSxcblx0XHRcdGV2ZW50OiB7XG5cdFx0XHRcdG1lc3NhZ2U6IHNwcmludGYoIF9fKCAnQmVsb3cgdGhlIG1pbmltdW0gdmFsdWUgb2YgJXMnLCAncG9kcycgKSwgbWluIClcblx0XHRcdH1cblxuXHRcdH07XG5cdH0sXG5cblx0ZW1haWxGb3JtYXQ6ICggdmFsdWUgKSA9PiB7XG5cdFx0Y29uc3QgZW1haWxSZWdleCA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGZhY3RzOiB7IHZhbHVlOiB2YWx1ZSwgZW1haWxSZWdleDogZW1haWxSZWdleCB9LFxuXHRcdFx0Y29uZGl0aW9uczoge1xuXHRcdFx0XHRub3Q6IHtcblx0XHRcdFx0XHRvcjogW1xuXHRcdFx0XHRcdFx0eyB2YWx1ZTogeyBlcXVhbDogJycgfSB9LFxuXHRcdFx0XHRcdFx0eyBlbWFpbFJlZ2V4OiB7IG1hdGNoZXM6IHZhbHVlIH0gfVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGV2ZW50OiB7XG5cdFx0XHRcdG1lc3NhZ2U6IF9fKCAnSW52YWxpZCBlbWFpbCBhZGRyZXNzIGZvcm1hdCcgKVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZTtcbmNvbnN0IHVzZUVmZmVjdCA9IFJlYWN0LnVzZUVmZmVjdDtcbmltcG9ydCBFbmdpbmUgZnJvbSAnanNvbi1ydWxlcy1lbmdpbmUtc2ltcGxpZmllZCc7XG5cbi8qKlxuICpcbiAqIEByZXR1cm5cbiAqIHtcbiAqICAgICB7ZnVuY3Rpb259IGFkZFJ1bGVzXG4gKiAgICAge2Z1bmN0aW9ufSB1c2VWYWxpZGF0aW9uLFxuICogXHR9XG4gKi9cbmV4cG9ydCBjb25zdCBwb2RzVmFsaWRhdGlvbiA9ICgpID0+IHtcblx0Y29uc3QgWyB2YWxpZGF0aW9uTWVzc2FnZXMsIHNldFZhbGlkYXRpb25NZXNzYWdlcyBdID0gdXNlU3RhdGUoIFtdICk7XG5cdGNvbnN0IHJ1bGVzID0gW107XG5cdGxldCBmYWN0cyA9IHt9O1xuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gY29uZGl0aW9uYWxSdWxlc1xuXHQgKi9cblx0Y29uc3QgYWRkUnVsZXMgPSAoIGNvbmRpdGlvbmFsUnVsZXMgKSA9PiB7XG5cdFx0Y29uZGl0aW9uYWxSdWxlcy5mb3JFYWNoKCBjb25kaXRpb25hbFJ1bGUgPT4ge1xuXHRcdFx0aWYgKCBjb25kaXRpb25hbFJ1bGUuY29uZGl0aW9uICkge1xuXHRcdFx0XHRydWxlcy5wdXNoKCBjb25kaXRpb25hbFJ1bGUucnVsZSApO1xuXHRcdFx0XHRpZiAoIGNvbmRpdGlvbmFsUnVsZS5ydWxlLmZhY3RzICkge1xuXHRcdFx0XHRcdGZhY3RzID0gT2JqZWN0LmFzc2lnbiggZmFjdHMsIGNvbmRpdGlvbmFsUnVsZS5ydWxlLmZhY3RzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH07XG5cblx0LyoqXG5cdCAqXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cblx0ICovXG5cdGNvbnN0IGNoZWNrVmFsaWRhdGlvbiA9ICgpID0+IHtcblx0XHRjb25zdCBydWxlc0VuZ2luZSA9IG5ldyBFbmdpbmUoIHJ1bGVzICk7XG5cdFx0Y29uc3QgbWVzc2FnZXMgPSBbXTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlICkgPT4ge1xuXHRcdFx0Ly8gbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZEZ1bmN0aW9uXG5cdFx0XHRydWxlc0VuZ2luZS5ydW4oIGZhY3RzIClcblx0XHRcdC50aGVuKFxuXHRcdFx0XHRldmVudHMgPT4ge1xuXHRcdFx0XHRcdGV2ZW50cy5mb3JFYWNoKCBldmVudCA9PiB7XG5cdFx0XHRcdFx0XHRtZXNzYWdlcy5wdXNoKCBldmVudC5tZXNzYWdlICk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHQpXG5cdFx0XHQuZmluYWxseSggKCkgPT4ge1xuXHRcdFx0XHRyZXNvbHZlKCBtZXNzYWdlcyApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fTtcblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBmaWVsZCdzIHZhbHVlXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gQXJyYXkgb2YgbWVzc2FnZXMgZm9yIGFsbCB2YWxpZGF0aW9uIGZhaWx1cmVzXG5cdCAqL1xuXHRjb25zdCB1c2VWYWxpZGF0aW9uID0gKCB2YWx1ZSApID0+IHtcblx0XHR1c2VFZmZlY3QoICgpID0+IHtcblx0XHRcdGNoZWNrVmFsaWRhdGlvbigpXG5cdFx0XHQudGhlbiggbWVzc2FnZXMgPT4gc2V0VmFsaWRhdGlvbk1lc3NhZ2VzKCBtZXNzYWdlcyApICk7XG5cdFx0fSwgWyB2YWx1ZSBdICk7XG5cblx0XHRyZXR1cm4gdmFsaWRhdGlvbk1lc3NhZ2VzO1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0YWRkUnVsZXM6IGFkZFJ1bGVzLFxuXHRcdHVzZVZhbGlkYXRpb246IHVzZVZhbGlkYXRpb25cblx0fTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiLCJtb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDsiLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007Il0sInNvdXJjZVJvb3QiOiIifQ==